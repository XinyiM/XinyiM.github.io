<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>What is Cloud Computing?</title>
    <link href="/2021/11/20/WhatisCloudComputing/"/>
    <url>/2021/11/20/WhatisCloudComputing/</url>
    
    <content type="html"><![CDATA[<p><a href="https://azure.microsoft.com/en-us/overview/what-is-cloud-computing/#benefits">Reference - Azure</a></p><h1 id="What-is-Cloud-Computing"><a href="#What-is-Cloud-Computing" class="headerlink" title="What is Cloud Computing?"></a>What is Cloud Computing?</h1><blockquote><p>Cloud computing is the delivery of computing services—including <strong>servers, storage, databases, networking, software, analytics, and intelligence</strong>—over the Internet (“the cloud”) to offer faster innovation, flexible resources, and economies of scale. </p></blockquote><h1 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h1><h2 id="Public"><a href="#Public" class="headerlink" title="Public"></a>Public</h2><p>Azure, AWS, 阿里云。</p><p>Delivers all the computing resources, like servers and storage <strong>over the internet.</strong></p><h2 id="Private"><a href="#Private" class="headerlink" title="Private"></a>Private</h2><p>Used exclusively by <strong>a single business or organization.</strong></p><p>Could be located in a company’s datacenter.</p><h2 id="Hybrid"><a href="#Hybrid" class="headerlink" title="Hybrid"></a>Hybrid</h2><p>Combine public and private clouds.</p><h2 id="Types-of-Services-Iaas-PaaS-SaaS"><a href="#Types-of-Services-Iaas-PaaS-SaaS" class="headerlink" title="Types of Services: Iaas/PaaS/SaaS"></a>Types of Services: Iaas/PaaS/SaaS</h2><p><a href="https://www.zhihu.com/question/20387284/answer/28514161">Reference - 知乎</a></p><p>如果你想要建立一个网站。不采用云服务，你所需要的投入大概是：买服务器，安装服务器软件，编写网站程序。</p><p>现在你采用流行的云计算，</p><p>如果你采用<strong>IaaS</strong>服务，那么你就不用自己买服务器了，随便在哪家购买虚拟机，但是还是需要自己<strong>装服务器软件。</strong></p><p>而如果你采用<strong>PaaS</strong>的服务，那么意味着你既不需要买服务器，也不需要自己装服务器软件，只需要自己<strong>开发网站程序。</strong></p><p>如果你再进一步，购买某些在线论坛或者在线网店的服务,这意味着你也不用自己开发网站程序，只需要使用它们开发好的程序，而且他们会负责程序的升级、维护、增加服务器等，而你只需要<strong>专心运营</strong>即可，此即为<strong>SaaS</strong>。</p><p><img src="https://pic2.zhimg.com/v2-1a82f8a4997b0ba53d801639d4c6706e_r.jpg?source=1940ef5c" alt="Cloud Service"></p><h2 id="IaaS"><a href="#IaaS" class="headerlink" title="IaaS"></a>IaaS</h2><p>Rent IT <strong>infrastructure—servers</strong> and <strong>virtual machines (VMs)</strong>, <strong>storage</strong>, <strong>networks</strong>, <strong>operating systems</strong></p><p>Amazon EC2 / Azure / 阿里云 / Google Clouds</p><h2 id="PaaS"><a href="#PaaS" class="headerlink" title="PaaS"></a>PaaS</h2><p>Supply an <strong>on-demand environment</strong> for developing, testing, delivering, and managing software applications. </p><p>Developers can easily create web apps without worrying about setting up or managing the underlying infrastructure of servers / storages / networks/ database…</p><p>Heroku / Salesforce / <strong>Openshift</strong></p><h2 id="SaaS"><a href="#SaaS" class="headerlink" title="SaaS"></a>SaaS</h2><p>Delivering software applications over the Internet, on demand and typically on a subscription basis.</p><p><strong>Users</strong> connect to the application over the Internet, usually with a <strong>web browse</strong> on their phone, tablet, or PC.</p><p>Gmail / Paypal / QQ</p>]]></content>
    
    
    <categories>
      
      <category>Cloud Computing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cloud Computing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React - Stete &amp; Props &amp; Data Flow &amp; Currying</title>
    <link href="/2021/10/31/ReactPropsStateDataFlow/"/>
    <url>/2021/10/31/ReactPropsStateDataFlow/</url>
    
    <content type="html"><![CDATA[<h1 id="React-State-amp-Props"><a href="#React-State-amp-Props" class="headerlink" title="React State &amp; Props"></a>React State &amp; Props</h1><ul><li>State是<code>Component</code>对内的接口。</li><li> Props是<code>Component</code>对外的接口。</li></ul><h2 id="Main-Difference"><a href="#Main-Difference" class="headerlink" title="Main Difference"></a>Main Difference</h2><ul><li>State is <strong>mutable</strong>. It’s a list of states showing the change of UI Component.</li><li>Props is <strong>Read only</strong>.  A component never modify its props.</li></ul><p><img src="https://miro.medium.com/max/1400/1*bsS8ETUQqgBpAoT2D6tjmw.png" alt="Difference between Props and State"></p><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><p>如何判断一个变量是否应该作为State？</p><ul><li>Got from <strong>Parent Component</strong>.</li><li>Immutable in the whole lifecycle.</li><li>Cannot be computed from other state/props.</li><li>Should be used in the <code>render()</code> function.</li></ul><h3 id="setState’s-Asynchronous-Nature"><a href="#setState’s-Asynchronous-Nature" class="headerlink" title="setState’s Asynchronous Nature"></a>setState’s <strong>Asynchronous</strong> Nature</h3><p>The <code>setState</code> method is an <strong>Asynchronous</strong> method and that’s batched. Multiple <code>setState</code> calls are batched before a component is rendered with a new state.</p><p>The <code>setState</code> method takes up to <strong>2</strong> arguments and it is a call back function. (Although we usually only pass <strong>one</strong> argument)</p><ul><li>The first argument can be an object or a callback that is used to update the state.</li><li>The second argument is a <strong>function</strong> that always runs after the setState is run. (Hooks nature)</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>We want a button which increments the counter by 3 when clicked.</p><p><strong>Wrong:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> &#123; counter &#125; = <span class="hljs-built_in">this</span>.state;<br><span class="hljs-built_in">this</span>.setState( &#123; <span class="hljs-attr">counter</span>: counter + <span class="hljs-number">1</span> &#125; );<br><span class="hljs-built_in">this</span>.setState( &#123; <span class="hljs-attr">counter</span>: counter + <span class="hljs-number">1</span> &#125; );<br><span class="hljs-built_in">this</span>.setState( &#123; <span class="hljs-attr">counter</span>: counter + <span class="hljs-number">1</span> &#125; );<br>&#125;<br></code></pre></td></tr></table></figure><p>In this way the counter will only increment by 1 when clicked. Because react will batch the objects in <code>setState</code> into one, which means that the  objects passed into <code>setState</code> were shallow merged.</p><p><strong>Correct:</strong></p><ul><li>Method 1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">handleClick = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-built_in">this</span>.setState( <span class="hljs-function"><span class="hljs-params">prev</span> =&gt;</span> ( &#123; <span class="hljs-attr">counter</span>: prev.counter + <span class="hljs-number">1</span> &#125; ) );<br><span class="hljs-built_in">this</span>.setState( <span class="hljs-function"><span class="hljs-params">prev</span> =&gt;</span> ( &#123; <span class="hljs-attr">counter</span>: prev.counter + <span class="hljs-number">1</span> &#125; ) );<br><span class="hljs-built_in">this</span>.setState( <span class="hljs-function"><span class="hljs-params">prev</span> =&gt;</span> ( &#123; <span class="hljs-attr">counter</span>: prev.counter + <span class="hljs-number">1</span> &#125; ) );<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Method 2</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">handleClick() =&gt; &#123;<br><span class="hljs-built_in">this</span>.setState(<br>  (&#123; count &#125;) =&gt; (&#123;<br>    count: count + <span class="hljs-number">1</span><br>  &#125;),  <span class="hljs-comment">// the first argument (function)</span><br>  () =&gt; &#123;<br>    <span class="hljs-built_in">this</span>.setState(<span class="hljs-function">(<span class="hljs-params">&#123; count &#125;</span>) =&gt;</span> (&#123;<br>      count: count + <span class="hljs-number">2</span><br>    &#125;));<br>  &#125; <span class="hljs-comment">// the second argument (callback function)</span><br>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Unidirectional-Data-Flow"><a href="#Unidirectional-Data-Flow" class="headerlink" title="Unidirectional Data Flow"></a>Unidirectional Data Flow</h2><p>In react, the unidirectional data flow means:</p><ul><li>State is passed to view and to child components</li><li>Actions are triggered by the view</li></ul><h3 id="Passing-from-Parent-to-Child"><a href="#Passing-from-Parent-to-Child" class="headerlink" title="Passing from Parent to Child"></a>Passing from Parent to Child</h3><p>Using <strong>Props</strong> to pass parent component’s <strong>State</strong> to child component.</p><p>在引用子组件的时候传值。相当于将一个属性传入子组件。例如：在子组件内通过<code>props.param</code>获取这个param的值。</p><h4 id="Parent-Component"><a href="#Parent-Component" class="headerlink" title="Parent Component"></a>Parent Component</h4><p>Parent component has a state param: <code>message</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>    <span class="hljs-built_in">super</span>(props)<br>    <span class="hljs-built_in">this</span>.state=&#123;<br>      message:<span class="hljs-string">&quot;i am from parent&quot;</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span>(<br>          &lt;Child txt=&#123;<span class="hljs-built_in">this</span>.state.message&#125;/&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Child-Component"><a href="#Child-Component" class="headerlink" title="Child Component"></a>Child Component</h4><p>子组件从父组件的state中取出该值<strong>text</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; text &#125; = <span class="hljs-built_in">this</span>.props;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> (<br>&lt;p&gt; &#123; text &#125; &lt;/p&gt;<br>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> The name of the para in parent component is <code>message</code> (in State), while the name this para in child component is <code>text</code> which is used to pass from parent when calling the child component.</p><h3 id="Passing-from-Child-to-Parent"><a href="#Passing-from-Child-to-Parent" class="headerlink" title="Passing from Child to Parent"></a>Passing from Child to Parent</h3><p>子组件通过调用父组件传到子组件的方法向父组件传值。</p><ol><li>Create a callback function in parent component which is used to get data from the child component.</li><li>Pass the callback function in the parent as a props to the child component.</li><li>The child component will call the parent callback function using props.</li></ol><h4 id="Parent-Component-1"><a href="#Parent-Component-1" class="headerlink" title="Parent Component"></a>Parent Component</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> Child <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Child&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      data: <span class="hljs-literal">null</span>,<br>    &#125;;<br>  &#125;<br><br>  handleCallback = <span class="hljs-function">(<span class="hljs-params">childData</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">data</span>: childData &#125;);<br>  &#125;;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-built_in">this</span>.state;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div&gt;<br>        &lt;Child parentCallback=&#123;<span class="hljs-built_in">this</span>.handleCallback&#125; /&gt;<br>        &lt;div&gt;&#123;data&#125;&lt;/div&gt;<br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Parent;<br></code></pre></td></tr></table></figure><h4 id="Child-Component-1"><a href="#Child-Component-1" class="headerlink" title="Child Component"></a>Child Component</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>  &#125;<br><br>  onTrigger = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">this</span>.props.parentCallBack(<span class="hljs-string">&quot;This is data from the child&quot;</span>);<br>    event.preventDefault();<br>  &#125;;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;div&gt;<br>        &lt;form onSubmit=&#123;<span class="hljs-built_in">this</span>.onTrigger&#125;&gt;<br>          &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;<br>        &lt;/form&gt;<br>      &lt;/div&gt;<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Child;<br></code></pre></td></tr></table></figure><h1 id="React-and-Redux"><a href="#React-and-Redux" class="headerlink" title="React and Redux"></a>React and Redux</h1><blockquote><p><strong>Reference</strong></p><p><a href="https://www.zhihu.com/question/41312576/answer/90493435">理解 React，但不理解 Redux，该如何通俗易懂的理解  Redux？ - Starkwang的回答</a></p></blockquote><h1 id="柯里化-Currying"><a href="#柯里化-Currying" class="headerlink" title="柯里化 (Currying)"></a>柯里化 (Currying)</h1><blockquote><p>Reference:<br><a href="https://javascript.info/currying-partials">Currying</a></p></blockquote><p>Currying is a transformation of functions that translates a function from callable as <code>f(a, b, c)</code> into callable as <code>f(a)(b)(c)</code>.</p><p><strong>Note:</strong>  <strong>Currying</strong> does not call a function but only transform a function.</p><p>For a function with 2-argument -&gt; <code>f(a, b)</code>, the currying <code>curry(f)</code> for 2-argument <code>f(a,b)</code> translates it into a function that runs as <code>f(a)(b)</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curry</span>(<span class="hljs-params">f</span>) </span>&#123; <span class="hljs-comment">// curry(f) does the currying transform</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">b</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> f(a, b);<br>    &#125;;<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// usage</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">let</span> curriedSum = curry(sum);<br><br>alert( curriedSum(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>) ); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>The implementation is straightforwards - just 2 wrappers of functions.</p><ul><li><code>curry(func f)</code> is a wrapper of <code>function(a)</code></li><li>Next level the new wrapper is returned <code>function(b)</code></li></ul><h2 id="curry"><a href="#curry" class="headerlink" title="_.curry"></a>_.curry</h2><p>The <code>_.curry()</code> from the lodash library - it returns a wrapper that allows a function to be called both normally and partially. （正常调用或者以<strong>偏函数</strong>的方式调用）</p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - Data Structures, Modern Operators and Strings</title>
    <link href="/2021/08/31/JavaScript%20-%20Data%20Structures,%20Modern%20Operators%20and%20Strings/"/>
    <url>/2021/08/31/JavaScript%20-%20Data%20Structures,%20Modern%20Operators%20and%20Strings/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Data-Structures-Modern-Operators-and-Strings"><a href="#JavaScript-Data-Structures-Modern-Operators-and-Strings" class="headerlink" title="JavaScript - Data Structures, Modern Operators and Strings"></a>JavaScript - Data Structures, Modern Operators and Strings</h1><h2 id="Destructuring-Arrays"><a href="#Destructuring-Arrays" class="headerlink" title="Destructuring Arrays"></a>Destructuring Arrays</h2><p>Switch the two variables.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[main, secondary] = [secondary, main]<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [p, q, r] = [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<br><span class="hljs-built_in">console</span>.log(p, q, r);<br></code></pre></td></tr></table></figure><p>get <code>r = undefined</code></p><h2 id="Destructuring-Objects"><a href="#Destructuring-Objects" class="headerlink" title="Destructuring Objects"></a>Destructuring Objects</h2><h3 id="Set-a-default-value"><a href="#Set-a-default-value" class="headerlink" title="Set a default value"></a>Set a default value</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; menu = [], <span class="hljs-attr">starterMenu</span>: starters = [] &#125; = restaurant;<br><span class="hljs-built_in">console</span>.log(menu, starters);<br></code></pre></td></tr></table></figure><h3 id="Mutating-Variables"><a href="#Mutating-Variables" class="headerlink" title="Mutating Variables"></a>Mutating Variables</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">111</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">999</span>;<br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">23</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">6</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">234</span> &#125;;<br>(&#123; a, b &#125; = obj); <span class="hljs-comment">// &#123; &#125; means code block</span><br><span class="hljs-built_in">console</span>.log(a, b);<br></code></pre></td></tr></table></figure><p><code>&#123;&#125;</code> means code block</p><p>Needs to wrap the destructuring assignment into parenthesis.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> restaurant = &#123;<br>orderDelivery: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">&#123; starterIndex, mainIndex, time &#125;</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<br>      <span class="hljs-string">`Order received! <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.starterMenu[starterIndex]&#125;</span> will be delivered at <span class="hljs-subst">$&#123;time&#125;</span>`</span><br>    );<br>  &#125;,<br>&#125;<br>restaurant.orderDelivery(&#123;<br>  starterIndex: <span class="hljs-number">1</span>,<br>  mainIndex: <span class="hljs-number">1</span>,<br>  time: <span class="hljs-string">&#x27;22:40&#x27;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="The-Spread-Operator"><a href="#The-Spread-Operator" class="headerlink" title="The Spread Operator"></a>The Spread Operator</h2><p>The spread operator <code>...arr</code> takes all the elements from the array and it doesnt create new variables. </p><p>Only use it in places.</p><h3 id="Copy-Array"><a href="#Copy-Array" class="headerlink" title="Copy Array"></a>Copy Array</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mainMenuArray = [...restaurant.mainMenu]<br></code></pre></td></tr></table></figure><h3 id="Merge-Arrays"><a href="#Merge-Arrays" class="headerlink" title="Merge Arrays"></a>Merge Arrays</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> menu = [...restaurant.starterMenu, ...restaurant.mainMenu]<br></code></pre></td></tr></table></figure><h2 id="REST-Pattern-and-Parameters"><a href="#REST-Pattern-and-Parameters" class="headerlink" title="REST Pattern and Parameters"></a>REST Pattern and Parameters</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [a, b, ...others] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><p>The rest patter always must be the last element in the array.</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Training - Angular</title>
    <link href="/2021/08/23/Angular/"/>
    <url>/2021/08/23/Angular/</url>
    
    <content type="html"><![CDATA[<h1 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h1><h2 id="Binding-within-HTML-Template"><a href="#Binding-within-HTML-Template" class="headerlink" title="Binding within HTML Template"></a>Binding within HTML Template</h2><p><code>&#123;&#123;&#125;&#125;</code> string interpolation (within HTML template)</p><p><code>()</code> one-way <strong>event</strong> binding OUT of a component </p><p><code>[]</code> one-way <strong>attribute</strong> binding INTO a component </p><p><code>[()]</code> <strong>Two-way</strong> binding (used for <strong>forms</strong>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;app-asset-view<br>*ngFor=&quot;let item of codes&quot;<br>code=&quot;item.code&quot;<br>[price]=&quot;item.price&quot;<br>&gt;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtr8hl9licj609304y3yo02.jpg"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;app-asset-view<br>*ngFor=&quot;let item of codes&quot;<br>[code]=&quot;item.code&quot;<br>[price]=&quot;item.price&quot;<br>&gt;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtr8izo9c3j6097056wep02.jpg"></p><p>Custom Events</p><p>All httpClient services are OBSERVABLE </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtseu8j0zij60970gsab302.jpg"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsightsComponent</span> <span class="hljs-title">implements</span> <span class="hljs-title">OnInit</span> </span>&#123;<br>  reportData = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;; <span class="hljs-comment">// define the reportData as an object with name and ID</span><br>  <span class="hljs-comment">// reportData = &#123;&#125;; // this is where our returned data from the API will go</span><br>  <span class="hljs-comment">// we need access to the service</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> typicodeService: TypicodeService</span>)</span> &#123;&#125;<br><br>  ngOnInit(): <span class="hljs-built_in">void</span> &#123;&#125;<br>  <span class="hljs-function"><span class="hljs-title">makeServiceCall</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">// we call the service method by subscribing to it</span><br>    <span class="hljs-comment">// remember the api call will be async so subscribing responds when it returns</span><br>    <span class="hljs-built_in">this</span>.typicodeService<br>      .getApiData(&#123; <span class="hljs-attr">category</span>: <span class="hljs-string">&#x27;users&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;)<br>      .subscribe(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.reportData = data;<br>      &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>A recommend way is to define the key-value pairs in the <code>reportData</code> - easy for the service to call and html to get &amp; show - is to define a <strong>Class</strong></p><p>And treat the <strong>Class</strong> as an *<em>Interface</em></p><h3 id="Old-way"><a href="#Old-way" class="headerlink" title="Old way"></a>Old way</h3><p>Every time typing a letter into the search engine - send a request object to the back end - and send the response - then destroy. - really expensive</p><h3 id="Now"><a href="#Now" class="headerlink" title="Now"></a>Now</h3><p>Every time make a key stroke - one simple observable says: something happened and I’ll handle it. Then observable sends request to the server and come back with the answer. Here’s the response to that most recent change, and the same observable then sits there - as an observable - and any subscriber to that observable will be told about the change and response </p><h3 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h3><p>Observable is an object that encapsulated an async request.  you make the async request (e.g. http request to the server REST endpoints) and the call immediately returns the Observable object.  We can subscribe to the Observable with a function that is called when the response comes back later.</p><h2 id="Production-and-Deployment"><a href="#Production-and-Deployment" class="headerlink" title="Production and Deployment"></a>Production and Deployment</h2><p><code>ng build --configuration</code> </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtsgr934o7j609705mglo02.jpg"></p><p>To avoid name conflict with cache</p>]]></content>
    
    
    <categories>
      
      <category>Training</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Training</tag>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Training - Docker</title>
    <link href="/2021/08/17/Training-DockerCloud/"/>
    <url>/2021/08/17/Training-DockerCloud/</url>
    
    <content type="html"><![CDATA[<h1 id="Training-Docker"><a href="#Training-Docker" class="headerlink" title="Training - Docker"></a>Training - Docker</h1><h2 id="Log-in-to-Linux-Server"><a href="#Log-in-to-Linux-Server" class="headerlink" title="Log in to Linux Server"></a>Log in to Linux Server</h2><ol><li>Turn on the personal linux server on <a href="https://student.conygre.com/">https://student.conygre.com/</a></li><li>Open a terminal and do <code>ssh grads@devopsnama23.conygre.com</code></li><li>Password: <code>c0nygre</code> </li><li>run <code>docker run -d -p 8081:8080 nicktodd40/compactdiscs</code> - to launch a docker container</li><li>Go to a browser - type in <code>devopsnama23.conygre.com:8081</code> </li></ol><h1 id="Docker-Overview"><a href="#Docker-Overview" class="headerlink" title="Docker Overview"></a>Docker Overview</h1><p>Docker containers abstract some of the Linux OS capabilities and the virtualization is done at the OS layer.</p><h2 id="Docker-Abstraction"><a href="#Docker-Abstraction" class="headerlink" title="Docker Abstraction"></a>Docker Abstraction</h2><p>Docker containers run in separate namespaces sharing the kernel of the host OS.</p><ul><li>Makes the containers much faster to launch than a VM</li><li>Means that containers on the same host are NOT totally isolated – more on that later</li></ul><h2 id="Run-Docker"><a href="#Run-Docker" class="headerlink" title="Run Docker"></a>Run Docker</h2><p><code>docker --version</code> check if installed.</p><h2 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h2><p>Images are commonly used from <strong>DockerHub</strong> Repository.</p><h2 id="Launch-a-Container"><a href="#Launch-a-Container" class="headerlink" title="Launch a Container"></a>Launch a Container</h2><p><code>docker run tomcat:9</code> Run a container from the Tomcat9 image from the dockerHub.</p><p><strong>More useful option:</strong></p><p><code>docker run –d –p 8081:8080 tomcat:9.0</code></p><h3 id="d-Flag"><a href="#d-Flag" class="headerlink" title="-d Flag"></a>-d Flag</h3><p>To put the container in the <strong>background</strong>, use the <code>–d</code> flag</p><h3 id="Port-Binding"><a href="#Port-Binding" class="headerlink" title="Port Binding"></a>Port Binding</h3><p>The <code>-p</code> flag allows you to bind ports between Docker Host and the container port.</p><p>In the example above:</p><p>Port <strong>8081</strong> on the <strong>Docker Host</strong> is now going to forward to the <strong>Container port</strong> <strong>8080</strong></p><h2 id="What-is-running"><a href="#What-is-running" class="headerlink" title="What is running?"></a>What is running?</h2><p><code>docker ps -a</code> - show all the running docker containers</p><h2 id="Starting-amp-Stopping-Containers"><a href="#Starting-amp-Stopping-Containers" class="headerlink" title="Starting &amp; Stopping Containers"></a>Starting &amp; Stopping Containers</h2><p><code>docker stop [id]</code></p><p><code>docker start [id]</code> </p><p>The <strong>[id]</strong> is the first couple of char from the <strong>Container ID.</strong></p><h2 id="Destroy-Containers"><a href="#Destroy-Containers" class="headerlink" title="Destroy Containers"></a>Destroy Containers</h2><p><code>docker rm -f [id]</code></p><h1 id="Docker-Images"><a href="#Docker-Images" class="headerlink" title="Docker Images"></a>Docker Images</h1><ul><li>Docker images are the template from which we launch container</li><li>Each image is based on a parent image</li><li>Each image therefore consists of multiple layers</li><li>Each layer contains directories and files</li></ul><h2 id="Building-the-Image"><a href="#Building-the-Image" class="headerlink" title="Building the Image"></a>Building the Image</h2><p><code> docker build -t trades .</code></p><p><code>-t</code> - you can can provide a tag for the image</p><ul><li>To enable easy identification</li><li>In order to push to a repository (more on that later)</li></ul><p><code>.</code> - The period (.) is the directory containing the Dockerfile</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs docker"><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span><br><span class="hljs-keyword">ADD</span><span class="bash"> target/SpringBootExample-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [ <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;java -jar /app.jar&quot;</span> ]</span><br></code></pre></td></tr></table></figure><ul><li><code>FROM</code> - specifies the base image, this base image will be copied down from Artifactory onto your local machine</li><li><code>ADD</code> - Files to copy into the image from the local machine </li><li><code>EXPOSE</code> - specify which port to expose to the outside world </li><li><code>RUN</code> - Command to run at build</li><li><code>WORKDIR</code> - Working directories for subsequent commands</li><li><code>ENV</code> - Environment Variables</li><li><code>CMD</code> - used when you might want to override the command that is used when you launch the container - like <code>[&quot;npm&quot;, &quot;start&quot;]</code></li><li><code>ENTRYPOINT</code> - used for images that are running server software where you are unlikely to want to override what it is doing</li></ul><h2 id="Manage-Images"><a href="#Manage-Images" class="headerlink" title="Manage Images"></a>Manage Images</h2><p><code>docker images</code> </p><h2 id="Remove-Images"><a href="#Remove-Images" class="headerlink" title="Remove Images"></a>Remove Images</h2><p><code>docker rmi [imageName]</code></p><h2 id="Sharing-Images"><a href="#Sharing-Images" class="headerlink" title="Sharing Images"></a>Sharing Images</h2><p><code>docker login</code></p><p><code>docker push</code></p><p><code>docker pull</code></p><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="Pull-Jenkins-Server"><a href="#Pull-Jenkins-Server" class="headerlink" title="Pull Jenkins Server"></a>Pull Jenkins Server</h2><p><code>docker run -p 8081:8080 jenkins/jenkins:lts-jdk11</code></p><p>Then open <code>devopsnama23.conygre.com:8081</code> to open Jenkins in docker container - because of pulled image </p><p><code>devopsnama23.conygre.com:8080</code> also a Jenkins running - directly on the Linux server.</p>]]></content>
    
    
    <categories>
      
      <category>Training</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Training</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Training - Introduction to DevOps and CI/CD</title>
    <link href="/2021/08/16/Training-IntroductiontoDevOpsandCI:CD/"/>
    <url>/2021/08/16/Training-IntroductiontoDevOpsandCI:CD/</url>
    
    <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>Defines <strong>project object model.</strong></p><p>Example:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.conygre.rest.test<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>RESTBasicExample<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Note:</strong> <code>packaging</code></p><ul><li>Is it a <strong>WAR</strong>, <strong>JAR</strong>, <strong>EAR</strong>, or <strong>POM</strong>? </li><li>How should the app be built</li></ul><h2 id="Dependency-Management"><a href="#Dependency-Management" class="headerlink" title="Dependency Management"></a>Dependency Management</h2><ul><li>Download them from a remote repository (typically online) and then place them in a local repository on your system</li><li>The local repository is <code>&lt;USER_HOME_DIR&gt;\.m2</code></li></ul><h2 id="Build-Steps"><a href="#Build-Steps" class="headerlink" title="Build Steps"></a>Build Steps</h2><ul><li><code>compile</code> - Compile the code</li><li><code>test</code> - Run the tests</li><li><code>package</code> - <strong>Package up the app (JAR, WAR, EAR)</strong></li><li><code>install</code> - Place package into local repository</li><li><code>deploy</code> - Place in remote repository and increment version</li></ul><p>Basically, we use <code>mvn clean package</code> to <strong>delete previous build package app.</strong></p><p>To run the project in terminal, type <code>java -jar NAMEOFJAR</code> after compilation.</p><h2 id="Setting-Up-Maven-Mac"><a href="#Setting-Up-Maven-Mac" class="headerlink" title="Setting Up Maven - Mac"></a>Setting Up Maven - Mac</h2><ul><li>Run <code>brew install maven</code> in terminal.</li><li>Run <code>mvn --version</code> to check installation.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">(base) xinyima@Xinyis-MacBook-Pro ~ % mvn --v<br>Apache Maven 3.8.2 (ea98e05a04480131370aa0c110b8c54cf726c06f)<br>Maven home: /opt/homebrew/Cellar/maven/3.8.2/libexec<br>Java version: 16.0.2, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk-16.0.2.jdk/Contents/Home<br>Default locale: en_CA, platform encoding: UTF-8<br>OS name: <span class="hljs-string">&quot;mac os x&quot;</span>, version: <span class="hljs-string">&quot;11.2&quot;</span>, arch: <span class="hljs-string">&quot;x86_64&quot;</span>, family: <span class="hljs-string">&quot;mac&quot;</span><br></code></pre></td></tr></table></figure><p><strong>Note:</strong></p><ol><li>Maven Home - <code>/opt/homebrew/Cellar/maven/3.8.2/libexec</code></li><li>JAVA Home - <code>/Library/Java/JavaVirtualMachines/jdk-16.0.2.jdk/Contents/Home</code></li><li><code>settings.xml</code> Path - <code>/opt/homebrew/Cellar/maven/3.8.2/libexec/conf/settings.xml</code></li><li><code>.m2</code> Folder Path - <code>/Users/xinyima/.m2</code></li><li>Maven Version - <code>Apache Maven 3.8.2</code></li></ol><h1 id="Introduction-to-DevOps-and-CI-CD"><a href="#Introduction-to-DevOps-and-CI-CD" class="headerlink" title="Introduction to DevOps and CI/CD"></a>Introduction to DevOps and CI/CD</h1><blockquote><p><a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/">Reference</a></p></blockquote><h2 id="What-is-DevOps"><a href="#What-is-DevOps" class="headerlink" title="What is DevOps"></a>What is DevOps</h2><p>Bring <strong>developers</strong> and <strong>operations</strong> closer together to take responsibility for <strong>building</strong>, <strong>deploying</strong> and <strong>monitoring application</strong></p><h2 id="Continuous-Integration"><a href="#Continuous-Integration" class="headerlink" title="Continuous Integration"></a>Continuous Integration</h2><p>Members of a team integrate their work frequently, usually each person integrates <strong>at least daily</strong> – leading to <strong>multiple integrations</strong> per day. </p><p><img src="https://testerhome.com/uploads/photo/2020/0d0b4825-982f-454e-b2dc-d7071c25efc5.png"></p><h2 id="Continuous-Delivery"><a href="#Continuous-Delivery" class="headerlink" title="Continuous Delivery"></a>Continuous Delivery</h2><p>The essence is to make sure that the software is always in a state where it could be put into production. </p><p>Continuous Delivery = Continuous Integration + <strong>Fully automated test suite</strong></p><h2 id="Continuous-Deployment"><a href="#Continuous-Deployment" class="headerlink" title="Continuous Deployment"></a>Continuous Deployment</h2><p><strong>An Automated</strong> process that goes to <strong>production</strong> env.</p><h3 id="Diff"><a href="#Diff" class="headerlink" title="Diff"></a>Diff</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtjf4z0otmj60gz082js202.jpg"></p><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p>This is the process that code changes go through before they are ready to be delivered to production.</p><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><p><strong>Code -&gt; Build -&gt; Automated all tests -&gt; Deploy (to Artifactory)</strong></p><h2 id="Deployment-Strategies"><a href="#Deployment-Strategies" class="headerlink" title="Deployment Strategies"></a>Deployment Strategies</h2><h3 id="Rolling-Deployment"><a href="#Rolling-Deployment" class="headerlink" title="Rolling Deployment"></a>Rolling Deployment</h3><p>Update Servers one by one - in-place update</p><p>Rollback when getting wrong.</p><h3 id="Blue-green-Deployment"><a href="#Blue-green-Deployment" class="headerlink" title="Blue-green Deployment"></a>Blue-green Deployment</h3><p>2 Envs.<br>Install on one of them, then switch.</p><h3 id="Canary-Release"><a href="#Canary-Release" class="headerlink" title="Canary Release"></a>Canary Release</h3><h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtjg6rdviyj60fm0b4js002.jpg"></p><h2 id="Jenkins-Pipeline"><a href="#Jenkins-Pipeline" class="headerlink" title="Jenkins Pipeline"></a>Jenkins Pipeline</h2><p>Check in the pipeline file in Git along with the project.</p><p>Any Jenkins server can then complete the build - even one just launched from a container. - with <strong>Jenkinsfile</strong></p><p>Jenkins can also run in a Docker container.</p>]]></content>
    
    
    <categories>
      
      <category>Training</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Training</tag>
      
      <tag>Jenkins</tag>
      
      <tag>DevOps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - Execution Context(Scope Chain, Variable Environment, this Keyword)</title>
    <link href="/2021/08/12/JavaScript-ExecutionContext/"/>
    <url>/2021/08/12/JavaScript-ExecutionContext/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Execution-Context-Scope-Chain-Variable-Environment-this-Keyword"><a href="#JavaScript-Execution-Context-Scope-Chain-Variable-Environment-this-Keyword" class="headerlink" title="JavaScript - Execution Context(Scope Chain, Variable Environment, this Keyword)"></a>JavaScript - Execution Context(Scope Chain, Variable Environment, this Keyword)</h1><h1 id="Scope-Chain"><a href="#Scope-Chain" class="headerlink" title="Scope Chain"></a>Scope Chain</h1><h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><h3 id="Scoping"><a href="#Scoping" class="headerlink" title="Scoping"></a>Scoping</h3><p>How program’s variables are organized and accessed.</p><p>Where do these variables live? </p><p>Where to access certain variable or where not?</p><h3 id="Lexical-Scoping"><a href="#Lexical-Scoping" class="headerlink" title="Lexical Scoping"></a>Lexical Scoping</h3><p>Scoping is controlled by placement of functions and blocks in the code.</p><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>Space or environment in which a certain variable is declared.</p><p>There are:</p><ul><li>Global Scope,</li><li>Function Scope,</li><li>Block Scope</li></ul><h3 id="Scope-of-a-Variable"><a href="#Scope-of-a-Variable" class="headerlink" title="Scope of a Variable"></a>Scope of a Variable</h3><p>Region of our code where a certain variable can be accessed.</p><h2 id="3-Types-of-Scope"><a href="#3-Types-of-Scope" class="headerlink" title="3 Types of Scope"></a>3 Types of Scope</h2><h3 id="Global-Scope"><a href="#Global-Scope" class="headerlink" title="Global Scope"></a>Global Scope</h3><p>Outside of any function or block.</p><p>Variables declared in global scope are accessible everywhere.</p><h3 id="Function-Scope"><a href="#Function-Scope" class="headerlink" title="Function Scope"></a>Function Scope</h3><p>Variables are accessible only inside function, <strong>NOT</strong> outside.</p><ul><li>Also called <strong>Local Scope</strong><h3 id="Block-Scope-ES6"><a href="#Block-Scope-ES6" class="headerlink" title="Block Scope (ES6)"></a>Block Scope (ES6)</h3></li></ul><p>Variables are only accessible inside a block.</p><p><strong>ONLY</strong> applies to <code>let</code> and <code>const</code> variables! - <strong>NO</strong> <code>var</code> !!!<br>Functions are <strong>also</strong> block scoped.</p><h2 id="Scope-Chain-1"><a href="#Scope-Chain-1" class="headerlink" title="Scope Chain"></a>Scope Chain</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtezvv28fmj60zt0gpgp502.jpg"></p><p>Variable Lookup in Scope Chain</p><p><strong>Scope has access to variables from all the parent scopes(outer).</strong></p><p>Scope Chain only works upwards.</p><h2 id="Example-with-Execution-Context-and-Scope-Chain"><a href="#Example-with-Execution-Context-and-Scope-Chain" class="headerlink" title="Example with Execution Context and Scope Chain"></a>Example with Execution Context and Scope Chain</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtf0bi2uiuj60xj0ga0w702.jpg"></p><p><strong>Note:</strong> <code>third()</code> cannot access variables <code>b</code> and <code>c</code> </p><p>- because <code>b</code> is in <code>first()</code> scope and <code>c</code> is in <code>second()</code> scope.</p><h1 id="Variable-Environment"><a href="#Variable-Environment" class="headerlink" title="Variable Environment"></a>Variable Environment</h1><h2 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h2><p><strong>Hoisting:</strong> Make some types of variables accessible/usable in the code before they are actually declared.</p><p><strong>Behind the scenes:</strong> Before execution, code is scanned for variable declarations, and for each variable, a new property is created in the variable environment object.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtzicb0r48j60r108jjs202.jpg"></p><h2 id="Temporal-Dead-Zone"><a href="#Temporal-Dead-Zone" class="headerlink" title="Temporal Dead Zone"></a>Temporal Dead Zone</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtzimhc3i7j60z80a2dh902.jpg"></p><h3 id="Why-TDZ"><a href="#Why-TDZ" class="headerlink" title="Why TDZ?"></a>Why TDZ?</h3><p>Makes it easier to avoid and catch errors - accessing variables before declaration is bad practice and should be avoided.</p><p>The best way to avoid it is get an error when attempting to access it. </p><h2 id="Practice-Hoisting"><a href="#Practice-Hoisting" class="headerlink" title="Practice Hoisting"></a>Practice Hoisting</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(addArrow);  <span class="hljs-comment">// ===&gt; undefined </span><br><span class="hljs-built_in">console</span>.log(addArrow(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>));  <span class="hljs-comment">// ===&gt; addArrow is not a function</span><br><br><span class="hljs-keyword">var</span> addArrow = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b;<br></code></pre></td></tr></table></figure><p>Why <code>console.log(addArrow(2,4));</code> shows addArrow is not a function? </p><p>Because <code>addArrow</code> itself is a var, then it gets undefined when trying to access before initialization, then <code>addArrow(2,4)</code> becomes <code>undefined(2,4)</code>. –&gt; TypeError</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(!numProduct) &#123;<br>deleteShoppingCart();<br>&#125;<br><span class="hljs-keyword">var</span> numProducts = <span class="hljs-number">10</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deleteShoppingCart</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;All Products Deleted!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">All</span> Products Deleted!<br></code></pre></td></tr></table></figure><p>Because we are trying to access a <code>var</code> before initialization, then got an <code>undefined</code></p><h1 id="The-this-Keyword"><a href="#The-this-Keyword" class="headerlink" title="The this Keyword"></a>The <code>this</code> Keyword</h1><p>Special variable that is created for every execution context (every function). Takes the value of (points to) the ‘owner’ of the function in which the <code>this</code> keyword is used.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu0jz163hgj60pt08uq3p02.jpg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> calAgeArr = <span class="hljs-function"><span class="hljs-params">year</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2001</span> - year);<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>&#125;;<br>calAgeArr(<span class="hljs-number">1997</span>);<br></code></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">4</span><br><span class="hljs-built_in">Window</span><br></code></pre></td></tr></table></figure><p>Arrow function does not have its own <code>this</code> =&gt; returns the lexical <code>this</code> keyword.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> jonas = &#123;<br>  year: <span class="hljs-number">1996</span>,<br>  calcAge: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2018</span> - <span class="hljs-built_in">this</span>.year);<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>  &#125;,<br>&#125;;<br>jonas.calcAge();<br><br></code></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">22<br>&#123;<span class="hljs-attribute">year</span>: <span class="hljs-number">1996</span>, calcAge: ƒ&#125;<br></code></pre></td></tr></table></figure><p>Simply returns <code>jonas</code> object.</p><h2 id="Argument-keyword"><a href="#Argument-keyword" class="headerlink" title="Argument keyword"></a><code>Argument</code> keyword</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> addExpre = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><br>addExpre(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">script</span>.js:<span class="hljs-number">21</span> Uncaught ReferenceError: arguments <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br>    <span class="hljs-keyword">at</span> addExpre (<span class="hljs-keyword">script</span>.js:<span class="hljs-number">21</span>)<br>    <span class="hljs-keyword">at</span> <span class="hljs-keyword">script</span>.js:<span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>Arrow Function does not have <code>argument</code> keyword.</p><h1 id="Primitives-vs-Objects-Primitive-vs-Reference-Types"><a href="#Primitives-vs-Objects-Primitive-vs-Reference-Types" class="headerlink" title="Primitives vs. Objects (Primitive vs. Reference Types)"></a>Primitives vs. Objects (Primitive vs. Reference Types)</h1><h2 id="Primitives"><a href="#Primitives" class="headerlink" title="Primitives"></a>Primitives</h2><p>Stored in <strong>Call Stack</strong></p><ul><li>Number</li><li>String</li><li>Boolean </li><li>Undefined</li><li>Null</li><li>Symbol</li><li>BigInt</li></ul><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p>Stored in <strong>Heap</strong></p><ul><li>Objects literal</li><li>Arrays</li><li>Functions</li></ul><h2 id="Important"><a href="#Important" class="headerlink" title="Important"></a>Important</h2><p><strong>Not all variables declared as <code>const</code> are immutable</strong></p><ul><li>Only primitive const are immutable </li><li>Object const can be changed.</li><li>Because the object are stored in the <strong>HEAP</strong> and the value of the address in the <strong>CALL STACK</strong> is only an address reference in the HEAP. </li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gu0pwf97arj60in0b5t9e02.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Training - Spring</title>
    <link href="/2021/08/11/Training-Spring/"/>
    <url>/2021/08/11/Training-Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><p>Allows one Java Object to be ==*Injected*== into as another Object as a property.</p><h2 id="Three-ways-to-Wire-Objects"><a href="#Three-ways-to-Wire-Objects" class="headerlink" title="Three ways to Wire Objects"></a>Three ways to Wire Objects</h2><h3 id="Java-Configuration-Class"><a href="#Java-Configuration-Class" class="headerlink" title="Java Configuration Class"></a>Java Configuration Class</h3><p>A Java class is created that acts as the configuration</p><p>- Creating and then wiring the two objects together</p><ul><li>The <strong>==@Configuration==</strong> annotation specifies that this class is acting as a configuration class</li><li>The <strong>==@Bean==</strong> is used to show that a method is returning a bean available within the context</li><li><strong>==@Autowired==</strong> is used to say that the Pet for the person must be automatically wired from another @Bean somewhere</li></ul><p><strong>Example:</strong></p><p>A pet is injected into person object as a property using ==Java Configuration==.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Pet <span class="hljs-title">pet</span><span class="hljs-params">()</span></span>&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Cat();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">person</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">    <span class="hljs-meta">@Autowired</span> Pet pet)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Person(pet);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="How-to-use-the-Configuration"><a href="#How-to-use-the-Configuration" class="headerlink" title="How to use the Configuration"></a>How to use the Configuration</h4><p>A configuration was loaded using <code>ApplicationContext</code></p><h3 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h3><h3 id="XML-Files"><a href="#XML-Files" class="headerlink" title="XML Files"></a>XML Files</h3><h2 id="Application-Context-or-XML-Bean-Factory"><a href="#Application-Context-or-XML-Bean-Factory" class="headerlink" title="Application Context or XML Bean Factory?"></a>Application Context or XML Bean Factory?</h2><p>Spring provides two kinds of IOC Container - </p><ul><li>XML BeanFactory</li><li>ApplicationContext</li></ul><p><img src="https://i.stack.imgur.com/EweA3.jpg"></p><p>Use <strong><code>ApplicationContext</code></strong> unless you have a really good reason not doing so.</p><p>Example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(BeansConfiguration.class);<br></code></pre></td></tr></table></figure><h2 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Person person = context.getBean(Person.class);<br>Person person2 = (Person)context.getBean(<span class="hljs-string">&quot;person&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Layered-Architectures"><a href="#Layered-Architectures" class="headerlink" title="Layered Architectures"></a>Layered Architectures</h2><h3 id="Controller-Layer"><a href="#Controller-Layer" class="headerlink" title="Controller Layer"></a>Controller Layer</h3><p>Receive requests from client applications</p><h3 id="Service-Layer"><a href="#Service-Layer" class="headerlink" title="Service Layer"></a>Service Layer</h3><p>Business layer with business functions</p><h3 id="Data-Access-Layer"><a href="#Data-Access-Layer" class="headerlink" title="Data Access Layer"></a>Data Access Layer</h3><p>Two Patterns: - Used Interchangeably</p><ul><li>Data Access Object</li><li>Repository </li></ul><h4 id="Data-Access-Repository-Pattern"><a href="#Data-Access-Repository-Pattern" class="headerlink" title="Data Access/Repository Pattern"></a>Data Access/Repository Pattern</h4><p>The pattern involves classes that carry out database access on behalf of data structures</p><p>Each Data structure has a corresponding Data Access Object</p><h2 id="More-Pattern-DTO"><a href="#More-Pattern-DTO" class="headerlink" title="More Pattern - DTO"></a>More Pattern - DTO</h2><p>Data Transfer Object (DTO)</p><ul><li>A DTO is a structure that can be used within the application itself</li><li>The DTO is converted to and from the database specific Entity class by the data layer</li><li>This decouples the rest of the application from any database specific class structures</li></ul>]]></content>
    
    
    <categories>
      
      <category>Training</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Training - REST &amp; Spring Boot</title>
    <link href="/2021/08/11/Training%20-%20REST%20&amp;%20Spring%20Boot/"/>
    <url>/2021/08/11/Training%20-%20REST%20&amp;%20Spring%20Boot/</url>
    
    <content type="html"><![CDATA[<h1 id="REST-amp-Spring-Boot"><a href="#REST-amp-Spring-Boot" class="headerlink" title="REST &amp; Spring Boot"></a>REST &amp; Spring Boot</h1><h2 id="Spring-Enterprise-Web-Architecture"><a href="#Spring-Enterprise-Web-Architecture" class="headerlink" title="Spring Enterprise Web Architecture"></a>Spring Enterprise Web Architecture</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtdasaoe55j61490fwacu02.jpg"></p><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><h3 id="Introducing-REST"><a href="#Introducing-REST" class="headerlink" title="Introducing REST"></a>Introducing REST</h3><p>REST stands for <strong>Representational State Transfer</strong> </p><p>REST is a style of architecture</p><ul><li>The Web is a large set of resources</li><li>As a client selects a resource, they are then in a particular state</li><li>The client can then select a different resource, and be in a different state as they now have a different resource</li></ul><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p>A resource always has a <strong>simple URL</strong></p><p>At the end of the URL will be URLs for other resources allowing you to get more information (and therefore change state)</p><p>URLs are <strong>logical names for resources.</strong></p><p>The actual location should be resolved by technology on the server </p><ul><li>Such as a Spring MVC Controller</li></ul><h3 id="REST-and-Web-Services"><a href="#REST-and-Web-Services" class="headerlink" title="REST and Web Services"></a>REST and Web Services</h3><ul><li>Clients send HTTP <strong>requests</strong> using the four HTTP methods</li><li>Simple parameters can be passed in the URL</li><li>Complex parameters are passed in the <strong>header as XML or JSON</strong></li></ul><h3 id="The-Richardson-Maturity-Model"><a href="#The-Richardson-Maturity-Model" class="headerlink" title="The Richardson Maturity Model"></a>The Richardson Maturity Model</h3><p><a href="http://martinfowler.com/articles/richardsonMaturityModel.html">For more information</a></p><h2 id="Spring-RESTful-Service"><a href="#Spring-RESTful-Service" class="headerlink" title="Spring RESTful Service"></a>Spring RESTful Service</h2><p><img src="https://prod-acb5.kxcdn.com/wp-content/uploads/2018/02/spring-mvc-architecture.png"></p><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><h3 id="GET-All-Person"><a href="#GET-All-Person" class="headerlink" title="GET All Person"></a>GET All Person</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(method = RequestMethod.GET)</span><br><span class="hljs-comment">//@GetMapping</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;Person&gt; <span class="hljs-title">getPeople</span><span class="hljs-params">()</span> </span>&#123; <br><span class="hljs-keyword">return</span> people.values();<br>&#125;<br></code></pre></td></tr></table></figure><p>Controller methods are annotated using @RequestMapping to specify</p><ul><li>Which <strong>URL</strong> (in this case /people as this was placed on the whole class)</li><li>Which <strong>HTTP method</strong> (in this case GET)</li></ul><h3 id="Find-Person-by-Id"><a href="#Find-Person-by-Id" class="headerlink" title="Find Person by Id"></a>Find Person by Id</h3><h4 id="Use-PathVariable"><a href="#Use-PathVariable" class="headerlink" title="Use @PathVariable"></a>Use <code>@PathVariable</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value=&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">getPersonById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br><span class="hljs-keyword">return</span> people.get(id); <br>&#125;<br></code></pre></td></tr></table></figure><p><code>http://localhost:8080/people/3</code></p><h4 id="Query-String-Parameters"><a href="#Query-String-Parameters" class="headerlink" title="Query String Parameters"></a>Query String Parameters</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Person <span class="hljs-title">getPersonById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;<br><span class="hljs-keyword">return</span> people.get(id);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>http://localhost:8080/people?id=3</code></p><h3 id="Create-a-Person"><a href="#Create-a-Person" class="headerlink" title="Create a Person"></a>Create a Person</h3><h4 id="PostMapping-consumes-”-”"><a href="#PostMapping-consumes-”-”" class="headerlink" title="@PostMapping(consumes=”..”)"></a>@PostMapping(consumes=”..”)</h4><p><code>@PostMapping(consumes=&quot;application/json&quot;, produce=&quot;application/json&quot;)</code></p><ul><li>The <code>consumes</code> attribute specifies the <strong>data type</strong> of the data being submitted, defaulting to application/json</li><li>The <code>produce</code> attribute specifies the MIME type of the return value in our case, defaulting to application/json</li></ul><h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addPerson</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Person p)</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>The <strong>@RequestBody</strong> attribute means that the JSON submitted will be automatically marshalled into a Person object</p><h3 id="How-to-Return-a-404"><a href="#How-to-Return-a-404" class="headerlink" title="How to Return a 404"></a>How to Return a 404</h3><p>Use a <strong>ResponseEntity</strong> return type, and set its <strong>status</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value=&quot;/with404/&#123;id&#125;&quot;, method=RequestMethod.GET)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResponseEntity&lt;Person&gt; <span class="hljs-title">getPersonByIdHandling404</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>Person personToReturn = people.get(id); <span class="hljs-keyword">if</span> (personToReturn ==<span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseEntity&lt;Person&gt;(HttpStatus.NOT_FOUND); <br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseEntity&lt;Person&gt;(personToReturn, HttpStatus.OK);<br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Spring-Java-Configuration"><a href="#Spring-Java-Configuration" class="headerlink" title="Spring Java Configuration"></a>Spring Java Configuration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@ComponentScan(basePackages=&quot;com....&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>The <strong>WebMvcConfigurerAdapter</strong> class provides methods that can be overridden to <strong>change specific Web settings such as resource folder locations</strong></p><h4 id="Override-the-addResourcesHandlers-method"><a href="#Override-the-addResourcesHandlers-method" class="headerlink" title="Override the addResourcesHandlers method"></a>Override the <code>addResourcesHandlers</code> method</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>registry.addResourceHandler(<span class="hljs-string">&quot;/static/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/static/&quot;</span>); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Loading-Config-Class"><a href="#Loading-Config-Class" class="headerlink" title="Loading Config Class"></a>Loading Config Class</h3><p><code>AbstractAnnotationConfigDispatcherServletInitializer</code></p><ul><li>Extend the abstract base class</li><li>Override some required methods</li><li>Specify servlet mapping and location of your app config</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;<br><span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123; <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Class[] &#123; AppConfig.class &#125;;<br>&#125;<br><span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123; <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>; <br>&#125; <br><span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[] &#123; <span class="hljs-string">&quot;/&quot;</span> &#125;; <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CORS-Configuration"><a href="#CORS-Configuration" class="headerlink" title="CORS Configuration"></a>CORS Configuration</h3><p><strong>Cross Origin Resource Sharing (CORS)</strong> allows you to configure whether web pages from sites other than your own can invoke your REST API</p><p>By default, browsers will prevent Web sites calling REST APIs on other servers unless the server specifically allows it</p><ul><li>Allow it is achieved by a header set on the server</li></ul><h4 id="Enabling-CORS-in-Spring"><a href="#Enabling-CORS-in-Spring" class="headerlink" title="Enabling CORS in Spring"></a>Enabling CORS in Spring</h4><p>Annotate the request methods for REST Controller - <strong><code>@CrossOrigin</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CrossOrigin</span> <br><span class="hljs-meta">@RestController</span><br></code></pre></td></tr></table></figure><h3 id="Open-API-Swagger"><a href="#Open-API-Swagger" class="headerlink" title="Open API/Swagger"></a>Open API/Swagger</h3><h4 id="Open-API"><a href="#Open-API" class="headerlink" title="Open API"></a>Open API</h4><p><strong>Open API</strong> is a Specification format for REST APIs. An OpenAPI file includes:</p><ul><li>Available Endpoints and operations to each endpoint.</li><li>Operation parameters for both input and output.</li><li>Authentication methods.</li><li>Contact information/license/terms of conditions.</li></ul><h4 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h4><p><strong>Swagger</strong> is a set of tools built around OpenAPI Specification.</p><ul><li><strong>Swagger UI</strong> - renders OpenAPI specs without having any implementation logic.</li><li><strong>Swagger Editor</strong> - browser-based editor where you can write OpenAPI specs.</li></ul><h4 id="Add-Dependency-and-Annotation"><a href="#Add-Dependency-and-Annotation" class="headerlink" title="Add Dependency and Annotation"></a>Add Dependency and Annotation</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="SwaggerConfig-File"><a href="#SwaggerConfig-File" class="headerlink" title="SwaggerConfig File"></a>SwaggerConfig File</h5><p>Enables <code>@EnablesSwagger2</code> in <code>SwaggerConfig.java</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-meta">@Profile(&quot;!test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">newsApi</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>                .groupName(<span class="hljs-string">&quot;compactdiscs&quot;</span>)<br>                .apiInfo(apiInfo()) <br>                <span class="hljs-comment">// 指定构建api文档的详细信息的方法为:apiInfo()</span><br>                .select()<br>                .paths(PathSelectors.any()) <br>                <span class="hljs-comment">// 根据urls设置需要加入文档的请求和需要忽略的请求</span><br>                .build();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>                .title(<span class="hljs-string">&quot;Album REST API with Swagger and SpringBoot&quot;</span>)<br>                .description(<span class="hljs-string">&quot;This API allows you to interact with albums. It is a CRUD API&quot;</span>)<br>                .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;FirstName LastName&quot;</span>, <span class="hljs-string">&quot;http://www.google.com&quot;</span>, <span class="hljs-string">&quot;xxx@gmail.com&quot;</span>))<br>                <span class="hljs-comment">//.version(&quot;2.0&quot;)</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Add-Annotations-to-AppConfig-java-and-Controllers"><a href="#Add-Annotations-to-AppConfig-java-and-Controllers" class="headerlink" title="Add Annotations to AppConfig.java and Controllers"></a>Add Annotations to AppConfig.java and Controllers</h5><p>Enables <strong><code>@Import(SwaggerConfig.class)</code></strong> in <code>AppConfig.java</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan</span><br><span class="hljs-meta">@Import(SwaggerConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppConfig</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(AppConfig.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>More annotations like <code>@ApiOperation</code> can be placed in the controller.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(value = &quot;findAll&quot;, nickname = &quot;findAll&quot;)</span><br><span class="hljs-meta">@GetMethod</span><br></code></pre></td></tr></table></figure><h5 id="Swagger-URL"><a href="#Swagger-URL" class="headerlink" title="Swagger URL"></a>Swagger URL</h5><p><a href="http://localhost:8080/swagger-ui.html#/">http://localhost:8080/swagger-ui.html#/</a></p>]]></content>
    
    
    <categories>
      
      <category>Training</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Training</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringREST</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - How JS Works Behind the Scenes</title>
    <link href="/2021/08/10/JavaScript%20-%20How%20JS%20Works%20Behind%20the%20Scenes/"/>
    <url>/2021/08/10/JavaScript%20-%20How%20JS%20Works%20Behind%20the%20Scenes/</url>
    
    <content type="html"><![CDATA[<h1 id="How-JS-Works-Behind-the-Scenes"><a href="#How-JS-Works-Behind-the-Scenes" class="headerlink" title="How JS Works Behind the Scenes"></a>How JS Works Behind the Scenes</h1><h2 id="A-High-Level-Overview-of-JS"><a href="#A-High-Level-Overview-of-JS" class="headerlink" title="A High Level Overview of JS"></a>A High Level Overview of JS</h2><h3 id="High-level"><a href="#High-level" class="headerlink" title="High-level"></a>High-level</h3><p>Low-level - developers have to manage the resources manually</p><p>High-level - all things happen automatically</p><h3 id="Garbage-collected"><a href="#Garbage-collected" class="headerlink" title="Garbage-collected"></a>Garbage-collected</h3><p>Cleaning the memory so we don’t have to do manually</p><h3 id="Interpreted-Just-in-time-Compiled"><a href="#Interpreted-Just-in-time-Compiled" class="headerlink" title="Interpreted / Just-in-time Compiled"></a>Interpreted / Just-in-time Compiled</h3><h3 id="Multi-paradigm"><a href="#Multi-paradigm" class="headerlink" title="Multi-paradigm"></a>Multi-paradigm</h3><p><strong>Paradigm -</strong> An approach and mindset of structuring code, which will direct your coding style and technique.</p><ul><li>Procedural Programming</li><li>Objected-oriented Programming</li><li>Functional Programming</li></ul><h3 id="Prototype-based-OO"><a href="#Prototype-based-OO" class="headerlink" title="Prototype-based OO"></a>Prototype-based OO</h3><p>Except for primitive types, everything in JS are objects. </p><h3 id="First-class-Functions"><a href="#First-class-Functions" class="headerlink" title="First-class Functions"></a>First-class Functions</h3><p>The functions are treated just as variables. </p><h3 id="Dynamic"><a href="#Dynamic" class="headerlink" title="Dynamic"></a>Dynamic</h3><p>No data type definitions. - Type becomes know at runtime.</p><p>JavaScript with Type - TypeScript</p><h3 id="Single-threaded"><a href="#Single-threaded" class="headerlink" title="Single-threaded"></a>Single-threaded</h3><h3 id="Non-blocking-Event-Loop"><a href="#Non-blocking-Event-Loop" class="headerlink" title="Non-blocking Event Loop"></a>Non-blocking Event Loop</h3><h2 id="The-JavaScript-Engine-and-Runtime"><a href="#The-JavaScript-Engine-and-Runtime" class="headerlink" title="The JavaScript Engine and Runtime"></a>The JavaScript Engine and Runtime</h2><h3 id="JavaScript-Engine"><a href="#JavaScript-Engine" class="headerlink" title="JavaScript Engine"></a>JavaScript Engine</h3><p>Program that executes the JavaScript Code. </p><p>For example: Google V8 / Node</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtcha3uhkej30h90e4q3i.jpg" alt="JS Engine"></p><h4 id="Call-Stack"><a href="#Call-Stack" class="headerlink" title="Call Stack"></a>Call Stack</h4><p>Execution context </p><h4 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h4><p>Object stored </p><h4 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h4><p>Entire code is converted into machine code at once and written to a binary file that can be executed by a computer.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtci9bpky5j30nt0320sz.jpg"></p><h4 id="Interpretation"><a href="#Interpretation" class="headerlink" title="Interpretation"></a>Interpretation</h4><p>Interpreter runs though the source code and executes it line by line.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtcia3f0qgj30lj0340su.jpg"></p><h4 id="Just-in-time-Compilation"><a href="#Just-in-time-Compilation" class="headerlink" title="Just-in-time Compilation"></a>Just-in-time Compilation</h4><p>Entire code is converted to machine code at once, and executed immediately. - <strong>No Portable File</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtcibn7recj30ls035aaa.jpg"></p><h4 id="Just-in-time-Compilation-Detail"><a href="#Just-in-time-Compilation-Detail" class="headerlink" title="Just-in-time Compilation Detail"></a>Just-in-time Compilation Detail</h4><blockquote><p>Modern JavaScript is no longer an interpreted language.</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtci4fjym2j30mk0f4mym.jpg"></p><ol><li><strong>Parsing -</strong> Parse the code into <strong>AST(Abstract Syntax Tree)</strong> - check if any <strong>syntax errors</strong></li><li><strong>Compilation -</strong> Compile the generated AST and compile it into machine code</li><li><strong>Execution -</strong> Machine code gets executed right away - where Just-in-time Happens in <strong>Call Stack</strong></li><li><strong>Optimization -</strong> the machine code is optimized and recompiled during running program execution - multiple times</li><li>All above happens in the special  threads inside the engine that are totally separate from the <strong>MAIN THREAD</strong> running in the <strong>Call Stack</strong> </li></ol><h3 id="JavaScript-Runtime"><a href="#JavaScript-Runtime" class="headerlink" title="JavaScript Runtime"></a>JavaScript Runtime</h3><h4 id="Runtime-in-the-Browser"><a href="#Runtime-in-the-Browser" class="headerlink" title="Runtime in the Browser"></a>Runtime in the Browser</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtcink153fj60t00esta702.jpg"></p><p>A big container including all the things that we need to use JavaScript </p><h5 id="WEB-APIs"><a href="#WEB-APIs" class="headerlink" title="WEB APIs"></a>WEB APIs</h5><p>Functionalities provided to the engine, accessible on window object. </p><p><strong>JS Engine</strong> always acts as the heart of the Runtime. </p><h5 id="CallBack-Queue"><a href="#CallBack-Queue" class="headerlink" title="CallBack Queue"></a>CallBack Queue</h5><p>Contains all the call back functions that are ready to be executed. </p><p><strong>Callback function(onClick) from DOM Event Listener</strong></p><ol><li>The call back function(onClick) is put into the call back queue</li><li>onClick is passed to the call stack - then be executed.</li><li><strong>Event Loop</strong> -&gt; Essential for non-blocking concurrency model.</li></ol><h4 id="Runtime-in-Node-js"><a href="#Runtime-in-Node-js" class="headerlink" title="Runtime in Node.js"></a>Runtime in Node.js</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtciomo2bzj30qg0ej75a.jpg"></p><p>No WEB APIs</p><h2 id="Execution-Context-and-Call-Stack"><a href="#Execution-Context-and-Call-Stack" class="headerlink" title="Execution Context and Call Stack"></a>Execution Context and Call Stack</h2><h2 id="Execution-Context"><a href="#Execution-Context" class="headerlink" title="Execution Context"></a>Execution Context</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtckjy96fuj30bc0f0dgu.jpg"></p><p><strong>Prerequisite:</strong> After compilation, ready for execution.</p><ul><li><strong>Global</strong> Execution Context is created - for top level code(The code that is <strong>NOT</strong> inside any function)</li><li>Function body will only be executed when called!</li><li>There is always only <strong>ONE Gobal</strong> Execution Context.</li></ul><blockquote><p><strong>Definition</strong> -<br>Execution Context is like an environment in which a piece of JavaScript Code is executed. It stores all the necessary information for some code to be executed.</p></blockquote><ul><li>Execution of the Top level Code inside the global EC - the CPU processing the machine code it received.</li><li>Execution of Functions and waiting for callbacks.</li></ul><blockquote><p>One execution context <strong>per function</strong>: for each function call, a new execution context is created.</p></blockquote><ul><li>All the ECs together make the call stack.</li><li>After all functions being executed, the engine keeps waiting the callback functions to arrive. </li></ul><p>For example - click event call back</p><h3 id="Execution-Context-in-Detail"><a href="#Execution-Context-in-Detail" class="headerlink" title="Execution Context in Detail"></a>Execution Context in Detail</h3><h4 id="What’s-inside"><a href="#What’s-inside" class="headerlink" title="What’s inside?"></a>What’s inside?</h4><ol><li><strong>Variable Environment</strong><ul><li><code>let</code>, <code>const</code>, <code>var</code> declarations</li><li>Functions</li><li>Arguments object</li></ul></li><li><strong>Scope Chain</strong> - Next Lecture</li><li><code>this</code> keyword - generated in a so-called “creation phase” right before execution</li></ol><p><strong>IMPORTANT:</strong> Execution Contexts that belong to <strong>Arrow Functions</strong> do not get their <strong><code>argument</code> object</strong>, nor do they get <strong><code>this</code> keyword</strong></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Training - JPA</title>
    <link href="/2021/08/09/Training%20JPA%20/"/>
    <url>/2021/08/09/Training%20JPA%20/</url>
    
    <content type="html"><![CDATA[<h1 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h1><h2 id="Introduction-to-JPA"><a href="#Introduction-to-JPA" class="headerlink" title="Introduction to JPA"></a>Introduction to JPA</h2><p><strong>JPA</strong> stands for <strong>JAVA PERSISTENCE API</strong>. </p><p>JPA is an object relational mapping API that makes it easier to </p><ul><li>Extract data from relational databases and put into objects</li><li>Extract data from objects and put into a relational database</li></ul><p>JPA is a <strong>standard</strong> </p><p>There are two commonly used ==implementations== </p><ul><li><strong>JBoss Hibernate</strong></li><li>Eclipse Link </li></ul><h3 id="Hierarchy"><a href="#Hierarchy" class="headerlink" title="Hierarchy"></a>Hierarchy</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtb2ygsu6mj311k0i4gnq.jpg"></p><p>When writing applications to access databases - use JDBC</p><p>Then use an ORM Implementation - Hibernate on the top of JDBC </p><p>Then use JPA API that sits on the top of the ORM implementation</p><h3 id="JPA-Entity-and-Mapping"><a href="#JPA-Entity-and-Mapping" class="headerlink" title="JPA Entity and Mapping"></a>JPA Entity and Mapping</h3><h2 id="Further-with-JPA"><a href="#Further-with-JPA" class="headerlink" title="Further with JPA"></a>Further with JPA</h2><blockquote><p><a href="https://docs.oracle.com/javaee/7/api/">APIs</a></p></blockquote><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p>The Persistence Unit is the entity class along with the persistence.xml file</p><p>The Persistence Context, which is a set of entity instances based upon the persistence unit </p><p>The Entity Manager which provides access to a persistence context</p><h3 id="Entity-Object-Lifecycle"><a href="#Entity-Object-Lifecycle" class="headerlink" title="Entity Object Lifecycle"></a>Entity Object Lifecycle</h3><p>Persistence - always related to Database </p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gtb5700r9nj31cm0u0n18.jpg"></p><ul><li><strong>New</strong> - New entities will be managed if persisted.</li><li><strong>Managed</strong> - This is the main state. Any changes made to these managed entities will automatically be saved into database.</li><li><strong>Detached</strong> </li><li><strong>Removed</strong> </li></ul><h3 id="JP-QL"><a href="#JP-QL" class="headerlink" title="JP-QL"></a>JP-QL</h3><p><strong>JP-QL</strong> stands for <strong>Java Persistence Query Language.</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e <span class="hljs-keyword">FROM</span> CompactDisc e <span class="hljs-keyword">WHERE</span> e.artist <span class="hljs-operator">=</span> ‘Abba’<br></code></pre></td></tr></table></figure><p><strong>Named</strong> Queries cached - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NamedQuery(name=”findAllCDs”, </span><br><span class="hljs-meta">query=”SELECT e FROM CompactDisc e”)</span> <br>Query query = em.createNamedQuery(“findAllCDs”);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Training</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hibernate</tag>
      
      <tag>Training</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - DOM and Events Fundamentals</title>
    <link href="/2021/08/06/DOM%20and%20Events%20Fundamentals%20/"/>
    <url>/2021/08/06/DOM%20and%20Events%20Fundamentals%20/</url>
    
    <content type="html"><![CDATA[<h1 id="DOM-and-Events-Fundamentals"><a href="#DOM-and-Events-Fundamentals" class="headerlink" title="DOM and Events Fundamentals"></a>DOM and Events Fundamentals</h1><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt7k354okej60ny0hrdh802.jpg"></p><h2 id="DOM-JS"><a href="#DOM-JS" class="headerlink" title="DOM !== JS"></a>DOM !== JS</h2><p>DOM Methods and Properties for DOM Manipulations <strong>ARE NOT PART OF</strong> JavaScript!</p><p>WEB APIs can <strong>INTERACT WITH</strong> JS!</p><h2 id="Guess-My-Number-Project"><a href="#Guess-My-Number-Project" class="headerlink" title="Guess My Number Project"></a>Guess My Number Project</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> number = <span class="hljs-built_in">Math</span>.trunc(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">20</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">// state variable</span><br><span class="hljs-keyword">let</span> score = <span class="hljs-number">20</span>; <span class="hljs-comment">// state variable</span><br><span class="hljs-keyword">let</span> highscore = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">const</span> displayMsg = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>) </span>&#123;<br>  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.message&#x27;</span>).textContent = msg;<br>&#125;;<br><br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.again&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  score = <span class="hljs-number">20</span>;<br>  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.score&#x27;</span>).textContent = score;<br>  displayMsg(<span class="hljs-string">&#x27;Start guessing...&#x27;</span>);<br>  number = <span class="hljs-built_in">Math</span>.trunc(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">20</span> + <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.number&#x27;</span>).textContent = <span class="hljs-string">&#x27;?&#x27;</span>;<br>  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.guess&#x27;</span>).value = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;body&#x27;</span>).style.backgroundColor = <span class="hljs-string">&#x27;#222&#x27;</span>;<br>  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.number&#x27;</span>).style.width = <span class="hljs-string">&#x27;15rem&#x27;</span>;<br>&#125;);<br><br><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.check&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> guess = <span class="hljs-built_in">Number</span>(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.guess&#x27;</span>).value);<br>  <span class="hljs-built_in">console</span>.log(guess);<br>  <span class="hljs-keyword">if</span> (!guess) &#123;<br>    displayMsg(<span class="hljs-string">&#x27;No Number! 🚫 &#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess === number) &#123;<br>    displayMsg(<span class="hljs-string">&#x27;Correct Number!!&#x27;</span>);<br>    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.number&#x27;</span>).textContent = number;<br>    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;body&#x27;</span>).style.backgroundColor = <span class="hljs-string">&#x27;#60b347&#x27;</span>;<br>    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.number&#x27;</span>).style.width = <span class="hljs-string">&#x27;30rem&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (score &gt; highscore) &#123;<br>      highscore = score;<br>      <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.highscore&#x27;</span>).textContent = highscore;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess !== number) &#123;<br>    <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.message&#x27;</span>).textContent =<br>        guess &gt; number ? <span class="hljs-string">&#x27;Your guess is larger!! &#x27;</span> : <span class="hljs-string">&#x27;Your guess is smaller!!&#x27;</span>;<br>      score--;<br>      <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;.score&#x27;</span>).textContent = score;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      displayMsg(<span class="hljs-string">&#x27; 💥 You are losing!!&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><h2 id="Modal-Project"><a href="#Modal-Project" class="headerlink" title="Modal Project"></a>Modal Project</h2><h3 id="Open-and-Close-Modal-Functions"><a href="#Open-and-Close-Modal-Functions" class="headerlink" title="Open and Close Modal Functions"></a>Open and Close Modal Functions</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> openModal = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Button Clicked!!&#x27;</span>);<br>  modal.classList.remove(<span class="hljs-string">&#x27;hidden&#x27;</span>); <span class="hljs-comment">// no dot for class name </span><br>  overlay.classList.remove(<span class="hljs-string">&#x27;hidden&#x27;</span>);<br>&#125;;<br><span class="hljs-keyword">const</span> closeModal = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  modal.classList.add(<span class="hljs-string">&#x27;hidden&#x27;</span>);<br>  overlay.classList.add(<span class="hljs-string">&#x27;hidden&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Handle-Key-Press-Events"><a href="#Handle-Key-Press-Events" class="headerlink" title="Handle Key Press Events"></a>Handle Key Press Events</h3><p>Hide the modal if <code>Esc</code> key is pressed. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (e.key === <span class="hljs-string">&#x27;Escape&#x27;</span> &amp;&amp; !modal.classList.contains(<span class="hljs-string">&#x27;hidden&#x27;</span>)) &#123;<br>    closeModal();<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Practice-Project-Pig-Game"><a href="#Practice-Project-Pig-Game" class="headerlink" title="Practice Project - Pig Game"></a>Practice Project - Pig Game</h3><h4 id="Flow-Chart"><a href="#Flow-Chart" class="headerlink" title="Flow Chart"></a>Flow Chart</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gta816mtk7j31120cbabb.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Fundamentals - Part 2</title>
    <link href="/2021/08/01/JavaScript%20Fundamentals%20-%20Part%202/"/>
    <url>/2021/08/01/JavaScript%20Fundamentals%20-%20Part%202/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Fundamentals-Part-2"><a href="#JavaScript-Fundamentals-Part-2" class="headerlink" title="JavaScript Fundamentals - Part 2"></a>JavaScript Fundamentals - Part 2</h1><h2 id="Activate-Strict-Mode"><a href="#Activate-Strict-Mode" class="headerlink" title="Activate Strict Mode"></a>Activate Strict Mode</h2><p>Strict mode creates <strong>visible errors</strong> in developer console, where in other situations without strict mode the code will fail silently. </p><h2 id="Function-Declaration-vs-Expression"><a href="#Function-Declaration-vs-Expression" class="headerlink" title="Function Declaration vs. Expression"></a>Function Declaration vs. Expression</h2><h3 id="Declaration"><a href="#Declaration" class="headerlink" title="Declaration"></a>Declaration</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span> (<span class="hljs-params">birthYear</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2021</span> - birthYear;<br>&#125;<br></code></pre></td></tr></table></figure><p>Can call the function before the it is defined.</p><h3 id="Expression"><a href="#Expression" class="headerlink" title="Expression"></a>Expression</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> f2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">birthYear</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2021</span> - birthYear;<br>&#125;<br></code></pre></td></tr></table></figure><p>Cannot access the function before it is defined. </p><h2 id="Arrow-Function"><a href="#Arrow-Function" class="headerlink" title="Arrow Function"></a>Arrow Function</h2><p>For simple one-line function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> f3 = <span class="hljs-function"><span class="hljs-params">birthYear</span> =&gt;</span> <span class="hljs-number">2021</span> - birthYear;<br></code></pre></td></tr></table></figure><p>For multi-line function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> yearRetire = <span class="hljs-function">(<span class="hljs-params">birthYear, firstName</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> age = <span class="hljs-number">2021</span> - birthYear;<br>    <span class="hljs-keyword">const</span> retire = <span class="hljs-number">65</span> - age;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;firstName&#125;</span> retires on <span class="hljs-subst">$&#123;retire&#125;</span> years`</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gt25fkghf2j60t60e1myv02.jpg" alt="Anatomy of A Function"></p><h2 id="Array-Operations"><a href="#Array-Operations" class="headerlink" title="Array Operations"></a>Array Operations</h2><h3 id="Unshift"><a href="#Unshift" class="headerlink" title="Unshift"></a>Unshift</h3><p><code>[&#39;Micheal&#39;, &#39;Steven&#39;]</code> —&gt; <code>[&#39;John&#39;, &#39;Micheal&#39;, &#39;Steven&#39;]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">friends.unshift(<span class="hljs-string">&#x27;John&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p><code>[&#39;Micheal&#39;, &#39;Steven&#39;]</code> —&gt; <code>[ &#39;Micheal&#39;, &#39;Steven&#39;, &#39;John&#39;]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> newLength = friends.push(<span class="hljs-string">&#x27;John&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Returns the length of the new Array.</p><h3 id="pop-amp-shift"><a href="#pop-amp-shift" class="headerlink" title="pop &amp; shift"></a>pop &amp; shift</h3><p><strong>pop</strong> - pop the last one<br><strong>shift</strong> - pop the first one</p><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>If exist - return the index<br>If not exist - return -1</p><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p><strong>Strict Mode!!</strong></p><p>return a boolean value whether the element exists in the array </p><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`jonas has <span class="hljs-subst">$&#123;jonas.friends.length&#125;</span> and his best friend is <span class="hljs-subst">$&#123;jonas.friends[<span class="hljs-number">0</span>]&#125;</span>`</span>)<br></code></pre></td></tr></table></figure><h3 id="Object-Methods"><a href="#Object-Methods" class="headerlink" title="Object Methods"></a>Object Methods</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> jonas = &#123;<br>    birthYear: <span class="hljs-number">1991</span>,<br>    friends: [<span class="hljs-string">&#x27;Micheal&#x27;</span>, <span class="hljs-string">&#x27;Peter&#x27;</span>, <span class="hljs-string">&#x27;Steven&#x27;</span>],<br>    calcAge: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2021</span> - <span class="hljs-built_in">this</span>.birthYear;<br>    &#125;<br>&#125;;<br><br><span class="hljs-built_in">console</span>.log(jonas.calcAge());<br><span class="hljs-comment">// this refers to the object that is calling the method</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript Fundamentals - Part 1</title>
    <link href="/2021/07/27/JavaScript%20Fundamentals%20-%20Part%201%20/"/>
    <url>/2021/07/27/JavaScript%20Fundamentals%20-%20Part%201%20/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-Fundamentals-Part-1"><a href="#JavaScript-Fundamentals-Part-1" class="headerlink" title="JavaScript Fundamentals - Part 1"></a>JavaScript Fundamentals - Part 1</h1><h2 id="let-var-amp-const"><a href="#let-var-amp-const" class="headerlink" title="let, var &amp; const"></a>let, var &amp; const</h2><ul><li><code>let</code> - block scoped</li><li><code>var</code> - function scoped </li></ul><h2 id="Strings-and-Template-Literals"><a href="#Strings-and-Template-Literals" class="headerlink" title="Strings and Template Literals"></a>Strings and Template Literals</h2><p>Use back-ticks always </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> str = <span class="hljs-string">`I am <span class="hljs-subst">$&#123;firstName&#125;</span>`</span>;<br></code></pre></td></tr></table></figure><h2 id="Types-Conversion-and-Coercion"><a href="#Types-Conversion-and-Coercion" class="headerlink" title="Types Conversion and Coercion"></a>Types Conversion and Coercion</h2><h3 id="Conversion"><a href="#Conversion" class="headerlink" title="Conversion"></a>Conversion</h3><p>Explicitly </p><h3 id="Coercion"><a href="#Coercion" class="headerlink" title="Coercion"></a>Coercion</h3><p>Implicitly </p><h2 id="Falsy-and-Truthy-Values"><a href="#Falsy-and-Truthy-Values" class="headerlink" title="Falsy and Truthy Values"></a>Falsy and Truthy Values</h2><ul><li>0</li><li><code>undefined</code></li><li><code>&#39;&#39;</code> empty string </li></ul><h2 id="Equality-Operator-“-“-vs-“-”"><a href="#Equality-Operator-“-“-vs-“-”" class="headerlink" title="Equality Operator “==“ vs “===”"></a>Equality Operator “==“ vs “===”</h2><h3 id="Strict-Equality"><a href="#Strict-Equality" class="headerlink" title="Strict Equality"></a>Strict Equality</h3><p><code>===</code> does <strong>NOT</strong> perform <strong>Type Coercion.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">&gt; &#39;18&#39; &#x3D;&#x3D;&#x3D; 18<br>&gt; false<br></code></pre></td></tr></table></figure><h3 id="Loose-Equality"><a href="#Loose-Equality" class="headerlink" title="Loose Equality"></a>Loose Equality</h3><p><code>==</code> does <strong>Type Coercion.</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">&gt; &#39;18&#39; &#x3D;&#x3D; 18<br>&gt; true<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/2021/02/22/SpringBoot/"/>
    <url>/2021/02/22/SpringBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Initializer"><a href="#Spring-Initializer" class="headerlink" title="Spring Initializer"></a>Spring Initializer</h1><p>Enter <a href="https://start.spring.io/">Spring Initializer</a> and generate a new SpringBoot Project. </p><p>Import project into IDE.</p><h2 id="SpringBoot-Solution"><a href="#SpringBoot-Solution" class="headerlink" title="SpringBoot Solution"></a>SpringBoot Solution</h2><ol><li><p>Make it easier to get started with Spring development</p></li><li><p>Minimize the amount of manual configuration</p><ul><li>Perform auto-configuration based on props file and JAR classpath.</li></ul></li><li><p>Help to resolve the dependency conflicts (Maven or Gradle)</p></li><li><p>Provide an embedded HTTP server so you can get started quickly</p><ul><li>Tomcat, Jetty, Undertow…</li></ul></li></ol><h2 id="SpringBoot-Project-Structure"><a href="#SpringBoot-Project-Structure" class="headerlink" title="SpringBoot Project Structure"></a>SpringBoot Project Structure</h2><h3 id="Maven-Wrapper-Files"><a href="#Maven-Wrapper-Files" class="headerlink" title="Maven Wrapper Files"></a>Maven Wrapper Files</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnr4tjyp22j30kc0ocq50.jpg"></p><p><strong>mvnw</strong> allows you to run a Maven Project.</p><ul><li>No need to have maven installed or present on your path.</li><li>If correct version of Maven is NOT found on your computer, it will <strong>Automatically</strong> downloads correct version.</li></ul><p>Two files are provided.</p><ul><li><strong>mvnw.cmd</strong> is for Windows - <code>mvnw clean compile test</code></li><li><strong>mvnw</strong> is for Linux/Mac - <code>./mvnw clean compile test</code></li></ul><h3 id="Maven-POM-File"><a href="#Maven-POM-File" class="headerlink" title="Maven POM File"></a>Maven POM File</h3><p><strong>Spring Boot Maven plugin</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>To package a executable JAR file or create a <strong>war archive file.</strong> </p><p>You can also run the app like this:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ ./mvnw <span class="hljs-keyword">package</span><br>$ ./mvnw spring-boot:run<br></code></pre></td></tr></table></figure><h3 id="Java-Source-Code"><a href="#Java-Source-Code" class="headerlink" title="Java Source Code"></a>Java Source Code</h3><p><strong>MycoolappApplication.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.luv2code.springboot.demo.mycoolapp;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MycoolappApplication</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>SpringApplication.run(MycoolappApplication.class, args);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h4><p>It enables </p><ul><li> Auto configuration</li><li>Component scanning</li><li>Additional Configuration</li></ul><p>Composed of the following annotations:</p><ul><li><code>@EnableAutoConfiguration</code>  - Enable Spring Boot auto-configuration support</li><li> <code>@ComponentScan</code>  - Enables component scanning of current package, also recursively scans sub-packages</li><li> <code>@Configuration</code> - Able to register extra beans with <code>@Bean</code> or import other configuration classes </li></ul><h4 id="SpringApplication-Class"><a href="#SpringApplication-Class" class="headerlink" title="SpringApplication Class"></a>SpringApplication Class</h4><ul><li>Creates application context and register all beans.</li><li>Starts the embedded server Tomcat etc…</li></ul><h3 id="More-on-Component-Scan"><a href="#More-on-Component-Scan" class="headerlink" title="More on Component Scan"></a>More on Component Scan</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication(</span><br><span class="hljs-meta">scanBasePackage=&#123;&quot;com.luv2code.springboot.demo.mycoolapp&quot;,</span><br><span class="hljs-meta">                   &quot;org.acme.iot.utils&quot;,</span><br><span class="hljs-meta">                  &quot;edu.cmu.wean&quot;&#125;)</span><br></code></pre></td></tr></table></figure><p>You need to explicitly list the base packages to scan, if you got other packages.</p><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnr5ff1qmaj30iu05wt95.jpg"></p><h4 id="Application-Properties"><a href="#Application-Properties" class="headerlink" title="Application Properties"></a>Application Properties</h4><p>You can add Spring Boot properties.<br><code>server.port=8585</code></p><p>You can add your own custom properties.</p><p><code>coach.name=Mickey</code></p><h5 id="Read-Data-from-the-properties-File"><a href="#Read-Data-from-the-properties-File" class="headerlink" title="Read Data from the properties File"></a>Read Data from the properties File</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FunRestController</span></span>&#123;<br>  <span class="hljs-meta">@Value(&quot;$&#123;coach.name&#125;&quot;)</span><br>  <span class="hljs-keyword">private</span> String coachName;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Static-Content"><a href="#Static-Content" class="headerlink" title="Static Content"></a>Static Content</h4><p>Examples of static resources HTML, css, JavaScript, Images, etc…</p><p class="note note-warning">  <p>    Do not use the /src/main/webapp directory if your application is packaged as a JAR.</p><p>   Although it is a standard Maven Directory, it works only with WAR packaging.</p> <p>   It is sliently ignored by most build tools if you generate a JAR.</p></p><h4 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h4><p>SpringBoot includes auto-configurations for the following template engines.</p><ul><li>FreeMarker</li><li>Thymeleaf</li><li>Mustache</li></ul><h2 id="SpringBoot-Starters"><a href="#SpringBoot-Starters" class="headerlink" title="SpringBoot Starters"></a>SpringBoot Starters</h2><p>A  curated list of Maven Dependencies.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnr6hmx303j31mi0mwkjl.jpg"></p><h3 id="What-is-in-the-Starter"><a href="#What-is-in-the-Starter" class="headerlink" title="What is in the Starter?"></a>What is in the Starter?</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnr6jk7o1cj31320ogq7u.jpg"></p><h2 id="Starter-Parent"><a href="#Starter-Parent" class="headerlink" title="Starter Parent"></a>Starter Parent</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.0-M1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>For the Spring Boot Starters, no need for version.</p><p>Basically, only specify the version of <strong>Spring Boot Parent.</strong></p><p>Then for the actual dependencies, simply inherit version from Starter Parent.</p><p>No need to list individual versions, great for maintenance and make sure all the dependencies are compatible.</p><h3 id="Benefits-of-SpringBoot-Starter-Parent"><a href="#Benefits-of-SpringBoot-Starter-Parent" class="headerlink" title="Benefits of SpringBoot Starter Parent"></a>Benefits of SpringBoot Starter Parent</h3><ul><li><p>Default Maven configuration: Java version, UTF-encoding etc…</p></li><li><p>Dependency management</p><ul><li>User version on parent only</li></ul></li><li><p>Default configuration of Boot plugin</p></li></ul><h2 id="Spring-Boot-Actuator"><a href="#Spring-Boot-Actuator" class="headerlink" title="Spring Boot Actuator"></a>Spring Boot Actuator</h2><p>Exposes endpoints to monitor and manage your application.</p><p>Get DevOps functionality out-of-box.</p><p>Simply add the dependency to your POM file.</p><p>REST endpoints are automatically added to your application.</p><ul><li><code>/health</code>  - Health information about your application</li><li><code>/info</code> - Information about your project</li></ul><p>By default, only <code>health</code> and <code>info</code> are exposed.</p><h3 id="Applying-Security"><a href="#Applying-Security" class="headerlink" title="Applying Security"></a>Applying Security</h3><p><strong>Add Dependency</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Add Properties in the application.properties file</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">info.app.name</span>=<span class="hljs-string">My Super Cool App</span><br><span class="hljs-meta">info.app.version</span>=<span class="hljs-string">1.0.0</span><br><span class="hljs-meta">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-meta">spring.security.user.name</span>=<span class="hljs-string">d</span><br><span class="hljs-meta">spring.security.user.password</span>=<span class="hljs-string">d</span><br><span class="hljs-comment">#management.endpoints.web.exposure.exclude=health,info</span><br></code></pre></td></tr></table></figure><h2 id="Running-from-the-Command-Line"><a href="#Running-from-the-Command-Line" class="headerlink" title="Running from the Command Line"></a>Running from the Command Line</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&gt; .&#x2F;mvnw package<br>&gt; cd target<br>&gt; java -jar jarname.jar<br></code></pre></td></tr></table></figure><p>OR</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">&gt; ./mvnw spring-boot:<span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><h1 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h1><p><strong>Java Persistence API - JPA</strong></p><ul><li>Only a specification</li><li>Defines a set of interfaces</li><li>Requires an implementation to be usable</li></ul><h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h2><p>You are not locked to vendor’s implmentation.</p><p>Maintain portable, flexible code by coding to JPA spec(interface).</p><h1 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h1><h2 id="JPA-Repository"><a href="#JPA-Repository" class="headerlink" title="JPA Repository"></a>JPA Repository</h2><p>Spring Data JPA provides the interface: <strong>JpaRepository</strong></p><ul><li>findAll()</li><li>findById()</li><li>Save()</li><li>deleteById()</li><li>…</li></ul><h2 id="Create-a-JPA-Repository-Interface"><a href="#Create-a-JPA-Repository-Interface" class="headerlink" title="Create a JPA Repository Interface"></a>Create a JPA Repository Interface</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.luv2code.springboot.curddemo.entity.Employee;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">Employee</span>,<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Then you can use the CRUD operations of the interface for free.</p><h1 id="Spring-Data-REST"><a href="#Spring-Data-REST" class="headerlink" title="Spring Data REST"></a>Spring Data REST</h1><p>Create the REST API using the existing JPA repository. </p><p>Add new dependency to the<code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-rest<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><blockquote><p>2021-02-17 10:52:52.396 ERROR 27449 — [ main] o.s.b.d.LoggingFailureAnalysisReporter :</p><p><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>* APPLICATION FAILED TO START *</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong> </p><p>Description: Web server failed to start. Port 8080 was already in use. </p><p>Action: Identify and stop the process that’s listening on port 8080 or configure this application to listen on another port.</p></blockquote><h2 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h2><p><code>lsof -i:8080</code> check the process using port 8080.</p><p><code>kill pid</code> kill the process of the id.</p><h2 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnr4iw47d8j31bn0u0454.jpg"></p><p>Do not allow parallel run, otherwise there will be more than one instance running on the same server port. </p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring REST</title>
    <link href="/2021/02/17/Spring-REST/"/>
    <url>/2021/02/17/Spring-REST/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-JSON-Data-Binding"><a href="#Java-JSON-Data-Binding" class="headerlink" title="Java JSON Data Binding"></a>Java JSON Data Binding</h1><p>Data binding is the process of converting the JSON data to a Java POJO.</p><p><strong>Also known as:</strong> Mapping, Serialization/Deserialization</p><h2 id="Jackson-Data-Binding"><a href="#Jackson-Data-Binding" class="headerlink" title="Jackson Data Binding"></a>Jackson Data Binding</h2><p>Spring uses the <strong>Jackson Project</strong> behind the scenes.</p><p>Jacksong supports XML and JSON.</p><p>By Default, Jackson will call appropriate getter/setter methods.</p><h2 id="JSON-to-Java-POJO"><a href="#JSON-to-Java-POJO" class="headerlink" title="JSON to Java POJO"></a>JSON to Java POJO</h2><p>Jackson will call <code>setXXX()</code> methods</p><h2 id="Java-POJO-to-JSON"><a href="#Java-POJO-to-JSON" class="headerlink" title="Java POJO to JSON"></a>Java POJO to JSON</h2><p>Jackson will call <code>getXXX()</code> methods</p><h2 id="Spring-and-Jackson-Support"><a href="#Spring-and-Jackson-Support" class="headerlink" title="Spring and Jackson Support"></a>Spring and Jackson Support</h2><p>Spring will automatically handle Jackson Integration.</p><p>JSON data being passed to REST Controller is converted to POJO.</p><p>Java Object being returned from REST controller is converted to JSON.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// create the object mapper</span><br>            ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>            <span class="hljs-comment">// read JSON file and map/convert to Java POJO</span><br>            <span class="hljs-comment">// data/sample-lite.json</span><br>            Student theStudent = mapper.readValue(<br>                    <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;data/sample-full.json&quot;</span>), Student.class);<br>            <span class="hljs-comment">//print the first name and last name</span><br>            System.out.println(<span class="hljs-string">&quot;First Name:&quot;</span>+theStudent.getFirstName());<br>            Address address = theStudent.getAddress();<br>            System.out.println(<span class="hljs-string">&quot;Street: &quot;</span>+address.getStreet());<br>            <span class="hljs-keyword">for</span>(String lan: theStudent.getLanguages())&#123;<br>                System.out.println(lan);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Ignore-Unknown-Properties"><a href="#Ignore-Unknown-Properties" class="headerlink" title="Ignore Unknown Properties"></a>Ignore Unknown Properties</h2><p>Add a new annotation: <code>@JsonIgnoreProperties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonIgnoreProperties(ignoreUnknown = true)</span><br></code></pre></td></tr></table></figure><h1 id="REST-HTTP"><a href="#REST-HTTP" class="headerlink" title="REST HTTP"></a>REST HTTP</h1><h2 id="HTTP-Request-Message"><a href="#HTTP-Request-Message" class="headerlink" title="HTTP Request Message"></a>HTTP Request Message</h2><ul><li>Request Line: the HTTP command</li><li>Header Variables: Request Metadata</li><li>Message Body: contents of Message</li></ul><h2 id="HTTP-Response-Message"><a href="#HTTP-Response-Message" class="headerlink" title="HTTP Response Message"></a>HTTP Response Message</h2><ul><li>Request Line: server protocol and status code</li><li>Header Variables: Response Metadata</li><li>Message Body: contents of Message</li></ul><h3 id="Status-Code"><a href="#Status-Code" class="headerlink" title="Status Code"></a>Status Code</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gni0521u63j312o0goanv.jpg"></p><h3 id="MINE-Content-Types"><a href="#MINE-Content-Types" class="headerlink" title="MINE Content Types"></a>MINE Content Types</h3><p><strong>MINE</strong> - <strong>M</strong>ultipurpose <strong>I</strong>nternet <strong>M</strong>ail <strong>E</strong>xtenstion</p><p>Basic Syntax: <code>type/sub-type</code></p><p><strong>Examples:</strong></p><ul><li><code>text/html</code>, <code>text/plain</code></li><li><code>application/json</code>, <code>application/xml</code></li></ul><h2 id="Client-Tool"><a href="#Client-Tool" class="headerlink" title="Client  Tool"></a>Client  Tool</h2><p>send HTTP requests - Postman</p><h1 id="Spring-REST-Controller"><a href="#Spring-REST-Controller" class="headerlink" title="Spring REST Controller"></a>Spring REST Controller</h1><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><ul><li>Extension of <code>@Controller</code></li><li>Handles REST request and responses</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoRestController</span> </span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">helloWorld</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> Config Spring MVC just like previous. Then change <code>@Controller</code> to <code>@RestController</code></p><h2 id="Retrieve-JSON-from-POJO"><a href="#Retrieve-JSON-from-POJO" class="headerlink" title="Retrieve JSON from POJO"></a>Retrieve JSON from POJO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentRestController</span> </span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/students&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">getStudent</span><span class="hljs-params">()</span></span>&#123;<br>        List&lt;Student&gt; students = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        students.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Ashley&quot;</span>, <span class="hljs-string">&quot;Ma&quot;</span>));<br>        students.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Machine&quot;</span>, <span class="hljs-string">&quot;Ma&quot;</span>));<br>        <span class="hljs-keyword">return</span> students;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gni31l4dotj31ku0u07wj.jpg"></p><p><strong>Note:</strong> Jackson will automatically handle all the low-level operations to convert the POJO to JSON format objects and display in the Response Body.</p><h2 id="Use-PathVariable-for-REST-Endpoints"><a href="#Use-PathVariable-for-REST-Endpoints" class="headerlink" title="Use @PathVariable for REST Endpoints"></a>Use @PathVariable for REST Endpoints</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/students/&#123;studentId&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">getStudent</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> studentId)</span></span>&#123;<br>  <span class="hljs-keyword">return</span> students.get(studentId);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResponseEntity&lt;StudentErrorResponse&gt; <span class="hljs-title">handleException</span><span class="hljs-params">(Exception exc)</span></span>&#123;<br>  StudentErrorResponse err = <span class="hljs-keyword">new</span> StudentErrorResponse();<br>  err.setMessage(exc.getMessage());<br>  err.setStatus(HttpStatus.BAD_REQUEST.value());<br>  err.setTimeStamp(System.currentTimeMillis());<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseEntity&lt;&gt;(err, HttpStatus.BAD_REQUEST); <span class="hljs-comment">// err is the body and 404 is status code</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringREST</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AOP:Aspect-Oriented-Programming Overview</title>
    <link href="/2021/02/08/AOP-Aspect-Oriented-Programming-Overview/"/>
    <url>/2021/02/08/AOP-Aspect-Oriented-Programming-Overview/</url>
    
    <content type="html"><![CDATA[<h1 id="AOP-Overview"><a href="#AOP-Overview" class="headerlink" title="AOP Overview"></a>AOP Overview</h1><p>AOP, at its core, lets you implement individual concerns in a <strong>loosely coupled</strong> fashion, and combine these implementations to form the final system. Indeed, AOP creates systems using loosely coupled, modularized implementations of <strong><em>crosscutting</em></strong> <strong>concerns</strong>. OOP, in contrast, creates systems using loosely coupled, modularized implementations of <strong><em>common</em></strong> <strong>concerns</strong>. </p><h2 id="AOP-Development-Steps"><a href="#AOP-Development-Steps" class="headerlink" title="AOP Development Steps"></a>AOP Development Steps</h2><h3 id="Aspectual-Decomposition"><a href="#Aspectual-Decomposition" class="headerlink" title="Aspectual Decomposition"></a>Aspectual Decomposition</h3><p>Identify <strong>Cross-cutting Concerns</strong> from common concerns. </p><p>There are two kinds of concerns: module-level concerns and crosscutting system-level concerns.</p><p>For example, in a credit card payment system, there should be three modules:</p><ul><li>Core Credit Card Payment Process - Module level</li><li>Logging Module - Crosscutting</li><li>Authentication - Crosscutting</li></ul><h3 id="Concern-Implementation"><a href="#Concern-Implementation" class="headerlink" title="Concern Implementation"></a>Concern Implementation</h3><p>In this step, you should implement each concern seperately.</p><h3 id="Aspectual-Recomposition"><a href="#Aspectual-Recomposition" class="headerlink" title="Aspectual Recomposition"></a>Aspectual Recomposition</h3><p>You need an aspect integrator to specify recomposition rules by creating <strong>aspects</strong>. The recomposition is known as <strong>weaving or integrating.</strong> This infomation is used to integrate the modules of the final system.</p><h2 id="Terms-in-AOP"><a href="#Terms-in-AOP" class="headerlink" title="Terms in AOP"></a>Terms in AOP</h2><h3 id="Cross-Cutting-Concerns"><a href="#Cross-Cutting-Concerns" class="headerlink" title="Cross-Cutting Concerns"></a>Cross-Cutting Concerns</h3><p class="note note-warning">  Concerns = Functionality = Logic</p><p>Example: Loggin Concern. It always crosscuts every module in the system level. In other words, it should be applied to every module that needs loggin function. </p><p>Meanwhile, the normal concern’s implementation remains unware that other <strong>crosscutting concerns</strong> logging is <strong>“aspecting”</strong> it. For exanmple, the credit card processing module doesn’t know that other concerns are logging or authenticating its operations. The <strong>crosscutting concerns</strong> are like <strong>a proxy</strong> or some good spies that are monitoring on the operations and maintaining security of the entire system.</p><h3 id="Proxy-Design-Pattern"><a href="#Proxy-Design-Pattern" class="headerlink" title="Proxy Design Pattern"></a>Proxy Design Pattern</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn33uh88vqj31jw0h4qt1.jpg"></p><p>通过代理，控制对对象的访问。</p><p><strong>定义一个抽象角色，让代理角色和真实角色分别去实现它。</strong></p><ul><li>真实角色 - <code>implements AbstractRole</code> 定义真正的业务逻辑，供代理角色使用。</li><li>代理角色 - <code>implements AbstractRole</code> 通过真实角色的业务逻辑来实现抽象方法，并在抽象方法前后附加自己的代理操作。</li></ul><p>Spring AOP 采用<strong>JDK动态代理和CGLIB动态代理。</strong></p><p>如果目标对象实现了接口，默认情况下会采用 JDK 的动态代理实现 AOP；如果目标对象没有实现了接口，则采用 CGLIB 库，Spring 会自动在 JDK 动态代理和 CGLIB 动态代理之间转换。</p><h3 id="Weaving"><a href="#Weaving" class="headerlink" title="Weaving"></a>Weaving</h3><p>The weaver assembles an individual concerns in the process of <strong>weaving.</strong></p><p>In other words, the weaver interlaces different fragments based on some rules - <strong>weaving rules</strong> - applied to it.</p><h4 id="Compile-time"><a href="#Compile-time" class="headerlink" title="Compile-time"></a>Compile-time</h4><p>AspectJ is based on <strong>Bytecode Manipulation.</strong></p><h4 id="Load-time"><a href="#Load-time" class="headerlink" title="Load-time"></a>Load-time</h4><p>AspectJ</p><h4 id="Run-time"><a href="#Run-time" class="headerlink" title="Run-time"></a>Run-time</h4><p><strong>Slowest.</strong></p><p>Spring AOP - minor performance cost for aspect execution because of run-time weaving. It is based on <strong>Proxying.</strong></p><h3 id="Aspects"><a href="#Aspects" class="headerlink" title="Aspects"></a>Aspects</h3><p>Module of code for cross-cutting concerns. (Eg. logging, transaction, security, …)</p><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><p>What action is taken and when it should be applied. </p><p>Advice defines pieces of an aspect implementation to be executed at pointcuts</p><h4 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h4><p>run before the method</p><h4 id="After-finally"><a href="#After-finally" class="headerlink" title="After finally"></a>After finally</h4><p>run after the method - just like the <strong>Finally</strong> in try-catch block.</p><h4 id="After-returning"><a href="#After-returning" class="headerlink" title="After returning"></a>After returning</h4><p>run after the method’s successful execution  </p><h4 id="After-throwing"><a href="#After-throwing" class="headerlink" title="After throwing"></a>After throwing</h4><p>run after the method throws an exception.</p><h4 id="Around"><a href="#Around" class="headerlink" title="Around"></a>Around</h4><p>run before and after the method. </p><h3 id="Join-Points"><a href="#Join-Points" class="headerlink" title="Join Points"></a>Join Points</h3><p>Join points define specific <strong>points</strong> in a <strong>program’s execution</strong>.</p><p>It refers when to apply the code during the whole execution.</p><h3 id="Point-Cuts"><a href="#Point-Cuts" class="headerlink" title="Point Cuts"></a>Point Cuts</h3><p>A pointcut is the <strong>language construct</strong> that specifies join points.</p><p>A predicate expression for where the advice should be applied.</p><h2 id="Benefits-of-AOP"><a href="#Benefits-of-AOP" class="headerlink" title="Benefits of AOP"></a>Benefits of AOP</h2><p>AOP helps overcome the aforementioned problems caused by code tangling and code scattering. </p><ol><li><strong>Modularized implementation of crosscutting concerns.</strong> - Code of Aspects is defined in a single class. AOP minimizes coupling and addresses <strong>cross-cutting concerns</strong> seperately. In general, it represents a higher reused of the Aspect code.</li><li><strong>Easier-to-evolve systems</strong> - Easier to add new aspect because the aspected modules are unaware of crosscutting concerns. And when you add a new  functionality, the existinig aspects will also crosscut it. </li></ol><h1 id="Advice-Type"><a href="#Advice-Type" class="headerlink" title="Advice Type"></a>Advice Type</h1><h2 id="Before-Advice-Type"><a href="#Before-Advice-Type" class="headerlink" title="@Before Advice Type"></a>@Before Advice Type</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn414twcn9j31hi0pee81.jpg"></p><ol><li><p>Create a Target Object:  <strong>AccountDAO.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addAccount</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(getClass() + <span class="hljs-string">&quot; : DOING MY DB WORK : ADDING ACCOUNT&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Create a spring Java Config class - Pure Java Code</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span><br><span class="hljs-meta">@ComponentScan(&quot;com.luv2code.aopdemo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoConfig</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Create main APP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainDemoApp</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// read spring config java class</span><br>        AnnotationConfigApplicationContext context =<br>                <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(DemoConfig.class);<br>        <span class="hljs-comment">// get the bean from the bean factory</span><br>        AccountDAO theAccountDAO = context.getBean(<span class="hljs-string">&quot;accountDAO&quot;</span>, AccountDAO.class);<br>        <span class="hljs-comment">// call the business method in the component</span><br>        theAccountDAO.addAccount();<br>       <span class="hljs-comment">// close the spring context</span><br>        context.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Create an Aspect with <code>@Before</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDemoLoggingAspect</span> </span>&#123;<br>    <span class="hljs-comment">// this is where we add all the related advices for logging</span><br>    <span class="hljs-comment">// @Before advice</span><br>    <span class="hljs-meta">@Before(&quot;execution(public void addAccount())&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeAddAccountAdvice</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;\n =====&gt;&gt;&gt; Executing @Before advice on addAccount() method!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AfterReturning-Advice-Type"><a href="#AfterReturning-Advice-Type" class="headerlink" title="@AfterReturning Advice Type"></a>@AfterReturning Advice Type</h2></li></ol><p>Successful Execution(No Exception).</p><h3 id="Add-new-method-in-AccountDAO"><a href="#Add-new-method-in-AccountDAO" class="headerlink" title="Add new method in AccountDAO"></a>Add new method in AccountDAO</h3><p>Add new Method called <code>findAccounts()</code> in <code>AccountDAO</code>.</p><h3 id="Update-Main-app"><a href="#Update-Main-app" class="headerlink" title="Update Main app"></a>Update Main app</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">AccountDAO theAccountDAO = context.getBean(<span class="hljs-string">&quot;accountDAO&quot;</span>, AccountDAO.class);<br>List&lt;Account&gt; theAccounts = theAccountDAO.findAccounts();<br>System.out.println(<span class="hljs-string">&quot;\n\nMain Program: AfterReturningDemoApp:\n---------&quot;</span>);<br>System.out.println(theAccounts);<br></code></pre></td></tr></table></figure><h3 id="Add-AfterReturning-Advice"><a href="#Add-AfterReturning-Advice" class="headerlink" title="Add @AfterReturning Advice"></a>Add @AfterReturning Advice</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(</span><br><span class="hljs-meta">  pointcut = &quot;execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))&quot;,</span><br><span class="hljs-meta">  returning = &quot;result&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturnFindAccountsAdvice</span><span class="hljs-params">(JoinPoint joinPoint, List&lt;Account&gt; result)</span></span>&#123;<br>  <span class="hljs-comment">// print which method we are advising on</span><br>  String method = joinPoint.getSignature().toShortString();<br>  System.out.println(<span class="hljs-string">&quot;\n=======&gt;&gt;&gt; Executing @AfterReturning on method: &quot;</span> + method);<br>  <span class="hljs-comment">// print out the results of the method call</span><br>  System.out.println(<span class="hljs-string">&quot;=======&gt;&gt;&gt; Result is: &quot;</span> +result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Use-Case-Post-processing-Data"><a href="#Use-Case-Post-processing-Data" class="headerlink" title="Use Case - Post-processing Data"></a>Use Case - Post-processing Data</h3><ul><li>Post-processing the data before returning to the caller </li><li>Format the data or enrich the data.</li></ul><p>**Be careful when you modify the data! **</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn8mw1gldsj313a0jw1kx.jpg"></p><p><strong>Convert every first name to Upper Case</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(</span><br><span class="hljs-meta">  pointcut = &quot;execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))&quot;,</span><br><span class="hljs-meta">  returning = &quot;result&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturnFindAccountsAdvice</span><span class="hljs-params">(JoinPoint joinPoint, List&lt;Account&gt; result)</span></span>&#123;<br>  System.out.println(<span class="hljs-string">&quot;\n=======&gt;&gt;&gt; The result is: &quot;</span>+result);<br>  convertAccountNamesToUpperCase(result);<br>  System.out.println((<span class="hljs-string">&quot;\n======&gt;&gt;&gt; The result is: &quot;</span>+result));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">convertAccountNamesToUpperCase</span><span class="hljs-params">(List&lt;Account&gt; result)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span>(Account account : result)<br>    account.setName(account.getName().toUpperCase());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AfterThrowing-Advice-Type"><a href="#AfterThrowing-Advice-Type" class="headerlink" title="@AfterThrowing Advice Type"></a>@AfterThrowing Advice Type</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn8op47kxvj31qd0u04qp.jpg"></p><h3 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h3><ul><li>Log the exception</li><li>Perform auditing on the exception</li><li>Notify DevOps team via email or SMS</li><li>Encapsulate this functionality in AOP aspect for easy reuse</li></ul><h3 id="Modify-Main-App"><a href="#Modify-Main-App" class="headerlink" title="Modify Main App"></a>Modify Main App</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>            theAccounts = theAccountDAO.findAccounts(<span class="hljs-keyword">true</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception exc)&#123;<br>            System.out.println(<span class="hljs-string">&quot;\n\n Main Program... Catch Exception:&quot;</span> + exc);<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="Add-AfterThrowing-Advice"><a href="#Add-AfterThrowing-Advice" class="headerlink" title="Add @AfterThrowing Advice"></a>Add @AfterThrowing Advice</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(</span><br><span class="hljs-meta">            value = &quot;execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))&quot;,</span><br><span class="hljs-meta">            throwing = &quot;theExc&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowingFindAccountAdvice</span><span class="hljs-params">(JoinPoint joinPoint, Throwable theExc)</span></span>&#123;<br>        String methodName = joinPoint.getSignature().toShortString();<br>        System.out.println(<span class="hljs-string">&quot;Executing @AfterThrowing advice...&quot;</span> + methodName);<br>        System.out.println(<span class="hljs-string">&quot;\n======&gt;&gt;&gt; The exception is:&quot;</span>+ theExc);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> Make sure the parameter name <code>theExc</code> and the throwing value name are matched.</p><h2 id="After-Advice-Type"><a href="#After-Advice-Type" class="headerlink" title="@After Advice Type"></a>@After Advice Type</h2><p><strong>@After will run for success or failure(finally).</strong></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn8rqqkoiwj31ot0u0kjl.jpg"></p><h3 id="Sequence-Diagram"><a href="#Sequence-Diagram" class="headerlink" title="Sequence Diagram"></a>Sequence Diagram</h3><p>@After will execute <strong>before</strong> @AfterThrowing.</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn8ui6xc9pj320g0poh5q.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@After(&quot;execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterFinallyFindAccountsAdvice</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;<br>  String methodName = joinPoint.getSignature().toShortString();<br>  System.out.println(<span class="hljs-string">&quot;Executing @After Finally advice...&quot;</span><br>                     + methodName);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Around-Advice-Type"><a href="#Around-Advice-Type" class="headerlink" title="@Around Advice Type"></a>@Around Advice Type</h2><h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h3><ul><li><p>Pre-processing and post-processing data</p></li><li><p>Instrumentation / profiling code</p></li><li><p>How long does it take for a section of code to run?</p></li><li><p>Managing Exception - Swallow / Handle / Stop Exceptions</p></li></ul><h3 id="Proceeding-Join-Point"><a href="#Proceeding-Join-Point" class="headerlink" title="Proceeding Join Point"></a>Proceeding Join Point</h3><p><strong>Example:</strong></p><p>Find out how long does it take to run the <code>getFortune()</code> method?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(value = &quot;execution(* com.luv2code.aopdemo.service.*.getFortune(..))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">afterGetFortune</span><span class="hljs-params">(ProceedingJoinPoint theProceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>  String methodName = theProceedingJoinPoint.getSignature().toShortString();<br>  System.out.println(<span class="hljs-string">&quot;Executing @Around Finally advice...&quot;</span><br>                     + methodName);<br>  <span class="hljs-keyword">long</span> begin = System.currentTimeMillis();<br>  Object res = theProceedingJoinPoint.proceed(); <span class="hljs-comment">// Handle to target method, Execute the target method.</span><br>  <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>  <span class="hljs-keyword">long</span> duration = end - begin;<br>  System.out.println(<span class="hljs-string">&quot;\n======&gt; Duration: &quot;</span> + duration + <span class="hljs-string">&quot; milliseconds.&quot;</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Resolve-Order-Issue"><a href="#Resolve-Order-Issue" class="headerlink" title="Resolve Order Issue"></a>Resolve Order Issue</h3><p>Replace <code>System.out.println</code> with <code>logger.info()</code></p><p><code>private static Logger myLogger = Logger.getLogger(AroundDemoApp.class.getName());</code></p><h3 id="Handling-Exception"><a href="#Handling-Exception" class="headerlink" title="Handling Exception"></a>Handling Exception</h3><p>For an exception thrown from proceeding join point,</p><ul><li>You can handle / swallow / stop the exception</li><li>Or you can simply rethrow the exception.</li></ul><h4 id="Handle-Swallow-Stop-the-Exception"><a href="#Handle-Swallow-Stop-the-Exception" class="headerlink" title="Handle / Swallow / Stop the Exception"></a>Handle / Swallow / Stop the Exception</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn9x2njh36j312c0l24af.jpg"></p><ol><li><code>@Around</code> advice calls the target method - <code>getFortuneService</code></li><li>There is an exception, go back to the <code>@Around</code> advice. </li><li><strong><code>@Around</code> advice handles the exception</strong> and sends back a regular <code>result</code> steam to the calling program.</li><li>The <code>result</code> stream makes it back to the AOP proxy and to main application.</li><li>The Main App never knows that exception is thrown because it is handle in the <code>@Around</code> advice.</li></ol><p><strong>Note:</strong> Do not hide the exceptions all the time. <strong>Use with caution.</strong> If it is a serious problem, just throw an exception to let everyone know.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Object res = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>  res = theProceedingJoinPoint.proceed(); <br>&#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>  myLogger.warning(e.getMessage());<br>  res = <span class="hljs-string">&quot;Major Accident! No worries! Fly you to the work.&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Rethrow-the-Exception"><a href="#Rethrow-the-Exception" class="headerlink" title="Rethrow the Exception"></a>Rethrow the Exception</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">catch</span>(Exception e) &#123;<br>myLogger.warning(e.getMessage());<br><span class="hljs-keyword">throw</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="PointCut"><a href="#PointCut" class="headerlink" title="PointCut"></a>PointCut</h1><h2 id="PointCut-Expression"><a href="#PointCut-Expression" class="headerlink" title="PointCut Expression"></a>PointCut Expression</h2><p><strong>PointCut:</strong> a predicate expression for where advice should be applied.</p><h3 id="Match-Method-and-Return-Types"><a href="#Match-Method-and-Return-Types" class="headerlink" title="Match Method and Return Types"></a>Match Method and Return Types</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(modifier-pattern? <span class="hljs-keyword">return</span>-type-pattern declaring-type-pattern? method-name-pattern(param-pattern) <span class="hljs-keyword">throws</span>-pattern?)<br></code></pre></td></tr></table></figure><ul><li>Patterns with “?” is optional.</li><li>Patterns can use wildcards - <code>*</code> - matches everything</li></ul><p><strong>Match any addAccount() method that returns void in AccountDAO:</strong></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn45v1qzklj315i0bydy8.jpg"></p><p><strong>Match any addAccount() method in any class</strong></p><p><code>@Before(&quot;execution(public void addAccount())&quot;)</code></p><p><strong>Match methods starting with add returning void in any class</strong></p><p><code>@Before(&quot;execution(public void add*())&quot;)</code></p><p><strong>Match methods starting with add in any class</strong></p><p><code>@Before(&quot;execution(* add*())&quot;)</code></p><h3 id="Match-Method-Parameter-Types"><a href="#Match-Method-Parameter-Types" class="headerlink" title="Match Method Parameter Types"></a>Match Method Parameter Types</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn47mte4smj310s0bu4dh.jpg"></p><p><strong>Match methods starting with add in any class with at least an Account para</strong></p><p><code>@Before(&quot;execution(* add*(com.luv2code.aopdemo.Account, ..))&quot;)</code></p><p><strong>Match all methods in a given class</strong></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn47x9j3ezj31780hsndn.jpg"></p><h2 id="PointCut-Declarations"><a href="#PointCut-Declarations" class="headerlink" title="PointCut Declarations"></a>PointCut Declarations</h2><ul><li>Easily reuse pointcut expressions</li><li>Update pointcut in one location </li><li>Can also share and combine pointcut expressions</li></ul><h3 id="Create-a-pointcut-declaration"><a href="#Create-a-pointcut-declaration" class="headerlink" title="Create a pointcut declaration"></a>Create a pointcut declaration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Poinitcut(&quot;execution(* add*(com.luv2code.aopdemo.Account, ..))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forDaoPackage</span><span class="hljs-params">()</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="Apply-pointcut-declaration-to-advices"><a href="#Apply-pointcut-declaration-to-advices" class="headerlink" title="Apply pointcut declaration to advices"></a>Apply pointcut declaration to advices</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;forDaoPackage()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Combine-Pointcut-Declarations"><a href="#Combine-Pointcut-Declarations" class="headerlink" title="Combine Pointcut Declarations"></a>Combine Pointcut Declarations</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;forDaoPackage() &amp;&amp; !(setter() || getter())&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">allMethodsExceptGetterAndSetter</span><span class="hljs-params">()</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="Apply-to-all-method-except-“getter-setter”"><a href="#Apply-to-all-method-except-“getter-setter”" class="headerlink" title="Apply to all method except “getter/setter”"></a>Apply to all method except “getter/setter”</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* com.luv2code.aopdemo.dao.*.*(..))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forDaoPackage</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br><span class="hljs-meta">@Pointcut(&quot;execution(* com.luv2code.aopdemo.dao.*.set*(..))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setter</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br><span class="hljs-meta">@Pointcut(&quot;execution(* com.luv2code.aopdemo.dao.*.get*(..))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getter</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br><span class="hljs-meta">@Pointcut(&quot;forDaoPackage() &amp;&amp; !(setter() || getter())&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">allMethodsExceptGetterAndSetter</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br><span class="hljs-meta">@Before(&quot;allMethodsExceptGetterAndSetter()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeAddAccountAdvice</span><span class="hljs-params">()</span></span>&#123;<br>  System.out.println(<span class="hljs-string">&quot;\n =====&gt;&gt;&gt; Executing @Before advice on addAccount() method!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Ordering-Aspects"><a href="#Ordering-Aspects" class="headerlink" title="Ordering Aspects"></a>Ordering Aspects</h2><p><strong>Refactor the advices into seperate Aspects and add <code>@Order()</code> annotation.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDemoLoggingAspect</span> </span>&#123;<br>    <span class="hljs-meta">@Before(&quot;com.luv2code.aopdemo.aspect.LuvAopExpressions.allMethodsExceptGetterAndSetter()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeAddAccountAdvice</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;\n =====&gt;&gt;&gt; Executing @Before advice on addAccount() method!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> smaller number represents higher level of execution. <code>-40 &gt; -10 &gt; 100</code></p><h2 id="Read-Method-Arguments-with-JoinPoints"><a href="#Read-Method-Arguments-with-JoinPoints" class="headerlink" title="Read Method Arguments with JoinPoints"></a>Read Method Arguments with JoinPoints</h2><h3 id="1-Access-and-display-Method-Signature"><a href="#1-Access-and-display-Method-Signature" class="headerlink" title="1. Access and display Method Signature"></a>1. Access and display Method Signature</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">MethodSignature methodSignature = (MethodSignature)joinPoint.getSignature();<br>System.out.println(<span class="hljs-string">&quot;Method Signature:&quot;</span>+methodSignature);<br></code></pre></td></tr></table></figure><h3 id="2-Access-and-display-Method-Arguments"><a href="#2-Access-and-display-Method-Arguments" class="headerlink" title="2. Access and display Method Arguments"></a>2. Access and display Method Arguments</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Object[] args = joinPoint.getArgs();<br><span class="hljs-keyword">for</span>(Object o: args)&#123;<br>  <span class="hljs-comment">// loop through the args</span><br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-warning">  Reference:   [1]Udemy, Spring & Hibernate for Beginners (including SpringBoot)  [2][I want my AOP](https://www.infoworld.com/article/2073918/i-want-my-aop---part-1.html)  [3][SpringAOP & Proxy Pattern](https://blog.csdn.net/eson_15/article/details/84933442?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.not_use_machine_learn_pai&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.not_use_machine_learn_pai)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AOP:Add Logging to Spring MVC Project</title>
    <link href="/2021/02/08/AOP-Add-Logging-to-Spring-MVC-Project/"/>
    <url>/2021/02/08/AOP-Add-Logging-to-Spring-MVC-Project/</url>
    
    <content type="html"><![CDATA[<h1 id="AOP-Add-Logging-to-Spring-MVC-Project"><a href="#AOP-Add-Logging-to-Spring-MVC-Project" class="headerlink" title="AOP: Add Logging to Spring MVC Project"></a>AOP: Add Logging to Spring MVC Project</h1><h2 id="Add-AspectJ-JAR-Files"><a href="#Add-AspectJ-JAR-Files" class="headerlink" title="Add AspectJ JAR Files"></a>Add AspectJ JAR Files</h2><p>Add AspectJ JAR file to  <code>web/WEB-INF/lib/aspectjweaver-1.8.13.jar</code></p><h2 id="Enable-AspectJ-Auto-Proxy"><a href="#Enable-AspectJ-Auto-Proxy" class="headerlink" title="Enable AspectJ Auto Proxy"></a>Enable AspectJ Auto Proxy</h2><p>Add AspectJ Auto Proxy to <code>spring-mvc-crud-demo-servlet.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">...</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-tag"><span class="hljs-string">    ...</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><br><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Add AspectJ Autoproxy support for AOP--&gt;</span><br><span class="hljs-comment">&lt;!-- This is used for processing @Aspect classes --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Create-Aspect"><a href="#Create-Aspect" class="headerlink" title="Create Aspect"></a>Create Aspect</h2><h3 id="Add-Logging-Aspect"><a href="#Add-Logging-Aspect" class="headerlink" title="Add Logging Aspect"></a>Add Logging Aspect</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CRMLoggingAspect</span> </span>&#123;<br>  <span class="hljs-comment">// setup logger</span><br>  <span class="hljs-keyword">private</span> Logger logger = Logger.getLogger(getClass().getName());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Setup-Pointcut-Declaration"><a href="#Setup-Pointcut-Declaration" class="headerlink" title="Setup Pointcut Declaration"></a>Setup Pointcut Declaration</h3><p>Create three seperate PointCut Declaration and join them together.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// setup pointcut declarations</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.luv2code.springdemo.controller.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forControllerPackage</span><span class="hljs-params">()</span></span>&#123; &#125;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.luv2code.springdemo.dao.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forDaoPackage</span><span class="hljs-params">()</span></span>&#123; &#125;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.luv2code.springdemo.service.*.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forServicePackage</span><span class="hljs-params">()</span></span>&#123; &#125;<br><br>    <span class="hljs-meta">@Pointcut(&quot;forControllerPackage() || forDaoPackage() || forServicePackage()&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">forAppFlow</span><span class="hljs-params">()</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="Add-Before-Advice"><a href="#Add-Before-Advice" class="headerlink" title="Add @Before Advice"></a>Add @Before Advice</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(value = &quot;forAppFlow()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">beforeAdvice</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;<br>  <span class="hljs-comment">// display the method name</span><br>  String methodName = joinPoint.getSignature().toShortString();<br>  logger.info(<span class="hljs-string">&quot;========&gt;&gt; in @Before: Method Name: &quot;</span> + methodName);<br>  <span class="hljs-comment">// display the args of the method</span><br>  Object[] args =  joinPoint.getArgs();<br>  <span class="hljs-keyword">for</span>(Object o: args)&#123;<br>    logger.info(<span class="hljs-string">&quot;========&gt;&gt; Argument: &quot;</span>+ o.toString());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Add-AfterReturning-Advice"><a href="#Add-AfterReturning-Advice" class="headerlink" title="Add @AfterReturning Advice"></a>Add @AfterReturning Advice</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(</span><br><span class="hljs-meta">  pointcut = &quot;forAppFlow()&quot;,</span><br><span class="hljs-meta">  returning = &quot;res&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">(JoinPoint joinPoint, Object res)</span></span>&#123;<br>  <span class="hljs-comment">// display the method name</span><br>  String methodName = joinPoint.getSignature().toShortString();<br>  logger.info(<span class="hljs-string">&quot;========&gt;&gt; in @AfterReturning: Method Name: &quot;</span> + methodName);<br>  logger.info(<span class="hljs-string">&quot;========&gt;&gt; Result: &quot;</span>+ res);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Log-Example"><a href="#Log-Example" class="headerlink" title="Log Example"></a>Log Example</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gna12tu6r2j31v00dgagf.jpg"></p><p class="note note-warning">  Reference:   [1]Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>AOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hibernate Advanced Mappings</title>
    <link href="/2021/02/08/HibernateAdvancedMappings/"/>
    <url>/2021/02/08/HibernateAdvancedMappings/</url>
    
    <content type="html"><![CDATA[<h1 id="Hibernate-Advanced-Mappings"><a href="#Hibernate-Advanced-Mappings" class="headerlink" title="Hibernate Advanced Mappings"></a>Hibernate Advanced Mappings</h1><h2 id="OneToOne"><a href="#OneToOne" class="headerlink" title="@OneToOne"></a>@OneToOne</h2><h3 id="Entity-Lifecycle"><a href="#Entity-Lifecycle" class="headerlink" title="Entity Lifecycle"></a>Entity Lifecycle</h3><ul><li><strong>Detach</strong> - not associated with a Hibernate session</li><li><strong>Merge</strong> </li><li><strong>Persist</strong></li><li><strong>Refresh</strong> - sync object with db</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmvy47bvqvj30w60i8awx.jpg" alt="Entity Lifecycle"></p><h3 id="Cascade-Type"><a href="#Cascade-Type" class="headerlink" title="Cascade Type"></a>Cascade Type</h3><ul><li><strong>PERSIST</strong> - Related entity will also be persisted</li><li><strong>REMOVE</strong> - </li><li><strong>REFRESH</strong></li><li><strong>DETACH</strong></li><li><strong>REMOVE</strong></li><li><strong>ALL</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OneToOne(cascade=CascadeType.ALL)</span><br></code></pre></td></tr></table></figure><p><strong>Note:</strong> By default, no operations are cascaded.</p><h4 id="Configure-Multiple-Cascade-Types"><a href="#Configure-Multiple-Cascade-Types" class="headerlink" title="Configure Multiple Cascade Types"></a>Configure Multiple Cascade Types</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OneToOne(cascade=&#123;CascadeType.DETACH,</span><br><span class="hljs-meta">  CascadeType.MERGE&#125;)</span><br></code></pre></td></tr></table></figure><h3 id="Uni-Directional-Example"><a href="#Uni-Directional-Example" class="headerlink" title="Uni-Directional Example"></a>Uni-Directional Example</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OneToOne(cascade = CascadeType.ALL)</span><br><span class="hljs-meta">@JoinColumn(name = &quot;instructor_detail_id&quot;)</span><br><span class="hljs-keyword">private</span> InstructorDetail instructorDetail;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//  Create session factory</span><br>        SessionFactory factory = <span class="hljs-keyword">new</span> Configuration()<br>                .configure(<span class="hljs-string">&quot;hibernate.cfg.xml&quot;</span>)<br>                .addAnnotatedClass(Instructor.class)<br>                .addAnnotatedClass(InstructorDetail.class)<br>                .buildSessionFactory();<br><br>        Session session = factory.getCurrentSession();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">// create</span><br>            Instructor instructor = <span class="hljs-keyword">new</span> Instructor(<span class="hljs-string">&quot;Dylan&quot;</span>, <span class="hljs-string">&quot;Zhang&quot;</span>, <span class="hljs-string">&quot;dylan@test.com&quot;</span>);<br>            InstructorDetail instructorDetail = <span class="hljs-keyword">new</span> InstructorDetail(<span class="hljs-string">&quot;http://github.com&quot;</span>, <span class="hljs-string">&quot;Wine&quot;</span>);<br><br>            <span class="hljs-comment">// associate</span><br>            instructor.setInstructorDetail(instructorDetail);<br><br>            <span class="hljs-comment">//start</span><br>            session.beginTransaction();<br><br>            <span class="hljs-comment">// This will ALSO save the detail object</span><br>            <span class="hljs-comment">// because of the CascadeType.ALL</span><br>            System.out.println(<span class="hljs-string">&quot;Saving instructor: &quot;</span>+instructor);<br>            session.save(instructor);<br><br>            <span class="hljs-comment">//  commit transaction</span><br>            session.getTransaction().commit();<br><br>            System.out.println(<span class="hljs-string">&quot;Done!&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            factory.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bi-Directional-Example"><a href="#Bi-Directional-Example" class="headerlink" title="Bi-Directional Example"></a>Bi-Directional Example</h3><p>If we load an <strong>InstructorDetail</strong>, we want to get the associated <strong>Instructor</strong>.</p><h4 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h4><ol><li><p>Make updates to <code>InstructorDetail</code> class.</p><ol><li>Add new field to reference <strong>Instructor.</strong></li><li>Add getter and setter method.</li><li>Add <code>@OneToOne</code> annotation.</li></ol></li><li><p>Create <code>Main</code> App.</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OneToOne(mappedBy=&quot;instructorDetail&quot;, cascade=CascadeType.ALL)</span><br><span class="hljs-keyword">private</span> Instructor instructor;<br></code></pre></td></tr></table></figure><p><strong>MappedBy</strong> tells Hibernate:</p><ul><li><p>Look at the <strong>instructorDetail</strong> property in the <strong>Instructor</strong> class. </p><p><u>Use property name!</u></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Instructor</span></span>&#123;<br>  <span class="hljs-meta">@OneToOne(cascade=CascadeType.ALL)</span><br>  <span class="hljs-meta">@JoinColumn(name=&quot;instructor_detail_id&quot;)</span> <span class="hljs-comment">// link to the db</span><br>  <span class="hljs-keyword">private</span> InstructorDetail instructorDetail;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Use the info from the <strong>Instructor</strong> class <code>@JoinColumn</code></p></li><li><p>To help to find the associated instructor.</p></li></ul><h4 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>  e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>  session.close();<br>  factory.close();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Delete-Only-InstructionDetail"><a href="#Delete-Only-InstructionDetail" class="headerlink" title="Delete Only InstructionDetail"></a>Delete Only InstructionDetail</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> theId = <span class="hljs-number">4</span>;<br><br><span class="hljs-comment">// look for the associated</span><br>InstructorDetail instructorDetail = session.get(InstructorDetail.class, theId);<br><br>System.out.println(<span class="hljs-string">&quot;The Instructor Detail: &quot;</span> + instructorDetail);<br>System.out.println(<span class="hljs-string">&quot;The associated Instructor: &quot;</span> + instructorDetail.getInstructor());<br><br><span class="hljs-comment">// break teh bi-directional link</span><br><span class="hljs-comment">// remove the associated object reference</span><br>instructorDetail.getInstructor().setInstructorDetail(<span class="hljs-keyword">null</span>);<br><br><span class="hljs-comment">// Delete the instructor detail and cascade delete the instructor</span><br>System.out.println(<span class="hljs-string">&quot;Deleting &quot;</span> + instructorDetail);<br>session.delete(instructorDetail);<br><br><span class="hljs-comment">//  commit transaction</span><br>session.getTransaction().commit();<br>System.out.println(<span class="hljs-string">&quot;Done!&quot;</span>); <br></code></pre></td></tr></table></figure><p><strong>Note:</strong> After selecting the instructor and instructorDetail, you should remove the association between those two and then perform deleting operation.</p><h2 id="OneToMany"><a href="#OneToMany" class="headerlink" title="@OneToMany"></a>@OneToMany</h2><h3 id="Bi-Directional"><a href="#Bi-Directional" class="headerlink" title="Bi-Directional"></a>Bi-Directional</h3><p><strong>Do not apply cascading deletes!</strong></p><p>Course.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ManyToOne</span><br><span class="hljs-meta">@JoinColumn(name=&quot;instructor_id&quot;)</span><br><span class="hljs-keyword">private</span> Instructor instructor;<br></code></pre></td></tr></table></figure><p>Instructor.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OneToMany(mappedBy=&quot;instructor&quot;)</span> <br><span class="hljs-comment">// refers to the &quot;instructor&quot; property in the &quot;Course&quot; class</span><br><span class="hljs-keyword">private</span> List&lt;Course&gt; courses;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> Apply <strong>ALL</strong> the cascading types except <strong>REMOVE</strong>!</p><h3 id="Uni-Directional"><a href="#Uni-Directional" class="headerlink" title="Uni-Directional"></a>Uni-Directional</h3><h4 id="Use-Case"><a href="#Use-Case" class="headerlink" title="Use Case"></a>Use Case</h4><p>We have <strong>Course</strong> Entity and <strong>Review</strong> Entity. But a review without a course is meaningless, so if the course is deleted, then the related reviews should apply cascading deletes.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)</span><br><span class="hljs-meta">@JoinColumn(name = &quot;course_id&quot;)</span><br><span class="hljs-keyword">private</span> List&lt;Review&gt; reviews;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Review&#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-meta">@Column(name = &quot;id&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-meta">@Column(name = &quot;comment&quot;)</span><br>    <span class="hljs-keyword">private</span> String comment;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ManyToMany"><a href="#ManyToMany" class="headerlink" title="@ManyToMany"></a>@ManyToMany</h2><h3 id="JoinTable"><a href="#JoinTable" class="headerlink" title="@JoinTable"></a>@JoinTable</h3><p>Mapping between two tables. Use the foreign keys to maintain relationship.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JoinTable(</span><br><span class="hljs-meta">name=&quot;course_student&quot;,</span><br><span class="hljs-meta">joinColumns=@JoinColumn(name=&quot;course_id&quot;),</span><br><span class="hljs-meta">inverseJoinColumn=@JoinColumn(name=&quot;student_id&quot;)</span><br><span class="hljs-meta">)</span><br></code></pre></td></tr></table></figure><ol><li>Look at the <code>course_id</code> in the <code>course_student</code> table</li><li>Inversely, look at the <code>student_id</code> column in the <code>course_student</code> table.</li></ol><p><strong>Note:</strong> Do not apply cascading deletes!</p><h2 id="Eager-vs-Lazy-Loading"><a href="#Eager-vs-Lazy-Loading" class="headerlink" title="Eager vs Lazy Loading"></a>Eager vs Lazy Loading</h2><h3 id="Eager-Loading"><a href="#Eager-Loading" class="headerlink" title="Eager Loading"></a>Eager Loading</h3><p>It will retrieve everything and load all entites.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OneToMany(fetch = FetchType.EAGER,</span><br><span class="hljs-meta">            mappedBy = &quot;instructor&quot;)</span> <span class="hljs-comment">//refers the instructor property in the course.class</span><br>    <span class="hljs-keyword">private</span> List&lt;Course&gt; courses;<br></code></pre></td></tr></table></figure><h3 id="Lazy-Loading"><a href="#Lazy-Loading" class="headerlink" title="Lazy Loading"></a>Lazy Loading</h3><p>It will retrieve on request.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@OneToMany(fetch = FetchType.LAZY,</span><br><span class="hljs-meta">            mappedBy = &quot;instructor&quot;)</span> <span class="hljs-comment">//refers the instructor property in the course.class</span><br>    <span class="hljs-keyword">private</span> List&lt;Course&gt; courses;<br></code></pre></td></tr></table></figure><h3 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h3><h4 id="Master-View"><a href="#Master-View" class="headerlink" title="Master View"></a>Master View</h4><p>we use the lazy loading.</p><h4 id="Detail-View"><a href="#Detail-View" class="headerlink" title="Detail View"></a>Detail View</h4><p>we retrieve the entity and necessary dependent entities.</p><h4 id="Default-Fetch-Types"><a href="#Default-Fetch-Types" class="headerlink" title="Default Fetch Types"></a>Default Fetch Types</h4><p><strong>@OneToOne</strong> - EAGER</p><p><strong>@OneToMany</strong> - LAZY</p><p><strong>@ManyToOne</strong> - EAGER</p><p><strong>@ManyToMany</strong> - LAZY</p><h3 id="Resolve-LAZY-Loading-Issue"><a href="#Resolve-LAZY-Loading-Issue" class="headerlink" title="Resolve LAZY Loading Issue"></a>Resolve LAZY Loading Issue</h3><h4 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h4><p>If we close the session before the accessing LAZY data, what will we get?</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">INFO: HHH10001008: Cleaning up connection pool [jdbc:mysql:<span class="hljs-comment">//localhost:3306/hb-03-one-to-many?useSSL=false&amp;serverTimezone=UTC]</span><br>Exception <span class="hljs-keyword">in</span> thread <span class="hljs-string">&quot;main&quot;</span> org<span class="hljs-selector-class">.hibernate</span><span class="hljs-selector-class">.LazyInitializationException</span>: failed to lazily initialize <span class="hljs-selector-tag">a</span> collection of role: com<span class="hljs-selector-class">.luv2code</span><span class="hljs-selector-class">.hibernate</span><span class="hljs-selector-class">.demo</span><span class="hljs-selector-class">.entity</span><span class="hljs-selector-class">.Instructor</span><span class="hljs-selector-class">.courses</span>, could not initialize proxy - no Session<br></code></pre></td></tr></table></figure><p>How can we access the LAZY data after the session is closed? </p><h4 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;luv2Code: The Courses: &quot;</span>+ instructor.getCourses());<br></code></pre></td></tr></table></figure><p>Retrieve the LAZY data before the session is closed. And the LAZY data is stored in memory to access.</p><h4 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// get the instructor from db</span><br><span class="hljs-keyword">int</span> theId = <span class="hljs-number">1</span>;<br><br>Query&lt;Instructor&gt; query =<br>  session.createQuery(<span class="hljs-string">&quot;select i from Instructor i &quot;</span><br>                      + <span class="hljs-string">&quot;JOIN FETCH i.courses &quot;</span><br>                      + <span class="hljs-string">&quot;where i.id =:theInstructorId&quot;</span>,<br>                      Instructor.class);<br><br><span class="hljs-comment">// set the parameter on query</span><br>query.setParameter(<span class="hljs-string">&quot;theInstructorId&quot;</span>, theId);<br><br><span class="hljs-comment">// execute the query and get instructor</span><br>Instructor tempInstructor = query.getSingleResult();<br></code></pre></td></tr></table></figure><p>Use <strong>FETCH JOIN</strong> to generate and execute HQL Query. Retrive the LAZY data.</p><p class="note note-warning">  Reference: Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hibernate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring MVC and Hibernate Project</title>
    <link href="/2021/02/08/SpringMVCandHibernateProject/"/>
    <url>/2021/02/08/SpringMVCandHibernateProject/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-MVC-and-Hibernate-Project"><a href="#Spring-MVC-and-Hibernate-Project" class="headerlink" title="Spring MVC and Hibernate Project"></a>Spring MVC and Hibernate Project</h1><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn11hlm886j31760km4qp.jpg" alt="Big Picture"></p><ol><li>Browser makes a request to the customer controller.</li><li>Customer Controller makes use  of the Customer DAO.</li><li>The DAO access the database using the Hibernate API.</li><li>The controller place the data into your Spring MVC model  and send that to the JSP pages.</li><li>The JSP pages will render that data to the screen. </li></ol><h1 id="List-Customers"><a href="#List-Customers" class="headerlink" title="List Customers"></a>List Customers</h1><h2 id="1-Create-Hibernate-Entity"><a href="#1-Create-Hibernate-Entity" class="headerlink" title="1. Create Hibernate Entity"></a>1. Create Hibernate Entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = &quot;customer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> </span>&#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-meta">@Column(name = &quot;id&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-meta">@Column(name = &quot;first_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String firstName;<br><br>    <span class="hljs-meta">@Column(name = &quot;last_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String lastName;<br><br>    <span class="hljs-meta">@Column(name = &quot;email&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="Entity-Scanning"><a href="#Entity-Scanning" class="headerlink" title="Entity Scanning"></a>Entity Scanning</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;packagesToScan&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.luv2code.springdemo.entity&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>If data source is not found, add a MySQL datasource.</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1uzyc333j318q0u0gtm.jpg" alt="Add Data Sources"></p><h2 id="2-Create-DAO"><a href="#2-Create-DAO" class="headerlink" title="2. Create DAO"></a>2. Create DAO</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1vb7g0aaj31v80cmtv4.jpg" alt="Customer DAO"></p><p><strong>Wire them together with Dependency Injection!</strong></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1vuiordaj30kk0ec0tt.jpg"></p><h3 id="Data-Source"><a href="#Data-Source" class="headerlink" title="Data Source"></a>Data Source</h3><p>Data source tells us the database connection info.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/web_customer_tracker?useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;springstudent&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;springstudent&quot;</span> /&gt;</span> <br><br>        <span class="hljs-comment">&lt;!-- these are connection pool properties for C3P0 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxIdleTime&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;30000&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Session-Factory"><a href="#Session-Factory" class="headerlink" title="Session Factory"></a>Session Factory</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sessionFactory&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.orm.hibernate5.LocalSessionFactoryBean&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myDataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;packagesToScan&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.luv2code.springdemo.entity&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hibernateProperties&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p><strong>SessionFactory</strong> depends on <strong>Data Source</strong>.</p><h3 id="Define-DAO-Interface"><a href="#Define-DAO-Interface" class="headerlink" title="Define DAO Interface"></a>Define DAO Interface</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CustomerDAO</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Customer&gt; <span class="hljs-title">getCustomers</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Define-DAO-Implementation"><a href="#Define-DAO-Implementation" class="headerlink" title="Define DAO Implementation"></a>Define DAO Implementation</h3><p>Inject the <strong>SessionFactory</strong> using <code>@Autowired</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerDAOImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CustomerDAO</span></span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SessionFactory sessionFactory;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Customer&gt; <span class="hljs-title">getCustomers</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//get the current session</span><br>        Session session =  sessionFactory.getCurrentSession();<br>        <span class="hljs-comment">// create a query</span><br>        Query&lt;Customer&gt; query = session.createQuery(<span class="hljs-string">&quot;from Customer&quot;</span>, Customer.class);<br>        <span class="hljs-comment">// Execute the query</span><br>        List&lt;Customer&gt; res = query.getResultList();<br>        <span class="hljs-comment">// return the result</span><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1w2ydvibj31co0cqke2.jpg"></p><h5 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h5><p><strong>Always</strong> apply <code>@Repository</code> before your <strong>DAOImplementation</strong> class.</p><p>It’s a subclass and inherits from the <code>@Component</code>, so it will be available for auto-scanning of component scanning. </p><p>Spring wil automatically register the DAO implementation.</p><p>Spring will also translate any JDBC related exceptions to unchecked exceptions.</p><p>Therefore, <code>Repository</code> is specific for code that talks to a data source or back-end repository.</p><h5 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h5><p><code>@Transactional</code> will <strong>automatically</strong> begin and end a transaction for your Hibernate code. So no need for you to explicitly do this. </p><p><strong>Always</strong> apply <code>@Transactional</code> in your <code>@Override</code> methods.</p><h2 id="3-Create-Controller"><a href="#3-Create-Controller" class="headerlink" title="3. Create Controller"></a>3. Create Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/customer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerController</span> </span>&#123;<br>    <span class="hljs-comment">// need to inject Customer DAO into controller</span><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CustomerDAO customerDAO;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/list&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">listCustomer</span><span class="hljs-params">(Model theModel)</span></span>&#123;<br>        <span class="hljs-comment">// get customers from the DAO</span><br>        List&lt;Customer&gt; customers = customerDAO.getCustomers();<br>        <span class="hljs-comment">// add the customers to the Model</span><br>        theModel.addAttribute(<span class="hljs-string">&quot;customers&quot;</span>, customers);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;list-customer&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-Create-JSP-Page"><a href="#4-Create-JSP-Page" class="headerlink" title="4. Create  JSP Page"></a>4. Create  JSP Page</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;head&gt;                                                                                                        <br>    &lt;title&gt;List Customer&lt;/title&gt;                                                                              <br>    &lt;link type=<span class="hljs-string">&quot;text/css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/resources/css/style.css&quot;</span>&gt; <br>&lt;/head&gt;                                                                                                       <br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;tempCustomer&quot;</span> items=<span class="hljs-string">&quot;$&#123;customers&#125;&quot;</span>&gt;<br>    &lt;tr&gt;                                           <br>        &lt;td&gt;$&#123;tempCustomer.firstName&#125;&lt;/td&gt;         <br>        &lt;td&gt;$&#123;tempCustomer.lastName&#125;&lt;/td&gt;          <br>        &lt;td&gt;$&#123;tempCustomer.email&#125;&lt;/td&gt;             <br>    &lt;/tr&gt;                                          <br>&lt;/c:forEach&gt;                                       <br></code></pre></td></tr></table></figure><h1 id="New-Annotations"><a href="#New-Annotations" class="headerlink" title="New Annotations"></a>New Annotations</h1><h2 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h2><p><code>@GetMapping(&quot;/processForm&quot;) = @RequestMapping(path=&quot;/processForm&quot;, method=Request.GET)</code></p><p>This mapping <strong>ONLY</strong> handles <strong>GET</strong> method. Any other HTTP REQUEST method will get rejected.</p><h2 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;processForm&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1x3z5n5ej30x20asguy.jpg"></p><p><code>@PostMapping(&quot;/processForm&quot;) = @RequestMapping(path=&quot;/processForm&quot;, method=Request.POST)</code></p><p>This mapping <strong>ONLY</strong> handles <strong>POST</strong> method. Any other HTTP REQUEST method will get rejected.</p><h2 id="Service-Layer"><a href="#Service-Layer" class="headerlink" title="Service Layer"></a>Service Layer</h2><p>Add a service layer between the Customer Controller and Customoer DAO.</p><p>The purpose of the service layer is to <strong>integrate multiple data sources.</strong></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1xdy8tfyj31980l07wh.jpg"></p><h3 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h3><p><code>@Service</code> applied to Service Implementations.</p><p>Spring wil automatically register the Service implementation.</p><h3 id="Develop-Customer-Service"><a href="#Develop-Customer-Service" class="headerlink" title="Develop Customer Service"></a>Develop Customer Service</h3><h4 id="1-Define-Service-Interface"><a href="#1-Define-Service-Interface" class="headerlink" title="1. Define Service Interface"></a>1. Define Service Interface</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CustomerService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Customer&gt; <span class="hljs-title">getCustomer</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Define-Service-Implementation"><a href="#2-Define-Service-Implementation" class="headerlink" title="2. Define Service Implementation"></a>2. Define Service Implementation</h4><p>Inject the CustomerDAO</p><p><strong>Remove @Transactional from DAO implementation and add @Transactional annotation to Service Layer.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CustomerService</span></span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CustomerDAO customerDAO;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Customer&gt; <span class="hljs-title">getCustomer</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customerDAO.getCustomers();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> Don’t forget to modify the controller to make it talk to Service layer dirctly.</p><h1 id="Revised-Big-Picture"><a href="#Revised-Big-Picture" class="headerlink" title="Revised Big Picture"></a>Revised Big Picture</h1><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1xkbtyq8j31b40keada.jpg" alt="Revised Big Picture"></p><h1 id="Add-Customers"><a href="#Add-Customers" class="headerlink" title="Add Customers"></a>Add Customers</h1><h2 id="1-Create-“Add-Customer”-Button"><a href="#1-Create-“Add-Customer”-Button" class="headerlink" title="1. Create “Add Customer” Button"></a>1. Create “Add Customer” Button</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;Add Customer&quot;</span> <br>                       onclick=<span class="hljs-string">&quot;window.location.href=&#x27;showFormForAdd&#x27;; return false;&quot;</span> <br>                       <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;add-button&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>Call Spring Controller Mapping.</p><h2 id="2-Create-HTML-Form"><a href="#2-Create-HTML-Form" class="headerlink" title="2. Create HTML Form"></a>2. Create HTML Form</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;div id=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>        &lt;h3&gt;Save Customer&lt;/h3&gt;<br>        &lt;form:form action=<span class="hljs-string">&quot;saveCustomer&quot;</span> modelAttribute=<span class="hljs-string">&quot;customer&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span>&gt;<br>            &lt;table&gt;<br>                &lt;tbody&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;label&gt;First Name:&lt;/label&gt;&lt;/td&gt;<br>                      &lt;td&gt;&lt;form:input path=&quot;firstName&quot;/&gt;&lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;label&gt;Last Name:&lt;/label&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;form:input path =&quot;lastName&quot;/&gt; &lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;label&gt;Email:&lt;/label&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;form:input path=&quot;email&quot;/&gt; &lt;/td&gt;<br>                    &lt;/tr&gt;<br>                    &lt;tr&gt;<br>                        &lt;td&gt;&lt;label&gt;&lt;/label&gt;&lt;/td&gt;<br>                        &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;Save&quot; class=&quot;save&quot;/&gt; &lt;/td&gt;<br>                    &lt;/tr&gt;<br>                &lt;/tbody&gt;<br>            &lt;/table&gt;<br>        &lt;/form:form&gt;<br>        &lt;p&gt;<br>            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;&quot;&gt;Back To List&lt;/a&gt;<br>        &lt;/p&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="3-Process-Form-Data"><a href="#3-Process-Form-Data" class="headerlink" title="3. Process Form Data"></a>3. Process Form Data</h2><h3 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1. Controller"></a>1. Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/showFormForAdd&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showFormForAdd</span><span class="hljs-params">(Model theModel)</span></span>&#123;<br>  theModel.addAttribute(<span class="hljs-string">&quot;customer&quot;</span>, <span class="hljs-keyword">new</span> Customer());<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;customer-form&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@PostMapping(&quot;/saveCustomer&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">saveCustomer</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute(&quot;customer&quot;)</span> Customer theCustomer)</span></span>&#123;<br>  customerService.saveCustomer(theCustomer);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/customer/list&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Service"><a href="#2-Service" class="headerlink" title="2. Service"></a>2. Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Customer <span class="hljs-title">getCustomer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> theId)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> customerDAO.getCustomer(theId);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveCustomer</span><span class="hljs-params">(Customer customer)</span> </span>&#123;<br>  customerDAO.saveCustomer(customer);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-DAO"><a href="#3-DAO" class="headerlink" title="3. DAO"></a>3. DAO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Customer <span class="hljs-title">getCustomer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> theId)</span> </span>&#123;<br>  Session session = sessionFactory.getCurrentSession();<br>  Customer customer = session.get(Customer.class, theId);<br>  <span class="hljs-keyword">return</span> customer;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveCustomer</span><span class="hljs-params">(Customer customer)</span> </span>&#123;<br>  Session session = sessionFactory.getCurrentSession();<br>  session.saveOrUpdate(customer); <span class="hljs-comment">// save or update !!! important!!</span><br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Update-Customer"><a href="#Update-Customer" class="headerlink" title="Update Customer"></a>Update Customer</h1><h2 id="1-Update-Customer-List"><a href="#1-Update-Customer-List" class="headerlink" title="1. Update Customer List"></a>1. Update Customer List</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:url <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;updateLink&quot;</span> value=<span class="hljs-string">&quot;/customer/showFormForUpdate&quot;</span>&gt;<br>  &lt;c:param name=<span class="hljs-string">&quot;customerId&quot;</span> value=<span class="hljs-string">&quot;$&#123;tempCustomer.id&#125;&quot;</span>/&gt;<br>&lt;/c:url&gt;<br>&lt;tr&gt;<br>  &lt;td&gt;<br>    &lt;a href=&quot;$&#123;updateLink&#125;&quot;&gt;Update&lt;/a&gt;<br>  &lt;/td&gt;<br>&lt;/tr&gt;<br></code></pre></td></tr></table></figure><h2 id="2-Prepopulate-Customer-Form"><a href="#2-Prepopulate-Customer-Form" class="headerlink" title="2. Prepopulate Customer Form"></a>2. Prepopulate Customer Form</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form:hidden path=<span class="hljs-string">&quot;id&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> Add  <strong><code>&lt;form:hidden path=&quot;id&quot;/&gt;</code></strong>  into customer form. Very Important! </p><p>Track the selected Customer by storing the Id in the HTML form. Then the backend controller can retrive the customer by Id.</p><h2 id="3-Process-Form-Data-1"><a href="#3-Process-Form-Data-1" class="headerlink" title="3. Process Form Data"></a>3. Process Form Data</h2><h3 id="1-Controller-1"><a href="#1-Controller-1" class="headerlink" title="1. Controller"></a>1. Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/showFormForUpdate&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateCustomer</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">  <span class="hljs-meta">@RequestParam(&quot;customerId&quot;)</span> <span class="hljs-keyword">int</span> theId,</span></span><br><span class="hljs-function"><span class="hljs-params">  Model theModel)</span></span>&#123;<br>  <span class="hljs-comment">// get the customer from service</span><br>  Customer customer = customerService.getCustomer(theId);<br>  <span class="hljs-comment">// set the customer as a model attribute to pre-populate the form</span><br>  theModel.addAttribute(<span class="hljs-string">&quot;customer&quot;</span>, customer);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;customer-form&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Service-1"><a href="#2-Service-1" class="headerlink" title="2. Service"></a>2. Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveCustomer</span><span class="hljs-params">(Customer customer)</span> </span>&#123;<br>  customerDAO.saveCustomer(customer);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-DAO-1"><a href="#3-DAO-1" class="headerlink" title="3. DAO"></a>3. DAO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveCustomer</span><span class="hljs-params">(Customer customer)</span> </span>&#123;<br>  Session session = sessionFactory.getCurrentSession();<br>  session.saveOrUpdate(customer); <span class="hljs-comment">// save or update !!! important!!</span><br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> <code>session.saveOrUpdate(Object o)</code> method will check <strong>if there is an existing object</strong> in the database, if yes, update its info. If no, save the new object to the database.</p><h1 id="Delete-Customer"><a href="#Delete-Customer" class="headerlink" title="Delete Customer"></a>Delete Customer</h1><h2 id="1-Delete-Customer-List"><a href="#1-Delete-Customer-List" class="headerlink" title="1. Delete Customer List"></a>1. Delete Customer List</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">|<br>&lt;a href=<span class="hljs-string">&quot;$&#123;deleteLink&#125;&quot;</span> onclick=<span class="hljs-string">&quot;if </span><br><span class="hljs-string">                                 (!(confirm(&#x27;Are you sure you want to delete this customer?&#x27;))) </span><br>                                 return false&quot;&gt;Delete&lt;/a&gt;<br></code></pre></td></tr></table></figure><h2 id="2-Prepopulate-Customer-Form-1"><a href="#2-Prepopulate-Customer-Form-1" class="headerlink" title="2. Prepopulate Customer Form"></a>2. Prepopulate Customer Form</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:url <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;deleteLink&quot;</span> value=<span class="hljs-string">&quot;/customer/delete&quot;</span>&gt;<br>  &lt;c:param name=<span class="hljs-string">&quot;customerId&quot;</span> value=<span class="hljs-string">&quot;$&#123;tempCustomer.id&#125;&quot;</span>/&gt;<br>&lt;/c:url&gt;<br></code></pre></td></tr></table></figure><p>Prepopulate Customer Form by storing <strong>customerId</strong> param in the URL.</p><h2 id="3-Process-Form-Data-2"><a href="#3-Process-Form-Data-2" class="headerlink" title="3. Process Form Data"></a>3. Process Form Data</h2><h3 id="1-Controller-2"><a href="#1-Controller-2" class="headerlink" title="1. Controller"></a>1. Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/delete&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteCustomer</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;customerId&quot;)</span> <span class="hljs-keyword">int</span> theId)</span></span>&#123;<br>  customerService.deleteCustomer(theId);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/customer/list&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Service-2"><a href="#2-Service-2" class="headerlink" title="2. Service"></a>2. Service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveCustomer</span><span class="hljs-params">(Customer customer)</span> </span>&#123;<br>  customerDAO.saveCustomer(customer);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-DAO-2"><a href="#3-DAO-2" class="headerlink" title="3. DAO"></a>3. DAO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteCustomer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> theId)</span> </span>&#123;<br>  Session session = sessionFactory.getCurrentSession();<br>  <span class="hljs-comment">// delete the customer in the database</span><br>  Query theQuery = session.createQuery(<span class="hljs-string">&quot;delete from Customer where id =:theCustomerId&quot;</span>);<br>  theQuery.setParameter(<span class="hljs-string">&quot;theCustomerId&quot;</span>, theId);<br>  theQuery.executeUpdate();<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-warning">  Reference: Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hibernate</tag>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Solved - Static Resources(css/js/images) Not Found(404)</title>
    <link href="/2021/02/08/Solved%20-%20Static%20Resources%20Not%20Found(404)/"/>
    <url>/2021/02/08/Solved%20-%20Static%20Resources%20Not%20Found(404)/</url>
    
    <content type="html"><![CDATA[<h2 id="Solved-Static-Resources-css-js-images-Not-Found-404"><a href="#Solved-Static-Resources-css-js-images-Not-Found-404" class="headerlink" title="Solved - Static Resources(css/js/images) Not Found(404)"></a>Solved - Static Resources(css/js/images) Not Found(404)</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1si2taf0j31k00bowgc.jpg" alt="Not Found"></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1skqhjqfj31e00rcjvd.jpg" alt="Set as Resources Folder"></p><p>Add following config into <code>/WEB-INF/spring-mvc-crud-demo-servlet.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Add support for reading web resources: css, images, js --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/resources/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/resources/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>Make sure set the Tomcat Configuration to <strong>Update Classes and Resources</strong>.</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1ss7gv84j31bj0u0jxw.jpg" alt="Update classes and resources"></p><p>Make sure the <strong>resources folder</strong> is deployed in the <code>out/artifacts</code> path and is updated everytime the <strong>jsp</strong> or <strong>css</strong> file is modified.</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gn1strshr4j30lq0owac1.jpg" alt="Output Artifacts"></p><p class="note note-warning">  Reference: Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hibernate</tag>
      
      <tag>SpringMVC</tag>
      
      <tag>Troubleshooting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security</title>
    <link href="/2021/02/08/Spring-Security/"/>
    <url>/2021/02/08/Spring-Security/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security-Overview"><a href="#Spring-Security-Overview" class="headerlink" title="Spring Security - Overview"></a>Spring Security - Overview</h1><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><ul><li>Spring Security defines a framework for Security.</li><li>Implmented using Servlet filters in the background.</li><li>Two methods of securing a Web app: Declarative and Programmatic.</li></ul><h2 id="Big-Pic"><a href="#Big-Pic" class="headerlink" title="Big Pic"></a>Big Pic</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gna8lbscsgj318k0i4x30.jpg" alt="Big Picture"></p><h2 id="Flow-Chart-in-Action"><a href="#Flow-Chart-in-Action" class="headerlink" title="Flow Chart in Action"></a>Flow Chart in Action</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gna8ofhvyhj31fv0u0kjl.jpg" alt="Flowchar in Action"></p><h2 id="Security-Concepts"><a href="#Security-Concepts" class="headerlink" title="Security Concepts"></a>Security Concepts</h2><ul><li>Authentication - Check user id or password with credentials stored in App/db.</li><li>Authorization - Check to see if user has an authorized role.</li></ul><h2 id="Declarative-Security"><a href="#Declarative-Security" class="headerlink" title="Declarative Security"></a>Declarative Security</h2><p>Defines application’s security constraints in configuration. </p><ul><li>All Java config </li><li>Or Spring XML Config</li></ul><h2 id="Programmatic-Security"><a href="#Programmatic-Security" class="headerlink" title="Programmatic Security"></a>Programmatic Security</h2><ul><li><p>Provides an API for custom application coding.</p></li><li><p>Provides greater customization for specific app requirements.</p></li></ul><h2 id="Login-Methods"><a href="#Login-Methods" class="headerlink" title="Login Methods"></a>Login Methods</h2><ul><li>HTTP</li><li>Default Login Form</li><li>Custom Login Form</li></ul><h1 id="Spring-MVC-Java-Config"><a href="#Spring-MVC-Java-Config" class="headerlink" title="Spring MVC - Java Config"></a>Spring MVC - Java Config</h1><h2 id="Add-Maven-Dependencies"><a href="#Add-Maven-Dependencies" class="headerlink" title="Add Maven Dependencies"></a>Add Maven Dependencies</h2><p>Import existing maven project into IntelliJ.</p><p>Since we are not using <code>web.xml</code>, customize Maven build and must add Maven WAR plugin.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- <span class="hljs-doctag">TODO:</span> Add support for Maven WAR Plugin --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>spring-security-demo<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-comment">&lt;!-- Add Maven Coordinates--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Create-Spring-Configuration"><a href="#Create-Spring-Configuration" class="headerlink" title="Create Spring @Configuration"></a>Create Spring @Configuration</h2><p>Create a DemoAppConfig.java file in the source directory.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;com.luv2code.springsecurity.demo&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoAppConfig</span> </span>&#123;<br>    <span class="hljs-comment">// define a bean for view resolver</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title">viewResolver</span><span class="hljs-params">()</span></span>&#123;<br>        InternalResourceViewResolver viewResolver = <span class="hljs-keyword">new</span> InternalResourceViewResolver();<br>        viewResolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span>);<br>        viewResolver.setSuffix(<span class="hljs-string">&quot;.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Create-Spring-Dispatcher-Servlet-Initializer"><a href="#Create-Spring-Dispatcher-Servlet-Initializer" class="headerlink" title="Create Spring Dispatcher Servlet Initializer"></a>Create Spring Dispatcher Servlet Initializer</h2><p>Spring MVC provides support for web app initialization.</p><p>Your code is used to initialize the servlet container.</p><h4 id="AbstractAnnotationConfigDispatcherServletInitializer"><a href="#AbstractAnnotationConfigDispatcherServletInitializer" class="headerlink" title="AbstractAnnotationConfigDispatcherServletInitializer"></a>AbstractAnnotationConfigDispatcherServletInitializer</h4><ul><li>Extend the abstract base class</li><li>Override some required methods</li><li>Specify  servlet mapping and location of your app config</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySpringMvcDispatcherServletInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123; <span class="hljs-comment">// Dispatcher Servlet</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Class[]&#123; DemoAppConfig.class &#125;; <span class="hljs-comment">// ContextConfigLocation</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123; <span class="hljs-comment">// dispatcher and url pattern</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String[] &#123; <span class="hljs-string">&quot;/&quot;</span> &#125;; <span class="hljs-comment">// map</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Develop-Spring-Controller"><a href="#Develop-Spring-Controller" class="headerlink" title="Develop Spring Controller"></a>Develop Spring Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoController</span> </span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showHome</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;home&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Develop-JSP-View-Page"><a href="#Develop-JSP-View-Page" class="headerlink" title="Develop JSP View Page"></a>Develop JSP View Page</h2><p>Create a test.jsp file and run the tomcat server to test the demo.</p><h1 id="Configure-Basic-Security"><a href="#Configure-Basic-Security" class="headerlink" title="Configure Basic Security"></a>Configure Basic Security</h1><h2 id="Create-Spring-Security-Initializer"><a href="#Create-Spring-Security-Initializer" class="headerlink" title="Create Spring Security Initializer"></a>Create Spring Security Initializer</h2><h3 id="AbstractSecurityWebApplicationInitializer"><a href="#AbstractSecurityWebApplicationInitializer" class="headerlink" title="AbstractSecurityWebApplicationInitializer"></a>AbstractSecurityWebApplicationInitializer</h3><p>A special class to register the <strong><u>Spring Security Filters.</u></strong></p><p><strong><u>TODO List</u></strong>: Just extends the abstract class! No methods to override!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityWebApplicationInitializer</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractSecurityWebApplicationInitializer</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Create-Spring-Security-Configuration"><a href="#Create-Spring-Security-Configuration" class="headerlink" title="Create Spring Security Configuration"></a>Create Spring Security Configuration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoSecurityConfig</span></span><br><span class="hljs-class">        <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Add-Users-Passwords-and-Roles"><a href="#Add-Users-Passwords-and-Roles" class="headerlink" title="Add Users Passwords and Roles"></a>Add Users Passwords and Roles</h2><p>Add users in <code>DemoSecurityConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// add our users for in memory authentication</span><br>UserBuilder users = User.withDefaultPasswordEncoder();<br>auth.inMemoryAuthentication()<br>  .withUser(users.username(<span class="hljs-string">&quot;John&quot;</span>).password(<span class="hljs-string">&quot;test123&quot;</span>).roles(<span class="hljs-string">&quot;EMPLOYEE&quot;</span>))<br>  .withUser(users.username(<span class="hljs-string">&quot;Mary&quot;</span>).password(<span class="hljs-string">&quot;test123&quot;</span>).roles(<span class="hljs-string">&quot;MANAGER&quot;</span>))<br>  .withUser(users.username(<span class="hljs-string">&quot;Susan&quot;</span>).password(<span class="hljs-string">&quot;test123&quot;</span>).roles(<span class="hljs-string">&quot;ADMIN&quot;</span>));<br></code></pre></td></tr></table></figure><h1 id="Add-Custom-LogIn-Form"><a href="#Add-Custom-LogIn-Form" class="headerlink" title="Add Custom LogIn Form"></a>Add Custom LogIn Form</h1><h2 id="Modify-Spring-Security-Configuration"><a href="#Modify-Spring-Security-Configuration" class="headerlink" title="Modify Spring Security Configuration"></a>Modify Spring Security Configuration</h2><p>To reference custom login form.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>  http.authorizeRequests()<br>    .anyRequest().authenticated()<br>    .and()<br>    .formLogin()<br>    .loginPage(<span class="hljs-string">&quot;/showMyLoginPage&quot;</span>)<br>    .loginProcessingUrl(<span class="hljs-string">&quot;/authenticateTheUser&quot;</span>)<br>    .permitAll();<br>&#125;<br></code></pre></td></tr></table></figure><p>Override the configure method.</p><h2 id="Develop-a-Controller"><a href="#Develop-a-Controller" class="headerlink" title="Develop a Controller"></a>Develop a Controller</h2><p>To show the custom login form.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/showMyLoginPage&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showMyLoginPage</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;plain-login&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Create-custom-login-form"><a href="#Create-custom-login-form" class="headerlink" title="Create custom login form"></a>Create custom login form</h2><ul><li>HTML</li><li>Spring MVC form tag </li></ul><h3 id="Why-use-Context-Path"><a href="#Why-use-Context-Path" class="headerlink" title="Why use Context Path?"></a>Why use Context Path?</h3><ul><li>Allows us to dynamically reference context path of application.</li><li>Helps to keep links relative to application context path.LL</li><li>If you change context path of app, then links will still work.</li><li>Much better than hard-coding the context path.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>&lt;h3&gt; My Custom Login Page&lt;/h3&gt;<br>&lt;form:form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/authenticateTheUser&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;p&gt;User Name: &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;/p&gt;<br>    &lt;p&gt;Password: &lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;&lt;/p&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Login&quot;</span>/&gt;<br>&lt;/form:form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="Add-Error-Message"><a href="#Add-Error-Message" class="headerlink" title="Add Error Message"></a>Add Error Message</h2><h3 id="Modify-the-Login-Form-Check-for-error"><a href="#Modify-the-Login-Form-Check-for-error" class="headerlink" title="Modify the Login Form - Check for error"></a>Modify the Login Form - Check for error</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;<br><br>&lt;body&gt;<br>&lt;h3&gt; My Custom Login Page&lt;/h3&gt;<br>&lt;form:form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/authenticateTheUser&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;param.error != null&#125;&quot;</span>&gt;<br>    &lt;i class=&quot;failed&quot;&gt;Sorry, you entered wrong credentials.&lt;/i&gt;<br>    &lt;/c:if&gt;<br>    &lt;p&gt;User Name: &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;/p&gt;<br>    &lt;p&gt;Password: &lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;&lt;/p&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Login&quot;</span>/&gt;<br>&lt;/form:form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><p><strong>Note:</strong> Change <code>http://java.sun.com/jstl/core</code> to <code>http://java.sun.com/jsp/jstl/core</code>, unless you will get <strong>Error:</strong> <code>attribute test does not accept any expressions</code>.</p><h2 id="Add-Logout-Support"><a href="#Add-Logout-Support" class="headerlink" title="Add Logout Support"></a>Add Logout Support</h2><h3 id="Add-Logout-to-Configuration"><a href="#Add-Logout-to-Configuration" class="headerlink" title="Add Logout to Configuration"></a>Add Logout to Configuration</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>  http.authorizeRequests()<br>    .anyRequest().authenticated()<br>    .and()<br>    .formLogin()<br>    .loginPage(<span class="hljs-string">&quot;/showMyLoginPage&quot;</span>)<br>    .loginProcessingUrl(<span class="hljs-string">&quot;/authenticateTheUser&quot;</span>)<br>    .permitAll()<br>    .and()<br>    .logout().permitAll();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> This will add logout support for default URL <code>/logout</code></p><h3 id="Add-Logout-Button-to-JSP"><a href="#Add-Logout-Button-to-JSP" class="headerlink" title="Add Logout Button to JSP"></a>Add Logout Button to JSP</h3><p>The button needs to send data to the default URL <code>/logout</code></p><p>Logout URL will be handled by Spring Security Fileters - No coding required.   </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form:form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/logout&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Logout&quot;</span>&gt;<br>&lt;/form:form&gt;<br></code></pre></td></tr></table></figure><h3 id="Update-Form"><a href="#Update-Form" class="headerlink" title="Update Form"></a>Update Form</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;param.logout != null&#125;&quot;</span>&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;alert alert-success col-xs-offset-1 col-xs-10&quot;</span>&gt;<br>    You have been logged out.<br>  &lt;/div&gt;<br>&lt;/c:if&gt;<br></code></pre></td></tr></table></figure><h1 id="Cross-Site-Request-Forgery-CSRF"><a href="#Cross-Site-Request-Forgery-CSRF" class="headerlink" title="Cross Site Request Forgery(CSRF)"></a>Cross Site Request Forgery(CSRF)</h1><p><a href="https://zhuanlan.zhihu.com/p/22521378">What is CSRF?</a></p><blockquote><p>CSRF(Cross Site Request Forgery)即跨站请求伪造。就是利用后台有规律的接口，例如 localhost<a href="http://link.zhihu.com/?target=http://www.baidu.com/deleteAriticle.php?id=3&username=xiaoxiao">/deleteAriticle.php?id=3&amp;username=xiaoxiao</a> ，攻击者在被攻击的网站页面嵌入这样的代码，当用户xiaoxiao访问该网站的时候，会发起这条请求。服务器会删除id为3的数据。<br>客户端防范：对于数据库的修改请求，全部使用POST提交，禁止使用GET请求。<br>服务器端防范：一般的做法是在表单里面添加一段隐藏的唯一的token(请求令牌)。</p></blockquote><h2 id="Spring-Security-CSRF-Protection"><a href="#Spring-Security-CSRF-Protection" class="headerlink" title="Spring Security CSRF Protection"></a>Spring Security CSRF Protection</h2><p>Spring Security uses the <strong>Synchronizer Token Pattern</strong>.</p><ul><li>Each request includes <strong>a session cookie and randomly generated token.</strong></li></ul><p>For request processing, Spring Security verifies token before processing.</p><p>All of this is handled by Spring Security Filters automatically.</p><h3 id="When-to-use-CSRF-Protection"><a href="#When-to-use-CSRF-Protection" class="headerlink" title="When to use CSRF Protection?"></a>When to use CSRF Protection?</h3><p>Use CSRF protection for any normal browser web requests.</p><h3 id="How-to-use-CSRF-Protection"><a href="#How-to-use-CSRF-Protection" class="headerlink" title="How to use CSRF Protection?"></a>How to use CSRF Protection?</h3><p>For form submissions use <strong>POST</strong> instead of <strong>GET</strong>.</p><p>Just use <strong>Spring MVC Form Tags.</strong></p><p><code>&lt;form:form&gt;</code> will automatically adds CSRF token.</p><h4 id="Manually-Add-CSRF-Token"><a href="#Manually-Add-CSRF-Token" class="headerlink" title="Manually Add CSRF Token"></a>Manually Add CSRF Token</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;_csrf.token&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>If you use plain <code>&lt;form&gt;</code> tag, then you need to manually add CSRF token authentication in the form submission.</p><h3 id="Break-It"><a href="#Break-It" class="headerlink" title="Break It"></a>Break It</h3><p>Use plain <code>&lt;form&gt;</code> tag rather than Spring MVC <code>&lt;form:form&gt;</code> tag.</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/authenticateTheUser&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;form-horizontal&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>Then, we will get an ugly <code>403 - Forbidden</code> error message. </p><blockquote><p>The server understood the request but refused to authorize it.</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gndbb4we4ij313g0awt9u.jpg"></p><h3 id="Fix-It"><a href="#Fix-It" class="headerlink" title="Fix It"></a>Fix It</h3><p>Add token manually like mentioned above.</p><h2 id="Display-Username-and-Roles"><a href="#Display-Username-and-Roles" class="headerlink" title="Display Username and Roles"></a>Display Username and Roles</h2><h3 id="Add-new-Dependency-in-pom-xml"><a href="#Add-new-Dependency-in-pom-xml" class="headerlink" title="Add new Dependency in pom.xml"></a>Add new Dependency in pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-taglibs<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springsecurity.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Update-JSP-Page"><a href="#Update-JSP-Page" class="headerlink" title="Update JSP Page"></a>Update JSP Page</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;security&quot;</span> uri=<span class="hljs-string">&quot;http://www.springframework.org/security/tags&quot;</span> %&gt;<br>&lt;p&gt;<br>    Users: &lt;security:authentication property=<span class="hljs-string">&quot;principal.username&quot;</span>/&gt;<br>    Roles: &lt;security:authentication property=<span class="hljs-string">&quot;principal.authorities&quot;</span>/&gt;<br>&lt;/p&gt;<br></code></pre></td></tr></table></figure><h1 id="Restrict-Access-based-on-Role"><a href="#Restrict-Access-based-on-Role" class="headerlink" title="Restrict Access based on Role"></a>Restrict Access based on Role</h1><h2 id="Create-Controller-and-Views"><a href="#Create-Controller-and-Views" class="headerlink" title="Create Controller and Views"></a>Create Controller and Views</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/leader&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showLeaders</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;leader&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/system&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showSystem</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;system&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Update-Roles"><a href="#Update-Roles" class="headerlink" title="Update Roles"></a>Update Roles</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">auth.inMemoryAuthentication()<br>  .withUser(users.username(<span class="hljs-string">&quot;John&quot;</span>).password(<span class="hljs-string">&quot;test123&quot;</span>).roles(<span class="hljs-string">&quot;EMPLOYEE&quot;</span>))<br>  .withUser(users.username(<span class="hljs-string">&quot;Mary&quot;</span>).password(<span class="hljs-string">&quot;test123&quot;</span>).roles(<span class="hljs-string">&quot;EMPLOYEE&quot;</span>,<span class="hljs-string">&quot;MANAGER&quot;</span>))<br>  .withUser(users.username(<span class="hljs-string">&quot;Susan&quot;</span>).password(<span class="hljs-string">&quot;test123&quot;</span>).roles(<span class="hljs-string">&quot;EMPLOYEE&quot;</span>,<span class="hljs-string">&quot;ADMIN&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="Authorize-Access-to-Roles"><a href="#Authorize-Access-to-Roles" class="headerlink" title="Authorize Access to Roles"></a>Authorize Access to Roles</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">http.authorizeRequests()<br>  .antMatchers(<span class="hljs-string">&quot;/&quot;</span>).hasRole(<span class="hljs-string">&quot;EMPLOYEE&quot;</span>)<br>  .antMatchers(<span class="hljs-string">&quot;/leader/**&quot;</span>).hasRole(<span class="hljs-string">&quot;MANAGER&quot;</span>)<br>  .antMatchers(<span class="hljs-string">&quot;/system/**&quot;</span>).hasRole(<span class="hljs-string">&quot;ADMIN&quot;</span>)<br>  .and()<br>  .exceptionHandling().accessDeniedPage(<span class="hljs-string">&quot;/access-denied&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Create-the-Access-Denied-Page"><a href="#Create-the-Access-Denied-Page" class="headerlink" title="Create the Access-Denied Page"></a>Create the Access-Denied Page</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>&lt;h1&gt;<br>    Access Denied!<br>&lt;/h1&gt;<br>&lt;p&gt;<br>    &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/&quot;&gt;Back To Home Page&lt;/a&gt;<br>&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="Display-Content-Based-on-Roles"><a href="#Display-Content-Based-on-Roles" class="headerlink" title="Display Content Based on Roles"></a>Display Content Based on Roles</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;security:authorize access=<span class="hljs-string">&quot;hasRole(&#x27;MANAGER&#x27;)&quot;</span>&gt;<br>  &lt;p&gt;<br>    &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/leader&quot;&gt;Leadership Meeting&lt;/a&gt; (Only for Managers)<br>  &lt;/p&gt;<br>&lt;/security:authorize&gt;<br><br>&lt;security:authorize access=<span class="hljs-string">&quot;hasRole(&#x27;ADMIN&#x27;)&quot;</span>&gt;<br>  &lt;p&gt;<br>    &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/system&quot;&gt;Admin &lt;/a&gt; (Only for Admins)<br>  &lt;/p&gt;<br>&lt;/security:authorize&gt;<br></code></pre></td></tr></table></figure><h1 id="Add-JDBC-Database-Authentication"><a href="#Add-JDBC-Database-Authentication" class="headerlink" title="Add JDBC Database Authentication"></a>Add JDBC Database Authentication</h1><h2 id="Run-SQL-Scripts"><a href="#Run-SQL-Scripts" class="headerlink" title="Run SQL Scripts"></a>Run SQL Scripts</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `users` <br><span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-string">&#x27;john&#x27;</span>,<span class="hljs-string">&#x27;&#123;noop&#125;test123&#x27;</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-string">&#x27;mary&#x27;</span>,<span class="hljs-string">&#x27;&#123;noop&#125;test123&#x27;</span>,<span class="hljs-number">1</span>),<br>(<span class="hljs-string">&#x27;susan&#x27;</span>,<span class="hljs-string">&#x27;&#123;noop&#125;test123&#x27;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> <code>noop</code> is the encoding algorithm of the password.</p><h2 id="Add-Database-Support-to-pom-xml"><a href="#Add-Database-Support-to-pom-xml" class="headerlink" title="Add Database Support to pom.xml"></a>Add Database Support to pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.45<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Create-JDBC-Properties-File"><a href="#Create-JDBC-Properties-File" class="headerlink" title="Create JDBC Properties File"></a>Create JDBC Properties File</h2><p><code>src/main/resources/persistence-mysql.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#</span><br><span class="hljs-comment"># JDBC connection properties</span><br><span class="hljs-comment">#</span><br><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/spring_security_demo_plaintext?useSSL=false&amp;serverTimezone=UTC</span><br><span class="hljs-meta">jdbc.user</span>=<span class="hljs-string">springstudent</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">springstudent</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Connection pool properties</span><br><span class="hljs-comment">#</span><br><span class="hljs-meta">connection.pool.initialPoolSize</span>=<span class="hljs-string">5</span><br><span class="hljs-meta">connection.pool.minPoolSize</span>=<span class="hljs-string">5</span><br><span class="hljs-meta">connection.pool.maxPoolSize</span>=<span class="hljs-string">20</span><br><span class="hljs-meta">connection.pool.maxIdleTime</span>=<span class="hljs-string">3000</span><br></code></pre></td></tr></table></figure><h2 id="Define-DataSource-in-Spring-Config"><a href="#Define-DataSource-in-Spring-Config" class="headerlink" title="Define DataSource in Spring Config"></a>Define DataSource in Spring Config</h2><p>Introduce the <code>Environment</code> variable, this will hold data from the properties file. </p><p>Add the <code>@Autowired</code> annotation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// set up a variable to store the properties</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> Environment env; <br><br><span class="hljs-comment">// set up a logger for diagnostics</span><br><span class="hljs-keyword">private</span> Logger logger = Logger.getLogger(getClass().getName());<br></code></pre></td></tr></table></figure><p>Define a Bean for the security data source.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">securityDataSource</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-comment">// create a connection pool</span><br>  ComboPooledDataSource securityDataSource;<br>  <span class="hljs-keyword">try</span> &#123;<br>    securityDataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>  &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>  &#125;<br><br>  <span class="hljs-comment">// set the jdbc driver class</span><br>  <span class="hljs-comment">// Read the db configs from the properties file</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    securityDataSource.setDriverClass(env.getProperty(<span class="hljs-string">&quot;jdbc.driver&quot;</span>));<br>  &#125; <span class="hljs-keyword">catch</span> (PropertyVetoException e) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>  &#125;<br>  <span class="hljs-comment">// log the connection props</span><br>  logger.info(<span class="hljs-string">&quot;&gt;&gt;&gt; jdbc.url=&quot;</span>+env.getProperty(<span class="hljs-string">&quot;jdbc.url&quot;</span>));<br>  logger.info(<span class="hljs-string">&quot;&gt;&gt;&gt; jdbc.user=&quot;</span>+env.getProperty(<span class="hljs-string">&quot;jdbc.user&quot;</span>));<br><br>  <span class="hljs-comment">// set the database connection props</span><br>  securityDataSource.setJdbcUrl(env.getProperty(<span class="hljs-string">&quot;jdbc.url&quot;</span>));<br>  securityDataSource.setUser(env.getProperty(<span class="hljs-string">&quot;jdbc.user&quot;</span>));<br>  securityDataSource.setPassword(env.getProperty(<span class="hljs-string">&quot;jdbc.password&quot;</span>));<br><br>  <span class="hljs-comment">// set the connection pool props</span><br>  securityDataSource.setInitialPoolSize(getIntProperties(<span class="hljs-string">&quot;connection.pool.initialPoolSize&quot;</span>));<br>  securityDataSource.setInitialPoolSize(getIntProperties(<span class="hljs-string">&quot;connection.pool.minPoolSize&quot;</span>));<br>  securityDataSource.setInitialPoolSize(getIntProperties(<span class="hljs-string">&quot;connection.pool.maxPoolSize&quot;</span>));<br>  securityDataSource.setInitialPoolSize(getIntProperties(<span class="hljs-string">&quot;connection.pool.maxIdleTime&quot;</span>));<br><br>  <span class="hljs-keyword">return</span> securityDataSource;<br>&#125;<br></code></pre></td></tr></table></figure><p>Define a helper method to read the env properties and convert them to integer.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// need a helper method</span><br><span class="hljs-comment">// read env properties and convert to int</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getIntProperties</span><span class="hljs-params">(String propsName)</span></span>&#123;<br>  String propVal = env.getProperty(propsName);<br>  <span class="hljs-keyword">int</span> intPropVal = Integer.parseInt(propVal);<br>  <span class="hljs-keyword">return</span> intPropVal;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Add-JDBC-Configuration"><a href="#Add-JDBC-Configuration" class="headerlink" title="Add JDBC Configuration"></a>Add JDBC Configuration</h2><p>Retrieve a <code>securityDataSource</code> Bean from the factory and inject into <code>DemoSecurityConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DataSource securityDataSource;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>  auth.jdbcAuthentication().dataSource(securityDataSource);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Diagram"><a href="#Diagram" class="headerlink" title="Diagram"></a>Diagram</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gngxri84qxj30zq0kiadj.jpg" alt="demoSecurityConfig Diagram"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gngxrgcgkoj30ps0gudhi.jpg" alt="demoAppConfig Diagram"></p><h1 id="Password-Encryption"><a href="#Password-Encryption" class="headerlink" title="Password Encryption"></a>Password Encryption</h1><h2 id="Run-SQL-Scripts-1"><a href="#Run-SQL-Scripts-1" class="headerlink" title="Run SQL Scripts"></a>Run SQL Scripts</h2><p>Change the DDL to <code>Bcrypt</code> hashing.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `users`;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `users` (<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">char</span>(<span class="hljs-number">68</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `enabled` tinyint(<span class="hljs-number">1</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (`username`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>latin1;<br></code></pre></td></tr></table></figure><p>Password must be <strong>68</strong> chars.</p><ul><li><code>&#123;bcrypt&#125;</code> - 8 chars.</li><li><code>&#123;encodedPassword&#125;</code> - 60 chars.</li></ul><h2 id="Modify-db-Properties"><a href="#Modify-db-Properties" class="headerlink" title="Modify db Properties"></a>Modify db Properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/spring_security_demo_bcrypt?useSSL=false&amp;serverTimezone=UTC</span><br></code></pre></td></tr></table></figure><h2 id="Behind-the-Scenes"><a href="#Behind-the-Scenes" class="headerlink" title="Behind the Scenes"></a>Behind the Scenes</h2><ol><li>Retrieve the password from db for the user</li><li>Read the encoding algorithm id</li><li>For case of bcrypt, encrypt the plaintext password from the login form</li><li>Compare the encrypted password from login from WITH encrypted password from db.</li><li>If there is a matc, then login successful.</li></ol><p><strong>Note:</strong> The password from db is <strong>NEVER</strong> decrypted. Because <strong>Bcrypt</strong> is a <strong>one way</strong> encryption algorithm. </p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven Overview</title>
    <link href="/2021/01/21/Maven-Overview/"/>
    <url>/2021/01/21/Maven-Overview/</url>
    
    <content type="html"><![CDATA[<h2 id="Maven-Overview"><a href="#Maven-Overview" class="headerlink" title="Maven Overview"></a>Maven Overview</h2><ul><li>Dependency Management</li><li>Building and Running your project</li><li>Standard directory structure</li></ul><h2 id="POM-File"><a href="#POM-File" class="headerlink" title="POM File"></a>POM File</h2><p><u>P</u>roject <u>O</u>bject <u>M</u>odel file: <u>POM</u> file</p><h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><h4 id="Project-Meta-Data"><a href="#Project-Meta-Data" class="headerlink" title="Project Meta Data"></a>Project Meta Data</h4><ul><li>Project name, version</li><li>Output file type: JAR and WAR</li></ul><h4 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h4><ul><li>List of projects we depend on</li></ul><h4 id="Plug-ins"><a href="#Plug-ins" class="headerlink" title="Plug-ins"></a>Plug-ins</h4><ul><li>Addtional custom tasks to run: </li><li>Generate JUnit test report</li></ul><h2 id="Project-Coordiantes"><a href="#Project-Coordiantes" class="headerlink" title="Project Coordiantes"></a>Project Coordiantes</h2><h3 id="GroupId"><a href="#GroupId" class="headerlink" title="GroupId"></a>GroupId</h3><p>Name of company, group or organization.</p><h3 id="ArtifactId"><a href="#ArtifactId" class="headerlink" title="ArtifactId"></a>ArtifactId</h3><p>Name of this project: <strong>myApp</strong></p><h3 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h3><p>A specific release version like <strong>1.0, 1.6..</strong></p><p>If the project is still under active development then: <strong>1.0-SNAPSHOT.</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.5.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Maven-Archetypes"><a href="#Maven-Archetypes" class="headerlink" title="Maven Archetypes"></a>Maven Archetypes</h2><p><strong>Archetype:=</strong> starer project</p><h3 id="Most-Common-Ones"><a href="#Most-Common-Ones" class="headerlink" title="Most Common Ones"></a>Most Common Ones</h3><ul><li><code>maven-archetype-quickstart</code></li><li><code>maven-archetype-webapp</code></li></ul><h2 id="Maven-Repositories-Overview"><a href="#Maven-Repositories-Overview" class="headerlink" title="Maven Repositories Overview"></a>Maven Repositories Overview</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmvvyigntfj311w0k24qd.jpg" alt="Maven Repositories"></p><h3 id="Local"><a href="#Local" class="headerlink" title="Local"></a>Local</h3><p>Mac / Linux: <code>~/.m2/repository</code></p><h3 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h3><p><a href="https://repo.maven.apache.org/maven2/">Remote Repo</a></p><h3 id="Private"><a href="#Private" class="headerlink" title="Private"></a>Private</h3><p>Set up your own Maven Repository and</p><ul><li>Secure it with credentials: id/password</li></ul><h4 id="Repo-Manager-Products"><a href="#Repo-Manager-Products" class="headerlink" title="Repo Manager Products"></a>Repo Manager Products</h4><ul><li>Archiva - Apache</li><li>Artifactory - JFrog</li><li>Nexus - Sonatype</li></ul><p class="note note-warning">  Reference: Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Solved - Cannot find javax.validation Problem</title>
    <link href="/2021/01/19/Hibernate-validation-problem/"/>
    <url>/2021/01/19/Hibernate-validation-problem/</url>
    
    <content type="html"><![CDATA[<h2 id="Solved-Cannot-find-javax-validation-problem"><a href="#Solved-Cannot-find-javax-validation-problem" class="headerlink" title="[Solved]Cannot find javax.validation problem"></a>[Solved]Cannot find javax.validation problem</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Having copied and pasted <strong>Hibernate Validation</strong> jar files into <code>WEB-INF/lib</code>, still cannot find <code>@NotNull</code> and <code>@Size</code>  annotations, and cannot resovle these jar files.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">javax</span><span class="hljs-selector-class">.validation</span><span class="hljs-selector-class">.constraints</span><span class="hljs-selector-class">.NotNull</span>;<br><span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">javax</span><span class="hljs-selector-class">.validation</span><span class="hljs-selector-class">.constraints</span><span class="hljs-selector-class">.Size</span>;<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmtm6lfx0fj30zo0rqtd7.jpg"></p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ol><li>File -&gt; Project Structure -&gt; Module -&gt; “+” -&gt; Hibernate</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmtlv62c1zj30wg0jcac8.jpg"></p><ol start="2"><li>Fix -&gt; Download -&gt; OK -&gt; Apply -&gt; OK</li></ol><p><strong>Note:</strong> Don’t forget to change the download path to <code>WEB-INF/lib</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmtm02lr3wj316l0u07ck.jpg"></p><ol start="3"><li>Copy and paste the required JAR files provided by the instructor to path <code>WEB-INF/lib</code></li><li>Add these JAR Files to the Hibernate library.</li></ol><p>Library -&gt; Hibernate -&gt; “+” -&gt; select the JAR files in <code>WEB-INF/lib</code>  -&gt; Apply -&gt; OK</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmtm3mmetqj312i0u0qcf.jpg"></p><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmtm9731mhj30y50u012r.jpg"></p><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hibernate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hibernate</title>
    <link href="/2021/01/17/Hibernate/"/>
    <url>/2021/01/17/Hibernate/</url>
    
    <content type="html"><![CDATA[<h2 id="What-is-Hibernate"><a href="#What-is-Hibernate" class="headerlink" title="What is Hibernate?"></a>What is Hibernate?</h2><p>A framework for persisting / saving Java objects in a database.</p><h2 id="Benefits-of-Hibernate"><a href="#Benefits-of-Hibernate" class="headerlink" title="Benefits of Hibernate"></a>Benefits of Hibernate</h2><ul><li>Handles all of the low-level SQL.</li><li>Minimizes the amount of JDBC code you have to develop.</li><li>Provides the <strong>Object-to-Rational Mapping(ORM).</strong></li></ul><h2 id="Object-to-Rational-Mapping-ORM"><a href="#Object-to-Rational-Mapping-ORM" class="headerlink" title="Object-to-Rational Mapping(ORM)"></a>Object-to-Rational Mapping(ORM)</h2><p>Mapping between the Java class and database table.</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmtwywtq9qj31cm0c8k9h.jpg" alt="ORM Example"></p><h3 id="Save-Java-Object"><a href="#Save-Java-Object" class="headerlink" title="Save Java Object"></a>Save Java Object</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Student theStudent = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;john@test.com&quot;</span>);<br><span class="hljs-comment">// save it to database</span><br><span class="hljs-keyword">int</span> theId = (Integer)session.save(theStudent);<br></code></pre></td></tr></table></figure><p>Hibernate will store the data into the appropriate database - perform SQL insert. </p><p>Then Hibernate will return the <strong>primary key</strong> - <code>theId</code>.</p><h3 id="Retrieve-Java-Object"><a href="#Retrieve-Java-Object" class="headerlink" title="Retrieve Java Object"></a>Retrieve Java Object</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// now retrieve from the database using the primary key</span><br>Student myStudent = session.get(Student.class, theId);<br></code></pre></td></tr></table></figure><h3 id="Query-for-Java-Object"><a href="#Query-for-Java-Object" class="headerlink" title="Query for Java Object"></a>Query for Java Object</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// retrieve all the student objects and store them in a list</span><br>Query query = session.create(<span class="hljs-string">&quot;from Student&quot;</span>);<br>List&lt;Student&gt; students = query.list();<br></code></pre></td></tr></table></figure><p>Here, we use the <strong>Hibernate Query Language(HQL).</strong></p><h2 id="Hibernate-and-JDBC"><a href="#Hibernate-and-JDBC" class="headerlink" title="Hibernate and JDBC"></a>Hibernate and JDBC</h2><ul><li>Hibernate uses JDBC for all database communications.</li><li>Configure Hibernate to make use of the JDBC driver.</li></ul><h2 id="Configurations-with-Annotations"><a href="#Configurations-with-Annotations" class="headerlink" title="Configurations with Annotations"></a>Configurations with Annotations</h2><h3 id="Developement-Process"><a href="#Developement-Process" class="headerlink" title="Developement Process"></a>Developement Process</h3><h4 id="Add-Hibernate-Configuration-file"><a href="#Add-Hibernate-Configuration-file" class="headerlink" title="Add Hibernate Configuration file"></a>Add Hibernate Configuration file</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">hibernate-configuration</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">session-factory</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- JDBC Database connection settings --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connection.driver_class&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connection.url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connection.username&quot;</span>&gt;</span>hbstudent<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connection.password&quot;</span>&gt;</span>hbstudent<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- JDBC connection pool settings ... using built-in test pool --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connection.pool_size&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Select our SQL dialect --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Echo the SQL to stdout --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;show_sql&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Set the current session context --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;current_session_context_class&quot;</span>&gt;</span>thread<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">session-factory</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">hibernate-configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Annotate-Java-class"><a href="#Annotate-Java-class" class="headerlink" title="Annotate Java class"></a>Annotate Java class</h4><p><strong>Entity Class</strong> - Java class that is mapped to a database table / plain old Java Class</p><ol><li><p>Map class to database table</p></li><li><p>Map fields to database columns</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name=&quot;student&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Column(name = &quot;id&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br><br>    <span class="hljs-meta">@Column(name = &quot;first_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String firstName;<br><br>    <span class="hljs-meta">@Column(name = &quot;last_name&quot;)</span><br>    <span class="hljs-keyword">private</span> String lastName;<br><br>    <span class="hljs-meta">@Column(name = &quot;email&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> Be sure to use <code>import javax.persistence.*.</code></p><p>JPA is a standard specification. Hibernate is an implementation of the JPA specification.</p><p>Hibernate implements all of the JPA annotations.</p><h4 id="Develop-Code-to-perform-database-operations"><a href="#Develop-Code-to-perform-database-operations" class="headerlink" title="Develop Code to perform database operations"></a>Develop Code to perform database operations</h4><ol><li><p><strong>SessionFactory</strong> </p><ul><li>Reads the Hi-config file</li><li>Creates session object</li><li><strong>Heavy-weight</strong> object</li><li>Only create <strong>once</strong> in your app</li></ul></li><li><p><strong>Session</strong></p><ul><li>Wraps JDBC connection</li><li>Main object to save/retrieve objects</li><li>Short-lived object</li><li>Retrived from the sessionFactory</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  Create session factory</span><br>SessionFactory factory = <span class="hljs-keyword">new</span> Configuration()<br>  .configure(<span class="hljs-string">&quot;hibernate.cfg.xml&quot;</span>)<br>  .addAnnotatedClass(Student.class)<br>  .buildSessionFactory();<br></code></pre></td></tr></table></figure><p>If the name of the config file is not given, Hibernate will automatically look for a file on your class path called <code>hibernate.cfg.xml</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">Session session = factory.getCurrentSession();<br><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-comment">// use the session objection to save Java Object</span><br>  System.out.println(<span class="hljs-string">&quot;Creating a new student object...&quot;</span>);<br>  Student tempStudent = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Paul&quot;</span>, <span class="hljs-string">&quot;Wall&quot;</span>, <span class="hljs-string">&quot;Paul@test.com&quot;</span>);<br><br>  <span class="hljs-comment">//  Create the student object</span><br>  session.beginTransaction();<br><br>  <span class="hljs-comment">//  save the student object</span><br>  System.out.println(<span class="hljs-string">&quot;Saving a student...&quot;</span>);<br>  session.save(tempStudent);<br><br>  <span class="hljs-comment">//  commit transaction</span><br>  session.getTransaction().commit();<br>  System.out.println(<span class="hljs-string">&quot;Done!&quot;</span>);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>  factory.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Note:</strong> There is also a rollback method.</p><h2 id="CRUD-Features"><a href="#CRUD-Features" class="headerlink" title="CRUD Features"></a>CRUD Features</h2><h3 id="Create-and-Save"><a href="#Create-and-Save" class="headerlink" title="Create and Save"></a>Create and Save</h3><p>Stated in the last section.</p><h3 id="Primary-Keys"><a href="#Primary-Keys" class="headerlink" title="Primary Keys"></a>Primary Keys</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GeneratedValue(strategy=GenerationType.IDENTITY)</span><br></code></pre></td></tr></table></figure><h4 id="ID-Generation-Strategies"><a href="#ID-Generation-Strategies" class="headerlink" title="ID Generation Strategies"></a>ID Generation Strategies</h4><ul><li><code>GenerationType.AUTO</code></li><li><code>GenerationType.IDENTITY</code> - Most commonly used in MySQL, leverage the <strong>AUTO_INCREMENT</strong> feature of MySQL.</li><li><code>GenerationType.SEQUENCE</code></li><li><code>GenerationType.TABLE</code></li></ul><h4 id="Custom-Strategy"><a href="#Custom-Strategy" class="headerlink" title="Custom Strategy"></a>Custom Strategy</h4><ul><li>Create a implementation of <code>org.hibernate.id.IdentifierGenerator</code></li><li>Override the method: <code>public Serializable generate()</code></li></ul><h4 id="Changing-the-Starting-Index"><a href="#Changing-the-Starting-Index" class="headerlink" title="Changing the Starting Index"></a>Changing the Starting Index</h4> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> hb_student_tracker.student AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">3000</span>;<br></code></pre></td></tr></table></figure><p>The index of the object will start from 3000.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> hb_student_tracker.student;<br></code></pre></td></tr></table></figure><p>Clean up the table and the index will start from 1.</p><h3 id="Read-Objects"><a href="#Read-Objects" class="headerlink" title="Read Objects"></a>Read Objects</h3><p>Retrieve from the database using the PK.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// get a new session and start a transaction</span><br>session = factory.getCurrentSession();<br>session.beginTransaction();<br><br><span class="hljs-comment">// retrieve a student based on the PK</span><br>System.out.println(<span class="hljs-string">&quot;\nGetting Student with id: &quot;</span>+ tempStudent.getId());<br>Student myStudent = session.get(Student.class, tempStudent.getId());<br>System.out.println(<span class="hljs-string">&quot;Get Completed:&quot;</span> + myStudent);<br><br><span class="hljs-comment">// commit the transaction</span><br>session.getTransaction().commit();<br></code></pre></td></tr></table></figure><h3 id="Querying-Objects"><a href="#Querying-Objects" class="headerlink" title="Querying Objects"></a>Querying Objects</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Student&gt; theStudents = session.createQuery(<span class="hljs-string">&quot;from Student s where s.lastName = &#x27;Zhang&#x27;&quot;</span>).getResultList();<br></code></pre></td></tr></table></figure><h3 id="Update-Objects"><a href="#Update-Objects" class="headerlink" title="Update Objects"></a>Update Objects</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">session.createQuery(<span class="hljs-string">&quot;update Student set email=&#x27;dylan@gmail.com&#x27; where  firstName=&#x27;Dylan&#x27;&quot;</span>).executeUpdate();<br></code></pre></td></tr></table></figure><h3 id="Delete-Objects"><a href="#Delete-Objects" class="headerlink" title="Delete Objects"></a>Delete Objects</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// retrieve a student</span><br><span class="hljs-keyword">int</span> studentId = <span class="hljs-number">5</span>;<br>Student myStudent = session.get(Student.class, studentId);<br><br><span class="hljs-comment">// delete</span><br>session.delete(myStudent);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">session.createQuery(<span class="hljs-string">&quot;delete from Student where id=1&quot;</span>).executeUpdate();<br></code></pre></td></tr></table></figure><p class="note note-warning">  Reference: Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hibernate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring MVC</title>
    <link href="/2021/01/15/Spring-MVC/"/>
    <url>/2021/01/15/Spring-MVC/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-MVC-Overview"><a href="#Spring-MVC-Overview" class="headerlink" title="Spring MVC Overview"></a>Spring MVC Overview</h2><ul><li>Framework for building web application in Java.</li><li>Based on Model-View-Controller design pattern.</li><li>Leverages features of the Core Spring Framework (IoC, DI).</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmn55zy6bej30ji0d3wfc.jpg" alt="MVC"></p><h3 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h3><ul><li>A set of web pages to layout UI Components</li><li>A collection of Spring beans</li><li>Spring Configuration (XML, Annotations or Java)</li></ul><h3 id="Front-Controller"><a href="#Front-Controller" class="headerlink" title="Front Controller"></a>Front Controller</h3><ul><li>Known as <strong>DispatchServlet</strong></li><li>Part of the Spring Framework</li><li>Already developed by Spring Dev Team</li></ul><p>You need to create:</p><ul><li><strong>Model Objects</strong></li><li><strong>View Templates</strong></li><li><strong>Controller Classes</strong></li></ul><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><ul><li><p>Contains your business logic</p><ul><li>Handle the request</li><li>Store/Retrieve data(db, web service)</li><li>Place data in model</li></ul></li><li><p>Send to appropriate view template</p></li></ul><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><ul><li><p>Contains your data </p></li><li><p>Store/Retrieve data via backend systems</p><ul><li>Database, web service, etc…</li><li>Use a Spring bean if you like</li></ul></li><li><p>Place your data in a model</p><ul><li>Data can be Java Object or colletion.</li></ul></li></ul><p>Like your luggage.</p><h3 id="View-Template"><a href="#View-Template" class="headerlink" title="View Template"></a>View Template</h3><p>Most common is JSP and JSTL.</p><p>Developer creates a page.</p><p>Display data.</p><h2 id="Spring-MVC-Configuration-Process"><a href="#Spring-MVC-Configuration-Process" class="headerlink" title="Spring MVC Configuration Process"></a>Spring MVC Configuration Process</h2><h3 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h3><ol><li>Create a <strong>Java EE Application</strong> in IntelliJ IDEA.</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp4os0aw4j31790u0k8q.jpg" alt="Create a Java EE Application"></p><ol start="2"><li><p>Copy the two XML files to <strong>WEB-INF</strong> directory.</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp5v9xctij30k60hswg4.jpg" alt="Copy XMLs"></p></li><li><p>Open <strong>Project Structure</strong></p></li></ol><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp5ttgwqdj30iy0xa0y5.jpg" alt="Project Structure" style="zoom:33%;" /><ol start="4"><li>Add <strong>Spring Module</strong> to the project.</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp5y78hr6j31kw0t4gut.jpg" alt="Add Spring Module"></p><ol start="5"><li>Download <strong>Spring Library</strong> to the project.</li></ol><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp6164xtgj316a0qk7be.jpg" alt="Download Spring Library" style="zoom:67%;" /><ol start="6"><li>Do the same thing to the <strong>Spring MVC library. ** Click the **Apply</strong> and <strong>OK</strong>. </li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp61zqzdwj30qg0yggs9.jpg" alt="Download Spring MVC"></p><ol start="7"><li>Open the <strong>Project Structure</strong> again. Fix the problems in the <strong>Problems</strong> section. </li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp63qjuoyj31ks0go0w4.jpg" alt="Fix the Problems"></p><ol start="8"><li>Move the <strong>lib</strong> directory to the <strong>WEB-INF</strong>. Add two <strong>JSTL.jar</strong> to lib as well. </li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp64ne240j30jq0gajsv.jpg" alt="Move lib"></p><ol start="9"><li>Open <strong>Project Structure</strong> again and modify the version path of the two dependencies to <strong>./web/WEB-INF/lib</strong>. </li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp65xjei7j312e0u0ka4.jpg" alt="Change path"></p><ol start="10"><li>Create <strong>view</strong> directory.</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp670e14rj30ja0b8aax.jpg" alt="Create View dir to store the pages"></p><h3 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h3><p>Add configuration to file: <strong>WEB-INF/web.xml</strong></p><ol><li><p>Configure Spring MVC Dispatch Servlet</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp22x8dpbj30uk09cgn7.jpg" alt="Configure Dispatch Servlet"></p></li><li><p>Set up URL mappings to Spring MVC Dispatcher Servlet</p><p>For every URL coming, pass it off to the DispatchServlet.</p><blockquote><p>The Servlet-name here should match the servlet-name in the above Servlet.</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp24gdwifj30rm04wwf5.jpg"></p></li></ol><h3 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h3><p>Add configuration to <strong>servlet.xml.</strong></p><ol><li>Add support for Spring component scanning.</li></ol><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp4d1llilj30py02ygm0.jpg" alt="Add Component Scan"></p><ol start="2"><li>Add support for conversion, formatting and validation.</li></ol><p>Spring can perform conversion, and also formatting data and perform validation by adding this support.</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp4ebjjcvj30t6020gls.jpg"></p><ol start="3"><li>Configure Spring MVC View Resolver.</li></ol><p><strong>How do we display those pages? / Where are the pages located?</strong></p><p><strong>Prefix:</strong> 前缀</p><p><strong>Suffix:</strong> 后缀</p><p><strong><em>Example:</em></strong></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp4j3ai3pj311m07kqge.jpg" alt="Prefix and Suffix"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp4gl5n2fj30sk05gwfe.jpg"></p><h2 id="Create-Controllers-and-Views"><a href="#Create-Controllers-and-Views" class="headerlink" title="Create Controllers and Views"></a>Create Controllers and Views</h2><h3 id="Create-Controller-class"><a href="#Create-Controller-class" class="headerlink" title="Create Controller class"></a>Create Controller class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Annotate class with <strong>@Controller.</strong></p><p><strong>@Controller</strong> inherits from <strong>@Component</strong> and it supports scanning.</p><h3 id="Define-Controller-Methods"><a href="#Define-Controller-Methods" class="headerlink" title="Define Controller Methods"></a>Define Controller Methods</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showPage</span><span class="hljs-params">()</span></span>&#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Add-Request-Mapping-to-Controller-method"><a href="#Add-Request-Mapping-to-Controller-method" class="headerlink" title="Add Request Mapping to Controller method"></a>Add Request Mapping to Controller method</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showPage</span><span class="hljs-params">()</span></span>&#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p><code>RequestMapping()</code> annotation maps a path to this given method, so you can define any method name. </p><p>Here, this request mapping will handle all kinds of requests, including get post and so on.</p><h3 id="Return-View-Name"><a href="#Return-View-Name" class="headerlink" title="Return View Name"></a>Return View Name</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showPage</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main-menu&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Spring will find teh view page by appending the prefix and suffix. </p><p><code>WEB-INF/view/main-menu.jsp</code></p><h3 id="Develop-View-Page"><a href="#Develop-View-Page" class="headerlink" title="Develop View Page"></a>Develop View Page</h3><p><strong>main-menu.jsp</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Spring MVC Demo - Page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span> Test<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Read-Form-Data-from-Spring-MVC"><a href="#Read-Form-Data-from-Spring-MVC" class="headerlink" title="Read Form Data from Spring MVC"></a>Read Form Data from Spring MVC</h2><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmp8gb4l77j317s0m6e81.jpg" alt="Application Flow"></p><p>The browser goes to the website <code>/showForm</code>.</p><p>This goes to the HelloWorld Controller.</p><p>The main purpose of the controller is to show <code>helloworld-form.jsp</code></p><blockquote><p><strong>Key Point:</strong> use one <strong>HelloWorld Controller</strong> to process two <strong>RequestMapping</strong>s.</p></blockquote><h3 id="Development-Process"><a href="#Development-Process" class="headerlink" title="Development Process"></a>Development Process</h3><ol><li>Create Controller Class</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showPage</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;main-menu&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Show HTML form.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/showForm&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showForm</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;helloworld-form&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/processForm&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">processForm</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Process HTML form.</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Hello World - Input Form&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;processForm&quot;</span> method=<span class="hljs-string">&quot;GET&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;studentName&quot;</span> placeholder=<span class="hljs-string">&quot;What&#x27;s your name?&quot;</span>/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>/&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="Add-Data-to-Spring-Model"><a href="#Add-Data-to-Spring-Model" class="headerlink" title="Add Data to Spring Model"></a>Add Data to Spring Model</h2><h3 id="Passing-model-to-your-controller"><a href="#Passing-model-to-your-controller" class="headerlink" title="Passing model to your controller"></a><strong>Passing model to your controller</strong></h3><p>Parameters in the Controller method:</p><ul><li><p><code>HttpServletRequest</code> - Holds HTML form data</p></li><li><p><code>Model</code> - Container for your form data</p></li><li><p><code>HttpServletResponse</code></p></li></ul><h3 id="View-Template-JSP"><a href="#View-Template-JSP" class="headerlink" title="View Template - JSP"></a>View Template - JSP</h3><p>Add attribute name &amp; attribute value.</p><p><code>model.addAttribute(&quot;message&quot;, result)</code></p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>1.Build your controller method</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/processFormVersionTwo&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">letsShoutDude</span><span class="hljs-params">(HttpServletRequest request, Model model)</span></span>&#123;<br>        <span class="hljs-comment">// read the request parameter from the html form</span><br>        String theName = request.getParameter(<span class="hljs-string">&quot;studentName&quot;</span>);<br>        <span class="hljs-comment">// convert the data to all caps</span><br>        theName = theName.toUpperCase();<br>        <span class="hljs-comment">// create the msg</span><br>        String result = <span class="hljs-string">&quot;Yo! Hello! &quot;</span> + theName;<br>        <span class="hljs-comment">// add the msg to the model</span><br>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>, result);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Add the attribute to the view page.</li></ol><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;br&gt;&lt;br&gt;<br>Student Name: $&#123;param.studentName&#125;<br>&lt;br&gt;&lt;br&gt;<br>The message: $&#123;msg&#125; <br></code></pre></td></tr></table></figure><p><strong>Note:</strong>  The attribute name <code>msg</code> has to match the one in the controller method. </p><ol start="3"><li>Modify the JSP page name in the starting view page.</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;processFormVersionTwo&quot;</span> method=<span class="hljs-string">&quot;GET&quot;</span>&gt;<br> ...<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><h2 id="Request-Params-and-Request-Mappings"><a href="#Request-Params-and-Request-Mappings" class="headerlink" title="Request Params and Request Mappings"></a>Request Params and Request Mappings</h2><h3 id="Bind-Request-Params"><a href="#Bind-Request-Params" class="headerlink" title="Bind Request Params"></a>Bind Request Params</h3><p>Instead of using <code>HttpServletRequest</code> , use a different technique to read the form data. - An annotation</p><p><code>@RequestParam(&quot;paramName&quot;)</code></p><h4 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h4><p>Spring will read the param from the form request: <code>studentName</code></p><p>Bind it the the variable that is given this annotation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;..&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">letsShoutDudeTwo</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@RequestParam(&quot;studentName&quot;)</span></span></span><br><span class="hljs-function"><span class="hljs-params">  String theName,</span></span><br><span class="hljs-function"><span class="hljs-params">            Model model)</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Controller-Level-Request-Mapping"><a href="#Controller-Level-Request-Mapping" class="headerlink" title="Controller Level Request Mapping"></a>Controller Level Request Mapping</h3><p>Add a controller level mapping to resolve some mapping conflicts.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldController</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Form-Tags-and-Data-Binding"><a href="#Form-Tags-and-Data-Binding" class="headerlink" title="Form Tags and Data Binding"></a>Form Tags and Data Binding</h2><h3 id="Form-Page-Structure"><a href="#Form-Page-Structure" class="headerlink" title="Form Page Structure"></a>Form Page Structure</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  ... Regular html ...<br>  ... Spring MVC Form Tags ...<br>  ... More html ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Reference-Spring-MVC-Form-Tags"><a href="#Reference-Spring-MVC-Form-Tags" class="headerlink" title="Reference Spring MVC Form Tags"></a>Reference Spring MVC Form Tags</h3><p>Specify the namespace st beginning of the JSP file.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;<br></code></pre></td></tr></table></figure><h3 id="Text-Fields"><a href="#Text-Fields" class="headerlink" title="Text Fields"></a>Text Fields</h3><h4 id="Show-Form"><a href="#Show-Form" class="headerlink" title="Show Form"></a>Show Form</h4><p>In Spring Controller:</p><ul><li>Before showing the form, we need to add a <strong>model attribute.</strong></li><li>This is the <strong>bean</strong> that will hold form data for the <strong>data binding.</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmsgyctyimj316m0jk1kx.jpg"></p><h4 id="Development-Process-1"><a href="#Development-Process-1" class="headerlink" title="Development Process"></a>Development Process</h4><ol><li>Create the student class and generate the getters and setters.</li><li>Create the student controller class.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/student&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/showForm&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showForm</span><span class="hljs-params">(Model theModel)</span></span>&#123;<br>        <span class="hljs-comment">// create a new student object</span><br>        Student theStudent = <span class="hljs-keyword">new</span> Student();<br>        <span class="hljs-comment">// add the student object to model</span><br>        theModel.addAttribute(<span class="hljs-string">&quot;student&quot;</span>, theStudent);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;student-form&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Create the HTML form. </li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form:form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;processForm&quot;</span> <span class="hljs-attr">modelAttribute</span>=<span class="hljs-string">&quot;student&quot;</span>&gt;</span><br>    First Name : <span class="hljs-tag">&lt;<span class="hljs-name">form:input</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;firstName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    Last Name : <span class="hljs-tag">&lt;<span class="hljs-name">form:input</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;lastName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form:select</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;country&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form:options</span> <span class="hljs-attr">items</span>=<span class="hljs-string">&quot;$&#123;student.countryOptions&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form:select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form:form</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>Create form processing code.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/processForm&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">processForm</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute(&quot;student&quot;)</span> Student theStudent)</span></span>&#123;<br>        <span class="hljs-comment">// log the input data</span><br>        System.out.println(<span class="hljs-string">&quot;The Student First Name: &quot;</span> + theStudent.getFirstName() + <span class="hljs-string">&quot; &quot;</span> + theStudent.getLastName());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;student-confirmation&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>Create confirmation page.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>&lt;%-- Calls the student.getFirstName() --%&gt;<br>The Student is Confirmed: $&#123;student.firstName&#125;  $&#123;student.lastName&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>The Country: $&#123;student.country&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Use-properties-file-to-load-data"><a href="#Use-properties-file-to-load-data" class="headerlink" title="Use properties file to load data"></a>Use properties file to load data</h3><ol><li>Create a properties file to store the countries. </li></ol><p>New text file:  <code>WEB-INF/countries.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">CN</span>=<span class="hljs-string">China</span><br><span class="hljs-attr">BR</span>=<span class="hljs-string">Brazil </span><br><span class="hljs-attr">FR</span>=<span class="hljs-string">France </span><br><span class="hljs-attr">CO</span>=<span class="hljs-string">Colombia </span><br><span class="hljs-attr">IN</span>=<span class="hljs-string">India</span><br></code></pre></td></tr></table></figure><ol start="2"><li>Update header section for Spring config file. Replace the header content in the <code>spirng-mvc-demo-servlet.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/beans     </span></span><br><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/beans/spring-beans.xsd     </span></span><br><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/context     </span></span><br><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/context/spring-context.xsd     </span></span><br><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/mvc         </span></span><br><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/mvc/spring-mvc.xsd </span></span><br><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/util     </span></span><br><span class="hljs-tag"><span class="hljs-string">            http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>Load country options properties in the config file. Bean id = countryOptions</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">util:properties</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countryOptions&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:../countries.properties&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>Import the <code>java.util.Map</code> in <code>StudentController.java</code>. And inject the properties into the <code>StudentController.java</code>. </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;#&#123;countryOptions&#125;&quot;)</span><br><span class="hljs-keyword">private</span> Map&lt;String, String&gt; countryOptions; <br></code></pre></td></tr></table></figure><ol start="5"><li>Add country Options to the Spring MVC model and specify the attribute name: <strong>theCountryOptions</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// add the country options to the model </span><br>theModel.addAttribute(<span class="hljs-string">&quot;theCountryOptions&quot;</span>, countryOptions);<br></code></pre></td></tr></table></figure><ol start="6"><li>Update the JSP view page to use the model attribute for drop down list.</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form:select select path=<span class="hljs-string">&quot;country&quot;</span>&gt;<br>  &lt;form:options items=<span class="hljs-string">&quot;$&#123;countryOptions&#125;&quot;</span>/&gt;<br>&lt;/form:select&gt;<br></code></pre></td></tr></table></figure><h3 id="Radio-Buttons"><a href="#Radio-Buttons" class="headerlink" title="Radio Buttons"></a>Radio Buttons</h3><ol><li>Update HTML form.</li><li>Update Student Class - add getter and setter.</li><li>Update confirmation page.</li></ol><p><strong>Example:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Java <span class="hljs-tag">&lt;<span class="hljs-name">form:radiobutton</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;favoriteLanguage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Java&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Check-Box"><a href="#Check-Box" class="headerlink" title="Check Box"></a>Check Box</h3><p><strong>Example:</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">Linux &lt;form:checkbox path=<span class="hljs-string">&quot;operatingSystem&quot;</span> value=<span class="hljs-string">&quot;Linux&quot;</span>/&gt;<br>Mac OS &lt;form:checkbox path=<span class="hljs-string">&quot;operatingSystem&quot;</span> value=<span class="hljs-string">&quot;MacOS&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>Include <code>jstl.core.jar</code> in your lib. And display the String array using:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;c:forEach <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;temp&quot;</span> items=<span class="hljs-string">&quot;$&#123;student.operatingSystem&#125;&quot;</span>&gt;<br>        &lt;li&gt;$&#123;temp&#125;&lt;/li&gt;<br>&lt;/c:forEach&gt;<br></code></pre></td></tr></table></figure><h2 id="Spring-MVC-Form-Validation"><a href="#Spring-MVC-Form-Validation" class="headerlink" title="Spring MVC Form Validation"></a>Spring MVC Form Validation</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><h4 id="Java’-Standard-Bean-Validation-API"><a href="#Java’-Standard-Bean-Validation-API" class="headerlink" title="Java’ Standard Bean Validation API"></a>Java’ Standard Bean Validation API</h4><p>Spring supports the Bean Validation API. - Preferred method.</p><h4 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h4><ul><li>Required</li><li>Length</li><li>Numbers</li><li>Regular Expressions</li><li>Custom Validation</li></ul><h4 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h4><ul><li>@NotNull</li><li>@Min</li><li>@Max</li><li>@Size</li><li>@Pattern</li><li>@Future / @Past</li></ul><h3 id="Setup-Dev-Env"><a href="#Setup-Dev-Env" class="headerlink" title="Setup Dev Env"></a>Setup Dev Env</h3><p>Go to <a href="https://hibernate.org/">Hibernate</a> and click on <a href="https://hibernate.org/validator/">Validator</a>.</p><p>Download the zip file and unzip it.</p><p>Copy and paste the three jar files in  <code>./dist</code>  and four jar files in <code>./dist/required</code> to <code>WEB-INF/lib</code></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmsqtoztq2j30qg0gw40l.jpg" alt="Hibernate JARs"></p><h3 id="Required-Field"><a href="#Required-Field" class="headerlink" title="Required Field"></a>Required Field</h3><ol><li><p>Add validation rule to customer class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String firstName;<br><span class="hljs-meta">@NotNull(message=&quot;is required&quot;)</span><br><span class="hljs-meta">@Size(min = 1, message=&quot;is required&quot;)</span><br><span class="hljs-keyword">private</span> String lastName;<br></code></pre></td></tr></table></figure></li><li><p>Display error msg to the HTML form.</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;br&gt;&lt;br&gt;<br><span class="hljs-function">Last <span class="hljs-title">Name</span><span class="hljs-params">(*)</span>: &lt;form:input path</span>=<span class="hljs-string">&quot;lastName&quot;</span>/&gt;<br>&lt;form:errors path=<span class="hljs-string">&quot;lastName&quot;</span> cssClass=<span class="hljs-string">&quot;error&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></li><li><p>Perform validation in Controller Class. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/showForm&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">showForm</span><span class="hljs-params">(Model theModel)</span></span>&#123;<br>        theModel.addAttribute(<span class="hljs-string">&quot;customer&quot;</span>, <span class="hljs-keyword">new</span> Customer());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;customer-form&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(&quot;/processForm&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">processForm</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">            // <span class="hljs-meta">@Valid</span> performs the validation rules on customer object</span></span><br><span class="hljs-function"><span class="hljs-params">            // Results of validation placed in the Binding Result.</span></span><br><span class="hljs-function"><span class="hljs-params">            <span class="hljs-meta">@Valid</span> <span class="hljs-meta">@ModelAttribute(&quot;customer&quot;)</span> Customer theCustomer,</span></span><br><span class="hljs-function"><span class="hljs-params">            BindingResult theBindingResult)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(theBindingResult.hasErrors())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;customer-form&quot;</span>; <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;customer-confirmation&quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>Update Confirmation page.</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body&gt;<br>The Customer is Confirmed: $&#123;customer.firstName&#125;  $&#123;customer.lastName&#125;<br>&lt;br&gt;&lt;br&gt;<br></code></pre></td></tr></table></figure><h4 id="InitBinder"><a href="#InitBinder" class="headerlink" title="@InitBinder"></a>@InitBinder</h4></li></ol><p><code>@InitBinder</code> works as a pre-processor.</p><p>It will pre-process each web request to the controller. </p><p>Method with this annotation will be executed. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// add an initbinder .. to convert trim input strings.</span><br><span class="hljs-comment">// remove the leading and trailing whitespace</span><br><span class="hljs-comment">// resolve issue for our validation</span><br><span class="hljs-meta">@InitBinder</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initBinder</span><span class="hljs-params">(WebDataBinder dataBinder)</span></span>&#123;<br>    StringTrimmerEditor stringTrimmerEditor = <span class="hljs-keyword">new</span> StringTrimmerEditor(<span class="hljs-keyword">true</span>);<br>    dataBinder.registerCustomEditor(String.class, stringTrimmerEditor);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>WebDataBinder</code></li><li><code>StringTrimmerEditor</code> - A class defined in the Spring API, removes the leading and trailing white space. </li><li><code>new StringTrimmerEditor(true)</code> - Trim the String to <code>null</code> if it’s all white space.</li><li><code>dataBinder.registerCustomEditor(String.class, stringTrimmerEditor);</code> - for every String class, apply <code>StringTrimmerEditor</code> </li></ul><h3 id="Validate-Number-Range"><a href="#Validate-Number-Range" class="headerlink" title="Validate Number Range"></a>Validate Number Range</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Min(value = 0,message = &quot;must be greater than or equal to zero.&quot;)</span><br>    <span class="hljs-meta">@Max(value = 10, message = &quot;must be less than or equal to 10&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> freePasses;<br></code></pre></td></tr></table></figure><h3 id="Validate-Regular-Expression"><a href="#Validate-Regular-Expression" class="headerlink" title="Validate Regular Expression"></a>Validate Regular Expression</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pattern(regexp = &quot;^[a-zA-Z0-9]&#123;5&#125;&quot;, message = &quot;only 5 chars/digits&quot;)</span><br>    <span class="hljs-keyword">private</span> String postalCode;<br></code></pre></td></tr></table></figure><h4 id="How-to-make-the-Integer-Field-required"><a href="#How-to-make-the-Integer-Field-required" class="headerlink" title="How to make the Integer Field required"></a>How to make the Integer Field required</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Integer freePasses;<br></code></pre></td></tr></table></figure><p><strong>Solution:</strong> Convert the int variable to <code>Integer</code>, otherwise there will be a conversion error,</p><p>The trimmer will trime the string to null string if it is all white spaces, so the string cannot be converted directly to primitive type <code>int</code>, and we should use <code>Integer</code> type, which can be converted from the <code>String</code> type.</p><h4 id="How-to-handle-String-input-for-Integer-Field"><a href="#How-to-handle-String-input-for-Integer-Field" class="headerlink" title="How to handle String input for Integer Field"></a>How to handle String input for Integer Field</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmtryea3qvj312y0cawg6.jpg" alt="Problem"></p><h5 id="Process-1"><a href="#Process-1" class="headerlink" title="Process"></a>Process</h5><ol><li><p>Create custom error message.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">typeMismatch.customer.freePasses</span>=<span class="hljs-string">Invalid Number</span><br></code></pre></td></tr></table></figure><p>Create a folder <code>resources</code> under <code>src</code> path, and create a <code>message.properties</code> file. </p></li><li><p>Load custom error message to the spring-servlet.xml config file.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Load custom message resources--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;messageSource&quot;</span><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.context.support.ResourceBundleMessageSource&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basenames&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;resources.message&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="Deep-Dive"><a href="#Deep-Dive" class="headerlink" title="Deep Dive"></a>Deep Dive</h5></li></ol><p>Below is the <code>BindingResult</code> with Error Msg:</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">Binding Result: org.springframework.validation.BeanPropertyBindingResult: <span class="hljs-number">1</span> <span class="hljs-literal">error</span><br>Field <span class="hljs-literal">error</span> <span class="hljs-keyword">in</span> object <span class="hljs-symbol">&#x27;customer</span>&#x27; <span class="hljs-keyword">on</span> field <span class="hljs-symbol">&#x27;freePasses</span>&#x27;: rejected value [dfsdsfadf]; codes [typeMismatch.customer.freePasses,typeMismatch.freePasses,typeMismatch.java.lang.<span class="hljs-built_in">Integer</span>,typeMismatch]; arguments [org.springframework.<span class="hljs-keyword">context</span>.support.DefaultMessageSourceResolvable: codes [customer.freePasses,freePasses]; arguments []; <span class="hljs-keyword">default</span> message [freePasses]]; <span class="hljs-keyword">default</span> message [Failed <span class="hljs-keyword">to</span> convert <span class="hljs-keyword">property</span> value <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span> <span class="hljs-symbol">&#x27;java</span>.lang.<span class="hljs-built_in">String</span>&#x27; <span class="hljs-keyword">to</span> required <span class="hljs-keyword">type</span> <span class="hljs-symbol">&#x27;java</span>.lang.<span class="hljs-built_in">Integer</span>&#x27; <span class="hljs-keyword">for</span> <span class="hljs-keyword">property</span> <span class="hljs-symbol">&#x27;freePasses</span>&#x27;; nested exception <span class="hljs-keyword">is</span> java.lang.NumberFormatException: <span class="hljs-keyword">For</span> input <span class="hljs-built_in">string</span>: <span class="hljs-string">&quot;dfsdsfadf&quot;</span>]<br></code></pre></td></tr></table></figure><p>According the Error Msg, we can custom different <code>typeMismatch</code> in the <code>messages.properties</code>:</p><ul><li><code>typeMismatch.customer.freePasses</code></li><li><code>typeMismatch.freePasses</code></li><li><code>typeMismatch.java.lang.Integer</code></li><li><code>typeMismatch</code></li><li>…</li></ul><h3 id="Custom-Validation"><a href="#Custom-Validation" class="headerlink" title="Custom Validation"></a>Custom Validation</h3><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><ul><li>Course Code must start with “LUV”</li><li>Spring MVC calls the custom validation</li><li>The validation returns a boolean value for pass or fail (T/F)</li></ul><h4 id="Custom-Java-Annotation"><a href="#Custom-Java-Annotation" class="headerlink" title="Custom Java Annotation"></a>Custom Java Annotation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CourseCode(value=&quot;LUV&quot;, message=&quot;must start with LUV&quot;)</span><br></code></pre></td></tr></table></figure><h4 id="Process-2"><a href="#Process-2" class="headerlink" title="Process"></a>Process</h4><ol><li><p>Create <strong>@CourseCode</strong> annotation.</p><ul><li>Some annotations of the custome Annotation.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Constraint(validatedBy = CourseCodeConstraintValidator.class)</span><br></code></pre></td></tr></table></figure><p><code>CourseCodeConstraintValidator</code> - Helper class that contains business rules or validation logic.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD &#125;)</span> <br></code></pre></td></tr></table></figure><p>Can apply our annotation to a method or a field.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span> <br></code></pre></td></tr></table></figure><p>Retain this annotation in the Java class file. Process it at runtime.</p><ul><li>Define attribtues and set default values.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// define default course code</span><br> <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;LUV&quot;</span>;<br> <span class="hljs-comment">// define the default error msg</span><br> <span class="hljs-function">String <span class="hljs-title">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;Must start with LUV&quot;</span>;<br> <span class="hljs-comment">// define default groups</span><br> Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br> <span class="hljs-comment">// define default payloads</span><br> Class&lt;? extends Payload&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br></code></pre></td></tr></table></figure></li><li><p>Develop <strong>CourseCodeConstraintValidator</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CourseCodeConstraintValidator</span></span><br><span class="hljs-class">        <span class="hljs-keyword">implements</span> <span class="hljs-title">ConstraintValidator</span>&lt;<span class="hljs-title">CourseCode</span>, <span class="hljs-title">String</span>&gt; </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>CourseCode</code> - Annotation Name</li><li><code>String</code> - Type of data to validate against</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> String coursePrefix;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(CourseCode theCourseCode)</span> </span>&#123;<br>       coursePrefix = theCourseCode.value();<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String theCode, ConstraintValidatorContext theConstraintValidatorContext)</span> </span>&#123;<br>      <span class="hljs-keyword">if</span>(theCode != <span class="hljs-keyword">null</span>)&#123;<br>          <span class="hljs-keyword">return</span> theCode.startsWith(coursePrefix);<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><ul><li><p>Spring MVC will call the <code>isValid()</code> method at runtime. </p></li><li><p><code>theCode</code> - HTML form data entered by the user.</p></li><li><p><code>ConstraintValidatorContext</code> - Helper class for additional error messages.</p></li><li><p>Method Body - Validation logic - Test if the form data starts with the provided course prefix.</p></li></ul></li></ol><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configure with Java Code</title>
    <link href="/2021/01/13/Configure-with-Java-Code/"/>
    <url>/2021/01/13/Configure-with-Java-Code/</url>
    
    <content type="html"><![CDATA[<h2 id="Configure-with-Java-Code"><a href="#Configure-with-Java-Code" class="headerlink" title="Configure with Java Code"></a>Configure with Java Code</h2><ol><li>Create a Java Class and annotate as <strong>@Configuration</strong></li><li>Add Component scanning support: <strong>@ComponentScan</strong> (Optional)</li><li>Read Spring Java configuration class</li><li>Retrieve bean from Spring container</li></ol><h3 id="Define-Beans-with-Java-Code"><a href="#Define-Beans-with-Java-Code" class="headerlink" title="Define Beans with Java Code"></a>Define Beans with Java Code</h3><ol><li>Define method to expose bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Define bean for our sad fortune service</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FortuneService <span class="hljs-title">sadFortuneService</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// method name is the BeanId</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SadFortuneService();<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Injection bean dependencies</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-comment">// Define bean for swim coach and inject dependency</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Coach <span class="hljs-title">swimCoach</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">// injection sadFortuneService to the swim coach as a dependency.</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SwimCoach(sadFortuneService());<br>   &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>Read Spring Java Configuration class</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// read spring config java class</span><br>        AnnotationConfigApplicationContext context =<br>                <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SportConfig.class);<br></code></pre></td></tr></table></figure><ol start="4"><li>Retrieve bean from Spring container</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// get the bean from spring container</span><br>        Coach theCoach = context.getBean(<span class="hljs-string">&quot;swimCoach&quot;</span>, Coach.class);<br></code></pre></td></tr></table></figure><h3 id="How-Bean-works-behind-the-scenes"><a href="#How-Bean-works-behind-the-scenes" class="headerlink" title="How @Bean works behind the scenes"></a>How @Bean works behind the scenes</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span> <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Coach <span class="hljs-title">swimCoach</span><span class="hljs-params">()</span> </span>&#123;   <br>   SwimCoach mySwimCoach = <span class="hljs-keyword">new</span> SwimCoach();   <br>   <span class="hljs-keyword">return</span> mySwimCoach; <br>  &#125;<br></code></pre></td></tr></table></figure><ol><li><code>@Bean</code> - The <code>@Bean</code> annotation tells Spring that we are creating a bean component manually. The default scope is singleton. </li><li><code>public Coach swimCoach() &#123;  </code> - This specifies that the bean will bean id of “swimCoach”.  The return type is the Coach interface. This can help Spring find any dependencies that implement the Coach interface.</li><li><code> SwimCoach mySwimCoach = new SwimCoach();  </code> - This code will create a new instance of the SwimCoach.</li><li><code>return mySwimCoach;</code> - This code return a instance of the swimCoach.</li></ol><p>This code is only executed once during the initial bean creation since it is singleton scope.</p><h3 id="Inject-Value-from-a-Properties-File"><a href="#Inject-Value-from-a-Properties-File" class="headerlink" title="Inject Value from a Properties File"></a>Inject Value from a Properties File</h3><ol><li>Create Properties File </li><li>Load Properties File in Spring config</li><li>Reference value from Properties File</li></ol><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Bean Scopes and Lifecycle</title>
    <link href="/2021/01/13/SpringBeanScopesAndLifecycle/"/>
    <url>/2021/01/13/SpringBeanScopesAndLifecycle/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-Bean-Scopes-and-Lifecycle"><a href="#Spring-Bean-Scopes-and-Lifecycle" class="headerlink" title="Spring Bean Scopes and Lifecycle"></a>Spring Bean Scopes and Lifecycle</h2><h3 id="Bean-Scopes"><a href="#Bean-Scopes" class="headerlink" title="Bean Scopes"></a>Bean Scopes</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myCoach&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.luv2code.spring.demo.TrackCoach&quot;</span> </span><br><span class="hljs-tag">      <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Singleton-Default"><a href="#Singleton-Default" class="headerlink" title="Singleton - Default"></a>Singleton - Default</h4><ul><li>The Spring Container only creates only one instance of the bean.</li><li>It’s cached in memory.</li><li>All requests for the bean - will return a shared reference to the <strong>SAME</strong> bean.</li></ul><h4 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h4><p>Creates a new bean instance for each container request.</p><h3 id="Bean-Lifecycle"><a href="#Bean-Lifecycle" class="headerlink" title="Bean Lifecycle"></a>Bean Lifecycle</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmkjeiuc4lj30tw0f3dhu.jpg" alt="Bean Lifecycle"></p><h4 id="Custom-methods"><a href="#Custom-methods" class="headerlink" title="Custom methods"></a>Custom methods</h4><ol><li><p>Defining init and destroy methods</p></li><li><p>Configure the method names in Spring config file</p></li></ol><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Configure with Java Annotations</title>
    <link href="/2021/01/12/Configure-with-Java-Annotations/"/>
    <url>/2021/01/12/Configure-with-Java-Annotations/</url>
    
    <content type="html"><![CDATA[<h2 id="Java-Annotations"><a href="#Java-Annotations" class="headerlink" title="Java Annotations"></a>Java Annotations</h2><p>Meta-data about the class.</p><p>Processed aannotations at compile time and run time.</p><h2 id="Inversion-of-Control"><a href="#Inversion-of-Control" class="headerlink" title="Inversion of Control"></a>Inversion of Control</h2><h3 id="Development-Process"><a href="#Development-Process" class="headerlink" title="Development Process"></a>Development Process</h3><ol><li><p>Enable component canning in Spring config file</p><p>Spring will scan the package recursively.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.luv2code.annotations&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Add the @Component Annotation to your Java class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span> <span class="hljs-comment">// use Default Bean Name</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TennisCoach</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Retrieve bean from Spring container.</p><p>Same as before.</p></li></ol><h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><h3 id="AutoWiring"><a href="#AutoWiring" class="headerlink" title="AutoWiring"></a>AutoWiring</h3><p>Spring wil look for a class that <em>matches</em> the property.</p><blockquote><p>Match by type: Class or Interface</p></blockquote><p>Spring will inject it automatically.</p><hr><h4 id="Constructor-Injection"><a href="#Constructor-Injection" class="headerlink" title="Constructor Injection"></a>Constructor Injection</h4><h5 id="Define-a-dependency-interface-and-class"><a href="#Define-a-dependency-interface-and-class" class="headerlink" title="Define a dependency interface and class"></a>Define a dependency interface and class</h5><p>Define <code>FortuneService</code> interface and <code>BadFortuneService</code> Class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BadFortuneService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FortuneService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getFortune</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Today is your bad day!&#x27;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Create-a-constructor-for-injections"><a href="#Create-a-constructor-for-injections" class="headerlink" title="Create a constructor for injections"></a>Create a constructor for injections</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TennisCoach</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Coach</span> </span>&#123;<br>    <span class="hljs-comment">// constructor injection</span><br>    <span class="hljs-keyword">private</span> FortuneService fortuneService;<br>    <span class="hljs-comment">// Spring will scan for a component that implements the fortuneService interface.</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-title">TennisCoach</span><span class="hljs-params">(FortuneService theFortuneService)</span></span>&#123;<br>        fortuneService = theFortuneService;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDailyWorkout</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Practice your back hand volley&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getDailyFortune</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> fortuneService.getFortune();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Configure-with-Autowired-annotation"><a href="#Configure-with-Autowired-annotation" class="headerlink" title="Configure with @Autowired annotation"></a>Configure with @Autowired annotation</h5><p>Add <code>@Autowired</code> annotation to the constructor.</p><hr><h4 id="Setter-Injection"><a href="#Setter-Injection" class="headerlink" title="Setter Injection"></a>Setter Injection</h4><ol><li><p>Create setter methods in your class for injections.</p></li><li><p>Configure the dependency injection with Autowired  Annotation.</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFortuneService</span><span class="hljs-params">(FortuneService theFortuneService)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;&gt;&gt; TennisCoach : inside setFortuneService() method!&quot;</span>);<br>        fortuneService = theFortuneService;<br>    &#125;<br></code></pre></td></tr></table></figure><hr><h4 id="Method-Injection"><a href="#Method-Injection" class="headerlink" title="Method Injection"></a>Method Injection</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomeCrazyStuff</span><span class="hljs-params">(FortuneService theFortuneService)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;&gt;&gt; TennisCoach : inside doSomeCrazyStuff() method!&quot;</span>);<br>        fortuneService = theFortuneService;<br>    &#125;<br></code></pre></td></tr></table></figure><hr><h4 id="Field-Injection"><a href="#Field-Injection" class="headerlink" title="Field Injection"></a>Field Injection</h4><ol><li>Configure the dependency injection with <code>@Autowired</code> , no need for setter method. </li><li>Directly set the <code>@Autowired</code> annotation to the field. Spring will injection the <code>FortuneService</code> implementation directly to the class, using Java technology called Reflection.</li></ol><h4 id="Which-injection-should-I-use"><a href="#Which-injection-should-I-use" class="headerlink" title="Which injection should I use?"></a>Which injection should I use?</h4><p>Choose a style and stay consistent in your project.</p><h3 id="Qualifiers-for-Dependency-Injection"><a href="#Qualifiers-for-Dependency-Injection" class="headerlink" title="Qualifiers for Dependency Injection"></a>Qualifiers for Dependency Injection</h3><ul><li>What if there is more than one implemetations to choose when injecting?</li><li>Use the <code>@Qualifier</code> with the <strong>Default Name</strong> of the implementation.</li><li>For example, Class Name is <code>HappyFortuneService</code>, then the Default Name should be <code>happyFortuneService</code>.</li></ul><blockquote><p>You can use <code>@Qualifier</code> to all kinds of injections.</p></blockquote><h2 id="Bean-Scope-and-Lifecycle"><a href="#Bean-Scope-and-Lifecycle" class="headerlink" title="Bean Scope and Lifecycle"></a>Bean Scope and Lifecycle</h2><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p><code>@Scope(&quot;Singleton&quot;) </code></p><p><code>@Scope(&quot;Prototype&quot;)</code></p><h3 id="Lifecycle-Methods"><a href="#Lifecycle-Methods" class="headerlink" title="Lifecycle Methods"></a>Lifecycle Methods</h3><ol><li>Define your methods for initialization and destroy.</li></ol><p><code>@PostConstruct</code></p><p><code>@PreDestroy</code></p><ol start="2"><li>Add Annotations to these methods.</li></ol><p><strong>Note: For “prototype” scoped beans, Spring does not call the @PreDestroy method. Gasp!</strong></p><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dependency Injection - XML Configuration</title>
    <link href="/2021/01/06/Dependency-Injection-XML-Configuration/"/>
    <url>/2021/01/06/Dependency-Injection-XML-Configuration/</url>
    
    <content type="html"><![CDATA[<h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><p>Dependency = Helper</p><h3 id="How-Spring-Processes-the-Config-File"><a href="#How-Spring-Processes-the-Config-File" class="headerlink" title="How Spring Processes the Config  File"></a>How Spring Processes the Config  File</h3><p><img src="/img/howProcessConfigFile.png" alt="How Spring processes Config File"></p><h3 id="Injection-Types"><a href="#Injection-Types" class="headerlink" title="Injection Types"></a>Injection Types</h3><h4 id="Constructor-Injection"><a href="#Constructor-Injection" class="headerlink" title="Constructor Injection"></a>Constructor Injection</h4><h5 id="1-Define-the-dependency-interface-and-class"><a href="#1-Define-the-dependency-interface-and-class" class="headerlink" title="1. Define the dependency interface and class"></a>1. Define the dependency interface and class</h5><p><img src="/img/DI-interface.png" alt="Dependency Injection Interface"></p><p><img src="/img/DI-class.png" alt="Dependency Injection Class"></p><h5 id="2-Create-a-constructor-in-your-class-for-injections"><a href="#2-Create-a-constructor-in-your-class-for-injections" class="headerlink" title="2. Create a constructor in your class for injections"></a>2. Create a constructor in your class for injections</h5><p><img src="/img/createConstructor.png" alt="Create Constructor"></p><h5 id="3-Configure-the-dependency-injection-in-Spring-Config-File"><a href="#3-Configure-the-dependency-injection-in-Spring-Config-File" class="headerlink" title="3. Configure the dependency injection in Spring Config File"></a>3. Configure the dependency injection in Spring Config File</h5><p><img src="/img/setupConfigforDI.png" alt="Set up Config File for DI"></p><h4 id="Setter-Injection"><a href="#Setter-Injection" class="headerlink" title="Setter Injection"></a>Setter Injection</h4><p>Inject Dependencies by calling setter methods.</p><h5 id="1-Create-setter-methods-in-your-class-for-injections"><a href="#1-Create-setter-methods-in-your-class-for-injections" class="headerlink" title="1.Create setter methods in your class for injections"></a>1.Create setter methods in your class for injections</h5><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmkd5lq6rgj30lp03waag.jpg" alt="Create Setter Method"></p><h5 id="2-Configure-the-dependency-injection-in-Spring-config-file"><a href="#2-Configure-the-dependency-injection-in-Spring-config-file" class="headerlink" title="2. Configure the dependency injection in Spring config file"></a>2. Configure the dependency injection in Spring config file</h5><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmkd5png8cj30mf0dgdhl.jpg" alt="Config File"></p><h5 id="SetterDemo"><a href="#SetterDemo" class="headerlink" title="SetterDemo"></a>SetterDemo</h5><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmkdvlwe3zj30nj07a754.jpg" alt="Setter Demo"></p><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>For the CricketCoach example with Setter Injection, why do we use the CricketCoach class instead of the Coach interface?</p><h4 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h4><p>When you retrieve a bean from the Spring container using the Coach interface:</p><p>  <code>Coach theCricketCoach = context.getBean(&quot;myCricketCoach&quot;, Coach.class);</code> </p><p>You only have access to the methods defined in the Coach interface: getDailyWorkout and getDailyFortune. Even though the actual implementation has additional methods, you only have visibility to methods that are defined at the Coach interface level.</p><p>When you retrieve a bean from the Spring container using the CricketCoach class:</p><p>  <code>CricketCoach theCricketCoach = context.getBean(&quot;myCricketCoach&quot;, CricketCoach.class);</code> </p><p>You have access to the methods defined in the Coach interface: getDailyWorkout and getDailyFortune.</p><p>ALSO, you have access to the additional methods defined in the CricketCoach class: getTeam, setTeam.</p><h2 id="Injecting-Values-from-Properties-File"><a href="#Injecting-Values-from-Properties-File" class="headerlink" title="Injecting Values from Properties File"></a>Injecting Values from Properties File</h2><h4 id="1-Create-Properties-File"><a href="#1-Create-Properties-File" class="headerlink" title="1. Create Properties File"></a>1. Create Properties File</h4><p>Create file <code>sport.properties</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">foo.email</span>=test@gmail.com<br><span class="hljs-attr">foo.team</span>=Royal Challenger Bangalore<br></code></pre></td></tr></table></figure><h4 id="2-Load-Properties-File-in-Spring-Config-File"><a href="#2-Load-Properties-File-in-Spring-Config-File" class="headerlink" title="2. Load Properties File in Spring Config File"></a>2. Load Properties File in Spring Config File</h4><p>Load properties in <code>applicationContext.xml</code> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&#x27;classpath:sport.properties&#x27;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-Reference-values-from-Properties-File"><a href="#3-Reference-values-from-Properties-File" class="headerlink" title="3. Reference values from Properties File"></a>3. Reference values from Properties File</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;emailAddress&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;foo.email&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;team&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;foo.team&#125;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Inversion of Control - XML Configuration</title>
    <link href="/2021/01/06/Inversion-of-Control-XML-Configuration/"/>
    <url>/2021/01/06/Inversion-of-Control-XML-Configuration/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-Container-Functions"><a href="#Spring-Container-Functions" class="headerlink" title="Spring Container Functions"></a>Spring Container Functions</h2><ul><li>Inversion of Control - <strong>Create and Manage Objects</strong></li><li>Dependency Injection - <strong>Inject object’s dependencies</strong></li></ul><h2 id="Configuring-Spring-Container"><a href="#Configuring-Spring-Container" class="headerlink" title="Configuring Spring Container"></a>Configuring Spring Container</h2><ul><li>XML Configuratiion file</li><li>Java annotations</li><li>Java Source Code</li></ul><h2 id="Inversion-of-Control-XML-Configuration"><a href="#Inversion-of-Control-XML-Configuration" class="headerlink" title="Inversion of Control - XML Configuration"></a>Inversion of Control - XML Configuration</h2><h3 id="Spring-Development-Process"><a href="#Spring-Development-Process" class="headerlink" title="Spring Development Process"></a>Spring Development Process</h3><div class="note note-warning">            <p><strong>What is a Spring Bean?</strong></p><p>A “Spring Bean” is simply a Java object.</p><p>When Java objects are created by the Spring Container, then Spring refers to them as “Spring Beans”.</p><p>Spring Beans are created from normal Java classes …. just like Java objects.</p>          </div><h4 id="1-Configure-your-Spring-Beans"><a href="#1-Configure-your-Spring-Beans" class="headerlink" title="1. Configure your Spring Beans"></a>1. Configure your Spring Beans</h4><p>Create a bean and give an <code>id</code> to it as an alias. </p><p>Then specify the classname of the implementation class.</p><p><img src="/img/configBeans.png" alt="Config Beans"></p><h4 id="2-Create-a-Spring-Container"><a href="#2-Create-a-Spring-Container" class="headerlink" title="2. Create a Spring Container"></a>2. Create a Spring Container</h4><ol><li>Load the spring configuration file</li><li>Retrieve the bean from the container.</li><li>Call methods in the bean.</li><li>Close the context.</li></ol><p><img src="/img/createContextContainer.png" alt="Create a Spring Container"></p><h4 id="3-Retrieve-Beans-from-Spring-Container"><a href="#3-Retrieve-Beans-from-Spring-Container" class="headerlink" title="3. Retrieve Beans from Spring Container"></a>3. Retrieve Beans from Spring Container</h4><p>Mentioned above.</p><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Setup Spring Environment</title>
    <link href="/2021/01/05/envSetup/"/>
    <url>/2021/01/05/envSetup/</url>
    
    <content type="html"><![CDATA[<h2 id="Setup-Spring-Environment"><a href="#Setup-Spring-Environment" class="headerlink" title="Setup Spring Environment"></a>Setup Spring Environment</h2><h3 id="1-Install-Tomcat9-0"><a href="#1-Install-Tomcat9-0" class="headerlink" title="1. Install Tomcat9.0"></a>1. Install Tomcat9.0</h3><p>Download Tomcat9.0 from <a href="https://tomcat.apache.org/download-90.cgi">here</a>.</p><p><img src="/img/tomcatInstall.png" alt="Install Tomcat"></p><h4 id="Start-Server"><a href="#Start-Server" class="headerlink" title="Start Server"></a>Start Server</h4><p><code>cd /tomcat &amp;&amp; bin/startup.sh</code></p><h4 id="Shutdown-Server"><a href="#Shutdown-Server" class="headerlink" title="Shutdown Server"></a>Shutdown Server</h4><p><code>cd /tomcat &amp;&amp; bin/shutdown.sh</code></p><h3 id="2-Install-IntelliJ-IDEA"><a href="#2-Install-IntelliJ-IDEA" class="headerlink" title="2. Install IntelliJ IDEA"></a>2. Install IntelliJ IDEA</h3><h3 id="3-Connect-Tomcat-to-IntelliJ-IDEA"><a href="#3-Connect-Tomcat-to-IntelliJ-IDEA" class="headerlink" title="3. Connect Tomcat to IntelliJ IDEA"></a>3. Connect Tomcat to IntelliJ IDEA</h3><ol><li><p>Open Preference.</p></li><li><p>Click on <code>Build, Execution, Deployment</code></p><p><img src="/img/connectTomcatAndIdea.png" alt="Connect Tomcat to Idea"></p></li><li><p>Choose <code>Tomcat Server</code></p></li><li><p>Select the path of downloaded Tomcat Server.</p></li><li><p>Done.</p></li></ol><h3 id="4-Download-Spring-5-JAR-Files"><a href="#4-Download-Spring-5-JAR-Files" class="headerlink" title="4. Download Spring 5 JAR Files"></a>4. Download Spring 5 JAR Files</h3><ol><li>Create a project. </li><li>Choose <strong>Spring</strong> and click on <code>Next</code>.</li></ol><p><img src="/img/downloadJARFiles.png" alt="Create a Spring Project"></p><ol start="3"><li>Select the project path and click on <code>Finish</code>.</li></ol><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Environment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>J2EE and Spring Overview</title>
    <link href="/2021/01/05/J2EE&amp;Spring/"/>
    <url>/2021/01/05/J2EE&amp;Spring/</url>
    
    <content type="html"><![CDATA[<h2 id="What-is-Java-EE"><a href="#What-is-Java-EE" class="headerlink" title="What is Java EE?"></a>What is Java EE?</h2><p><strong>J2EE - Java 2 Platform Enterprise Edition</strong></p><pre><code class=" mermaid">graph TB    A[Client-Side Presentation] --&gt; B[Server-Side Presentation];    B --&gt; C[Server-Side Business Logic];    C --&gt; D[Database]; </code></pre><h2 id="Overview-of-Spring"><a href="#Overview-of-Spring" class="headerlink" title="Overview of Spring"></a>Overview of Spring</h2><h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><ul><li>Lightweight development with Java POJO(Plain-Old-Java-Objects)</li><li>Dependency injection to promote loose coupling </li><li>Declarative programming with Aspect-Oriented-Programming</li><li>Minimize boilerplate Java Code</li></ul><h3 id="Spring-Core-Framework"><a href="#Spring-Core-Framework" class="headerlink" title="Spring Core Framework"></a>Spring Core Framework</h3><h3 id="Core-Container"><a href="#Core-Container" class="headerlink" title="Core Container"></a>Core Container</h3><p>Creating beans and making these beans available.</p><ul><li>Bean Factory - Create Beans and manage beans</li><li>Context - Spring Container that holds the beans in memory.</li><li>SpEL - Spring Expression Language</li></ul><h3 id="AOP-Section"><a href="#AOP-Section" class="headerlink" title="AOP Section"></a>AOP Section</h3><p><strong>AOP:</strong> Aspect Oriented Programming</p><p>Allows you to create application-wide services. </p><p>Add functionality to object without modifying your code using <code>config</code> file or by adding annotations.</p><blockquote><p>Logging, security, transactions, etc..</p></blockquote><h3 id="Data-Access-Layer"><a href="#Data-Access-Layer" class="headerlink" title="Data Access Layer"></a>Data Access Layer</h3><ul><li>JDBC - helper classes</li><li>ORM - Objection Relational Mapping - hook in to Hibernate</li><li>Transactions - Add transaction support   </li><li>JMS - Java Message Service - Send msgs to a msg queue in a asych way.</li></ul><h3 id="Web-Layer"><a href="#Web-Layer" class="headerlink" title="Web Layer"></a>Web Layer</h3><p>Home of the Spring MVC framework</p><h3 id="Test-Layer"><a href="#Test-Layer" class="headerlink" title="Test Layer"></a>Test Layer</h3><p>Supports <strong>Test-Driven-Development</strong></p><p>Mock objects and out-of-container testing.</p><p>Integration test as well.</p><h2 id="Spring-Projects"><a href="#Spring-Projects" class="headerlink" title="Spring Projects"></a>Spring Projects</h2><p>Additional modules built on top of the core Spring Framework.</p><ul><li>Spring Cloud, Spring Data</li><li>Spring Web Service - RESTful </li></ul><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 集合类</title>
    <link href="/2020/10/20/java%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    <url>/2020/10/20/java%E9%9B%86%E5%90%88%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA-集合类"><a href="#JAVA-集合类" class="headerlink" title="JAVA 集合类"></a>JAVA 集合类</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JAVA中集合类主要负责保存数据。所有的集合类都位于 <code>java.util</code> 包下。Java容器类类库主要用于保存<strong>对象</strong>。主要有两大分支。</p><ul><li><p>Collection —— 容器的每个位置只能保存一个元素。</p><p>一组对立的元素。通常Collection中的元素都符合某种规则。</p><ul><li>List必须保持一定的顺序。</li><li>Set的元素不能重复。</li><li>Queue保持队列FIFO原则。</li></ul></li><li><p>Map —— 容器的每个位置保存一个<strong>键值对</strong>，通过键找到对应的值。</p><ul><li>一组成对的<strong>键值对</strong>对象。</li></ul></li></ul><p><img src="/img/java.jpg"></p><h2 id="MAP-集合类"><a href="#MAP-集合类" class="headerlink" title="MAP 集合类"></a>MAP 集合类</h2><p><img src="/img/map.jpg" alt="Map"></p><h3 id="Entry类"><a href="#Entry类" class="headerlink" title="Entry类"></a>Entry类</h3><p>Map中包含一个内部类<code>Entry</code>。该类中包含了一个<strong>key - value</strong> 的键值对。其中包含了三个方法。</p><table><thead><tr><th>方法名称</th><th>方法解释</th></tr></thead><tbody><tr><td>getKey()</td><td>获取该entry的Key。</td></tr><tr><td>getValue()</td><td>获取该entry的Value。</td></tr><tr><td>setValue()</td><td>设置该Entry的Value并且返回新的Value。</td></tr></tbody></table><p>Map是一个顶级接口。主要包括几个方法。</p><h3 id="覆盖方法-amp-更新方法"><a href="#覆盖方法-amp-更新方法" class="headerlink" title="覆盖方法 &amp; 更新方法"></a>覆盖方法 &amp; 更新方法</h3><table><thead><tr><th>方法名称</th><th align="left">方法解释</th></tr></thead><tbody><tr><td>equals(Object o)</td><td align="left">比较对象和该map是否等价</td></tr><tr><td>hashCode()</td><td align="left">返回当前map的哈希码</td></tr><tr><td>clear()</td><td align="left">删除所有映射</td></tr><tr><td>remove(Object key)</td><td align="left">从Map中删除一堆键值</td></tr><tr><td>put(Object key, Object value)</td><td align="left">从Map中删除所有映射</td></tr><tr><td>putAll(Map t)</td><td align="left">将指定Map中所有映射复制到此</td></tr></tbody></table><h3 id="返回视图的方法-amp-遍历Map"><a href="#返回视图的方法-amp-遍历Map" class="headerlink" title="返回视图的方法 &amp; 遍历Map"></a>返回视图的方法 &amp; 遍历Map</h3><table><thead><tr><th>方法名</th><th>方法解释</th></tr></thead><tbody><tr><td>entrySet()</td><td>返回Map中所包含的所有映射的Set视图。每一个元素都是Map.Entry对象：可以使用getKey() 和 getValue()的方法访问键和值。</td></tr><tr><td>keySet()</td><td>返回Map中所有键的Set视图。删除Set中的元素时将会删除Map中相应的映射。</td></tr><tr><td>values()</td><td>返回Map中所有值的Collection视图。删除Collection中的元素时将会删除Map中相应的映射。</td></tr></tbody></table><p>如果要对键值对进行迭代，必须获得一个Iterator对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator keyValuePairs = aMap.entrySet().iterator();<br>Iterator keys = aMap.keySet().iterator();<br>Iterator values = aMap.values().iterator();<br></code></pre></td></tr></table></figure><h3 id="访问和测试方法"><a href="#访问和测试方法" class="headerlink" title="访问和测试方法"></a>访问和测试方法</h3><p>只检索Map的内容信息但是不更改Map的内容。</p><table><thead><tr><th>方法名</th><th>方法解释</th></tr></thead><tbody><tr><td>get(Object key)</td><td>返回与key关联的value</td></tr><tr><td>containsKey(Object key)</td><td>如果包含指定的key则返回True</td></tr><tr><td>containsValue(Obejct value)</td><td>如果存在指定的value则返回True</td></tr><tr><td>isEmpty()</td><td>是否为空</td></tr><tr><td>size()</td><td>key-value的数目</td></tr></tbody></table><h3 id="HashMap-和-Hashtable"><a href="#HashMap-和-Hashtable" class="headerlink" title="HashMap 和 Hashtable"></a>HashMap 和 Hashtable</h3><p><strong>HASHMAP用的多！！！</strong></p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ol><li>HashMap不是<strong>线程安全</strong>的，<strong>Hashtable线程安全</strong> —— 通过synchronize实现。</li><li>效率：HashMap &gt; Hashtable</li><li>HashMap的key可以为<code>NULL</code>，Hashtable不可以。</li></ol><p>判断两个Key相同的标准为：两个Key通过equals方法比较后返回True，两个key的HashCode值相等。</p><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>它是HashMap的子类，通过双向链表维护键值对的顺序。该双向链表负责维护Map的迭代顺序，与key-value的插入顺序保持一致。</p><h4 id="HashMap功能实现"><a href="#HashMap功能实现" class="headerlink" title="HashMap功能实现"></a>HashMap功能实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String [] args)</span></span>&#123;<br>        Map&lt;Integer, String&gt; hMap = <span class="hljs-keyword">new</span> HashMap&lt;Integer, String&gt;();<br>        <span class="hljs-comment">// 将一个接口的引用指向一个实现接口的类。</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        hMap.put(<span class="hljs-number">101</span>, <span class="hljs-string">&quot;序号 &quot;</span>+<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">50</span>)&#123;<br>            hMap.put(i, <span class="hljs-string">&quot;序号 &quot;</span> + i);<br>            i++;<br>        &#125;<br>        hMap.put(-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;序号 &quot;</span> + <span class="hljs-number">199</span>);<br>        hMap.put(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;序号 &quot;</span> + <span class="hljs-number">199</span>);<br><br>        <span class="hljs-comment">// No.1 遍历方式： for each遍历entrySet</span><br>        <span class="hljs-comment">// 这种方式遍历时定义hMap必须写成Map&lt;Integer, String&gt; 不能只写Map</span><br><br>        System.out.println(<span class="hljs-string">&quot;Traverse 1 :&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : hMap.entrySet())&#123;<br>            System.out.println(<span class="hljs-string">&quot;key : &quot;</span> + entry.getKey() + <span class="hljs-string">&quot; , and value : &quot;</span> + entry.getValue());<br>        &#125;<br><br>        <span class="hljs-comment">// No.2 遍历方式： 使用entrySet的Iterator</span><br>        System.out.println(<span class="hljs-string">&quot;Traverse 2 : &quot;</span>);<br>        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = hMap.entrySet().iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            Map.Entry&lt;Integer, String&gt; entry = iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;Key: &quot;</span>+ entry.getKey() + <span class="hljs-string">&quot;, and value: &quot;</span>+entry.getValue());<br>        &#125;<br><br>        <span class="hljs-comment">// No.3 遍历方式： for each 直接用HashMap的keyset</span><br>        System.out.println(<span class="hljs-string">&quot;Traverse 3 : &quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> key : hMap.keySet())&#123;<br>            System.out.println(<span class="hljs-string">&quot;Key: &quot;</span> + key + <span class="hljs-string">&quot;, and value: &quot;</span> + hMap.get(key));<br>        &#125;<br><br>        <span class="hljs-comment">// No.4 用keyset的iterator</span><br>        System.out.println(<span class="hljs-string">&quot;Traverse 4 : &quot;</span>);<br>        Iterator iter = hMap.keySet().iterator();<br>        <span class="hljs-keyword">while</span>(iter.hasNext())&#123;<br>            <span class="hljs-keyword">int</span> key = (<span class="hljs-keyword">int</span>)iter.next();<br>            System.out.println(<span class="hljs-string">&quot;Key: &quot;</span> + key + <span class="hljs-string">&quot;, and value: &quot;</span> + hMap.get(key));<br>        &#125;<br><br>        sortHashMapByTreeMap(hMap);<br>    &#125;<br><br>    <span class="hljs-comment">// 对HashMap按值排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortHashMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; hMap)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;按值排序之后：&quot;</span>);<br><br>        <span class="hljs-comment">// Step 1 ： copy HashMap to a LinkedList</span><br>        Set&lt;Map.Entry&lt;Integer , String&gt;&gt; sets = hMap.entrySet();<br>        LinkedList&lt;Map.Entry&lt;Integer, String&gt;&gt; linkedList = <span class="hljs-keyword">new</span> LinkedList&lt;Map.Entry&lt;Integer, String&gt;&gt;(sets);<br><br>        <span class="hljs-comment">// Step 2 : use Collection.sort to sort the HashMap according to values</span><br>        Collections.sort(linkedList, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;Integer, String&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;Integer, String&gt; o1, Map.Entry&lt;Integer, String&gt; o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> o1.getValue().compareTo(o2.getValue());<br>            &#125;<br>        &#125;);<br>        Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> LinkedHashMap();<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : linkedList)&#123;<br>            map.put(entry.getKey(), entry.getValue());<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : map.entrySet())&#123;<br>            System.out.println(<span class="hljs-string">&quot;Key is : &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, and value is : &quot;</span> + entry.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortHashMapByKEy</span><span class="hljs-params">(Map&lt;Integer, String&gt; hashmap)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;按Key排序之后：&quot;</span>);<br><br>        <span class="hljs-comment">// Step 1 ： copy HashMap to a LinkedList</span><br>        Set&lt;Map.Entry&lt;Integer , String&gt;&gt; sets = hashmap.entrySet();<br>        LinkedList&lt;Map.Entry&lt;Integer, String&gt;&gt; linkedList = <span class="hljs-keyword">new</span> LinkedList&lt;Map.Entry&lt;Integer, String&gt;&gt;(sets);<br><br>        <span class="hljs-comment">// Step 2 : use Collection.sort to sort the HashMap according to values</span><br>        Collections.sort(linkedList, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;Integer, String&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;Integer, String&gt; o1, Map.Entry&lt;Integer, String&gt; o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> o1.getKey().compareTo(o2.getKey());<br>            &#125;<br>        &#125;);<br>        Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> LinkedHashMap();<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : linkedList)&#123;<br>            map.put(entry.getKey(), entry.getValue());<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : map.entrySet())&#123;<br>            System.out.println(<span class="hljs-string">&quot;Key is : &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, and value is : &quot;</span> + entry.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortHashMapByTreeMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; hMap)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;按键排序之后：&quot;</span>);<br><br>        TreeMap&lt;Integer, String&gt; treeMap = <span class="hljs-keyword">new</span> TreeMap&lt;Integer, String&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> Integer.compare(o1, o2);<br>            &#125;<br>        &#125;);<br><br>        treeMap.putAll(hMap);<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : treeMap.entrySet())&#123;<br>            System.out.println(<span class="hljs-string">&quot;Key is : &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, and value is : &quot;</span> + entry.getValue());<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SortedMap接口和TreeMap实现类"><a href="#SortedMap接口和TreeMap实现类" class="headerlink" title="SortedMap接口和TreeMap实现类"></a>SortedMap接口和TreeMap实现类</h3><p>Map接口派生出一个SortedMap子接口，而SortedMap子接口也有一个实现类TreeMap。</p><p>TreeMap是一个红黑树结构，对所有的Key进行排序，从而保证TreeMap中所有Key-Value对处于有序状态。</p><p>TreeMap有两种排序方法：</p><ol><li>自然排序 —— 所有的Key必须实现Comparable接口，而且所有Key应该是同一个类的对象。</li><li>定制排序 —— 创建TreeMap时传入一个Comparator对象，负责对TreeMap中所有的Key进行排序。</li></ol><table><thead><tr><th>方法名称</th><th>方法解释</th></tr></thead><tbody><tr><td>Map.Entry firstEntry()</td><td>最小key的键值对。</td></tr><tr><td>Object firstKey()</td><td>最小的Key值。</td></tr><tr><td>Map.Entry lastEntry()</td><td>最大Key的键值对。</td></tr></tbody></table><h2 id="Collection接口及其子类"><a href="#Collection接口及其子类" class="headerlink" title="Collection接口及其子类"></a>Collection接口及其子类</h2><p>Collection作为一个集合的根接口，定义了一组对象和它的子类需要实现的方法。</p><ul><li>int size() 获取元素个数</li><li>boolean isEmpty() 是否个数为 0</li><li>boolean contains(Object element) 是否包含指定元素</li><li>boolean add(E element)  添加元素，成功时返回 true</li><li>boolean remove(Object element) 删除元素，成功时返回 true</li><li>Iterator&lt; E &gt; iterator() 获取迭代器</li></ul><p><img src="/img/coll.jpg" alt="Collection"></p><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>Collection继承了Iteratable&lt; E &gt;接口，里面只有iterator一个方法，返回一个Iterator迭代器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Returns an &#123;<span class="hljs-doctag">@link</span> Iterator&#125; for the elements in this object.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> An &#123;<span class="hljs-doctag">@code</span> Iterator&#125; instance.</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function">Iterator&lt;T&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Iterator-的使用方法"><a href="#Iterator-的使用方法" class="headerlink" title="Iterator 的使用方法"></a>Iterator 的使用方法</h4><p>遍历集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator iterator = list.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>    System.out.println(iterator.next());<br>&#125;<br></code></pre></td></tr></table></figure><p>用Iterator的标准操作方法可以让我们不关心具体集合的类型。使得客户端代码和具体集合类型耦合性弱，复合性更强。但是却点在于无法获得特定元素，只能挨个遍历。</p><p>当创建完成指向某个集合或者容器的Iterator对象时，指针其实指向第一个元素的上方。(NULL)</p><h4 id="Iterator的主要API"><a href="#Iterator的主要API" class="headerlink" title="Iterator的主要API"></a>Iterator的主要API</h4><ul><li>hasNext(): 没有指针下移操作，只判断是否存在下一个元素。</li><li>next(): 指针下移，返回该指针所指向的元素。</li><li>remove(): 删除当前指针所指向的元素。—— 一般和next方法一起用，这时候作用是删除Next方法返回的元素。</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>List是Collection的一个子接口。</li><li>List是一个元素有序的，可以重复并且可以为null的集合。</li><li>在Collection集合类中最常使用的几种List实现类为<strong>ArrayList, LinkedList, Vector</strong>。</li><li>有序&amp;可以重复： List的数据结构是一个序列，存储元素时直接在内存中开辟一块连续的空间，然后将空间与索引对应。</li></ul><p>官方文档：</p><blockquote><p>The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.</p></blockquote><h4 id="List局部范围操作"><a href="#List局部范围操作" class="headerlink" title="List局部范围操作"></a>List局部范围操作</h4><p><code>List.subList(int fromIndex, int toIndex)</code> 返回的是fromIndex到toIndex之间的子集。注意：<strong>左闭右开 —— [fromIndex, toIndex)</strong></p><p><code>subList( )</code> 返回的是原来List的引用，只是把开始位置offset和size修改了。</p><p>由于subList和原来的List保持同一个引用，所以对subList进行操作也会对原来的List产生影响。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        List test = <span class="hljs-keyword">new</span> ArrayList();<br>        test.add(<span class="hljs-number">7</span>);<br>        test.add(<span class="hljs-number">8</span>);<br>        test.add(<span class="hljs-number">9</span>);<br>        test.add(<span class="hljs-number">10</span>);<br>        test.add(<span class="hljs-number">11</span>);<br><br>        List test2 = test.subList(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>        System.out.println(test);<br>        test2.clear();<br>        System.out.println(test);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">com.company.ListTest<br>[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]<br>[<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="List和Array的区别"><a href="#List和Array的区别" class="headerlink" title="List和Array的区别"></a>List和Array的区别</h4><ul><li>相似之处<ol><li>都可以表示同一类型的对象</li><li>使用Index进行索引</li></ol></li><li>不同之处<ol><li>数组可以存任何类型元素 —— List不能存基本数据类型</li><li>数组容量不能改变 —— List容量动态增长</li><li>数组效率高 —— List效率相对低一些</li></ol></li></ul><p>总结：当容量固定的时候优先使用数组，容纳的类型更多而且更加高效。</p><p>当容量不固定的情况下，用List更有优势（ArrayList &amp; LinkedList）。</p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><ul><li><p><strong>非线程安全类</strong></p></li><li><p>ArrayList是一个容量可以动态增长的数组。它继承了AbstractList抽象类。</p></li><li><p>有序</p></li><li><p>元素可以为null</p></li><li><p>效率高</p><ul><li>size(), isEmpty(), get(), set(), iterator(), ==&gt; O(1)</li><li>add()平均复杂度为O(n)</li><li>其他操作复杂度基本上都是O(n)</li></ul></li><li><p>占用空间小：和LinkedList相比，不用维护额外的链表</p></li></ul><h5 id="ArrayList构造器"><a href="#ArrayList构造器" class="headerlink" title="ArrayList构造器"></a>ArrayList构造器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">this</span>.elementData = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                               initialCapacity);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>        elementData = c.toArray();<br>        <span class="hljs-keyword">if</span> ((size = elementData.length) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span><br>            <span class="hljs-keyword">if</span> (elementData.getClass() != Object[].class)<br>                elementData = Arrays.copyOf(elementData, size, Object[].class);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// replace with empty array.</span><br>            <span class="hljs-keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="ArrayList遍历方式"><a href="#ArrayList遍历方式" class="headerlink" title="ArrayList遍历方式"></a>ArrayList遍历方式</h5><ul><li>迭代器遍历</li><li>索引遍历</li><li>for循环遍历</li></ul><p>说明： 遍历效率 —— <strong>索引值 &gt; for循环 &gt; 迭代器</strong></p><h5 id="toArray-的使用"><a href="#toArray-的使用" class="headerlink" title="toArray()的使用"></a>toArray()的使用</h5><p>通常情况下，调用<code>ArrayList</code> 中的<code>toArray()</code>可能会遇到<code>java.lang.ClassCastException</code>异常。 —— 这是由于 <code>toArray()</code>返回的是<code>Object[]</code>数组，而将<code>Object[]</code>转化为其他类型时会抛出异常，因为其他类型(例如<code>Integer</code>)是<code>Object</code>的子类，而Java不支持向下转型。所以提供了另外一种方法。</p><p><code>&lt;T&gt; T[] toArray(T[] a)</code></p><p>用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方法一</span><br>Integer[] arr = test.toArray(<span class="hljs-keyword">new</span> Integer[<span class="hljs-number">0</span>]); <br><span class="hljs-comment">// Content传入Array的首地址</span><br><br><br><span class="hljs-comment">// 方法二(容易理解)</span><br>Integer[] arr = <span class="hljs-keyword">new</span> Integer[test.size()];<br>        test.toArray(arr);<br></code></pre></td></tr></table></figure><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ul><li>非线程安全类</li><li>双向链表实现</li><li>元素时有序的，并且允许元素为null</li><li>继承自AbstractSequentialList接口</li><li>只有三个成员变量：头结点 First 尾结点 Last 容量 Size</li><li>Node是一个双向节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>        E item;<br>        Node&lt;E&gt; next;<br>        Node&lt;E&gt; prev;<br><br>        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>            <span class="hljs-keyword">this</span>.item = element;<br>            <span class="hljs-keyword">this</span>.next = next;<br>            <span class="hljs-keyword">this</span>.prev = prev;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="ArrayList-amp-LinkedList-比较"><a href="#ArrayList-amp-LinkedList-比较" class="headerlink" title="ArrayList &amp; LinkedList 比较"></a>ArrayList &amp; LinkedList 比较</h4><h5 id="ArrayList-1"><a href="#ArrayList-1" class="headerlink" title="ArrayList"></a>ArrayList</h5><ul><li>基于数组，搜索和读取数据很快。</li><li>添加和删除元素时效率不高。</li><li>每次达到阈值之后需要扩容，有点影响效率。</li></ul><h5 id="LinkedList-1"><a href="#LinkedList-1" class="headerlink" title="LinkedList"></a>LinkedList</h5><ul><li>基于双向链表，添加删除元素效率很高。</li><li>只能顺序遍历，所以搜索读取数据效率不高。</li><li>没有固定容量不需要扩容。</li><li>需要维护链表因此占用空间更多。</li></ul><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ul><li>底层由一个可以增长的数组组成</li><li>Vector 通过 capacity (容量) 和 capacityIncrement (增长数量) 来尽量少的占用空间</li><li>扩容时默认扩大两倍</li><li>最好在插入大量元素前增加 vector 容量，那样可以减少重新申请内存的次数</li><li>通过 iterator 和 lastIterator 获得的迭代器是 fail-fast 的</li><li>通过 elements 获得的老版迭代器 Enumeration 不是 fail-fast 的</li><li>同步类，每个方法前都有同步锁 synchronized</li><li>在 JDK 2.0 以后，经过优化，Vector 也加入了 Java 集合框架大家族</li><li>线程安全！</li></ul><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set 注重元素的独一无二，不能存储重复的元素。并且存储元素时<strong>无序</strong>。</p><p>Set Implementations</p><ul><li>java.util.EnumSet</li><li>java.util.HashSet</li><li>java.util.LinkedHashSet</li><li>java.util.TreeSet</li></ul><h4 id="HashSet-SubClass"><a href="#HashSet-SubClass" class="headerlink" title="HashSet(SubClass)"></a>HashSet(SubClass)</h4><p>HashSet中存放的是HashCode，但存储的顺序并不是存入的顺序。</p><ul><li><p>HashSet如何实现不存入重复元素？</p></li><li><p>通过元素的hashCode() 和 Equals() 方法判断元素是否重复。</p></li><li><p>如果元素的HashCode是不相同的，那么HashSet会认为对象是不相等的。</p></li><li><p>然后用Equals()方法比较，如果结果为True，则无法加入。反之可以加入。</p><ul><li>那么哈希值HashCode相同的元素如何存储呢？</li><li>可以认为相同哈希值的元素放在同一个哈希桶（Bucket）中。</li></ul><p><img src="/img/hashSet.png" alt="HashSet"></p></li></ul><h4 id="TreeSet-Subclass"><a href="#TreeSet-Subclass" class="headerlink" title="TreeSet(Subclass)"></a>TreeSet(Subclass)</h4>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>29 Divide Two Integers</title>
    <link href="/2020/05/31/29DivideTwoIntegers/"/>
    <url>/2020/05/31/29DivideTwoIntegers/</url>
    
    <content type="html"><![CDATA[<h2 id="29-Divide-Two-Integers-Medium"><a href="#29-Divide-Two-Integers-Medium" class="headerlink" title="29 Divide Two Integers - Medium"></a>29 Divide Two Integers - Medium</h2><p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division and mod operator.</p><p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p><p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>truncate(8.345) = 8</code> and <code>truncate(-2.7335) = -2</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: dividend = <span class="hljs-number">10</span>, divisor = <span class="hljs-number">3</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">Explanation</span>: <span class="hljs-number">10</span>/<span class="hljs-number">3</span> = truncate(<span class="hljs-number">3</span>.<span class="hljs-number">33333</span>..) = <span class="hljs-number">3</span>.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: dividend = <span class="hljs-number">7</span>, divisor = -<span class="hljs-number">3</span><br><span class="hljs-attribute">Output</span>: -<span class="hljs-number">2</span><br><span class="hljs-attribute">Explanation</span>: <span class="hljs-number">7</span>/-<span class="hljs-number">3</span> = truncate(-<span class="hljs-number">2</span>.<span class="hljs-number">33333</span>..) = -<span class="hljs-number">2</span>.<br></code></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>Both dividend and divisor will be <strong>32-bit signed integers.</strong></li><li>The divisor will never be 0.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function <strong>returns 231 − 1 when the division result overflows</strong>.</li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> dividend, <span class="hljs-keyword">int</span> divisor)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(dividend == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> Integer.MAX_VALUE;<br>        <br>        <span class="hljs-keyword">if</span>(divisor == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> dividend;<br>        <span class="hljs-keyword">int</span> sign = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>((dividend &gt; <span class="hljs-number">0</span> &amp;&amp; divisor &lt; <span class="hljs-number">0</span>) || (dividend &lt; <span class="hljs-number">0</span> &amp;&amp; divisor &gt; <span class="hljs-number">0</span>))<br>            sign = -<span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">long</span> a = Math.abs((<span class="hljs-keyword">long</span>)dividend);<br>        <span class="hljs-keyword">long</span> b = Math.abs((<span class="hljs-keyword">long</span>)divisor);<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(a &gt;= b)&#123;<br>            <span class="hljs-keyword">int</span> shift = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(a &gt;= (b&lt;&lt;shift))&#123;<br>                shift++;<br>            &#125;<br>            a -= b&lt;&lt;(shift - <span class="hljs-number">1</span>);<br>            res += <span class="hljs-number">1</span> &lt;&lt; (shift - <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sign * res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>18 4 Sum + 454 4SumII</title>
    <link href="/2020/05/29/184Sum-454-4SumII-Medium/"/>
    <url>/2020/05/29/184Sum-454-4SumII-Medium/</url>
    
    <content type="html"><![CDATA[<h2 id="18-4Sum-Medium"><a href="#18-4Sum-Medium" class="headerlink" title="18 4Sum - Medium"></a>18 4Sum - Medium</h2><p><strong>Tags:</strong> Array / HashTable / Two Pointers</p><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate quadruplets.</p><p><strong>Example:</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">Given<span class="hljs-built_in"> array </span>nums = [1, 0, -1, 0, -2, 2],<span class="hljs-built_in"> and </span>target = 0.<br><br>A solution set is:<br>[<br>  [-1,  0, 0, 1],<br>  [-2, -1, 1, 2],<br>  [-2,  0, 0, 2]<br>]<br></code></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>在<strong>3Sum</strong>的基础上加了一层<code>for循环</code>.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();<br>        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> res;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">int</span> len = nums.length;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">3</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>])<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len - <span class="hljs-number">2</span>; j++)&#123;<br>                <span class="hljs-keyword">if</span>(j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>])<br>                    <span class="hljs-keyword">continue</span>;<br>                <br>                <span class="hljs-keyword">int</span> left = j + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">int</span> right = len - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br>                    <span class="hljs-keyword">int</span> sum = nums[i] + nums[j] + nums[left] + nums[right];<br>                    <span class="hljs-keyword">if</span>(sum &gt; target)<br>                        right--;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &lt; target)<br>                        left++;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        ArrayList&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>                        temp.add(nums[i]); <br>                        temp.add(nums[j]); <br>                        temp.add(nums[left]); <br>                        temp.add(nums[right]);<br>                        res.add(temp);<br>                        left++; right--;<br>                        <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left - <span class="hljs-number">1</span>]) left++;<br>                        <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right + <span class="hljs-number">1</span>]) right--;<br>                    &#125;<br>                &#125;<br>                <br>            &#125;<br>        &#125;<br>        <br>        <br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="454-4Sum-II-Medium"><a href="#454-4Sum-II-Medium" class="headerlink" title="454  4Sum II - Medium"></a>454  4Sum II - Medium</h2><p><strong>Tags:</strong> Hash Map / Binary Search</p><p>Given four lists A, B, C, D of integer values, compute how many tuples <code>(i, j, k, l)</code> there are such that <code>A[i] + B[j] + C[k] + D[l]</code> is zero.</p><p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.</p><p><strong>Example:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>:<br><span class="hljs-attribute">A</span> =<span class="hljs-meta"> [ 1, 2]</span><br><span class="hljs-attribute">B</span> =<span class="hljs-meta"> [-2,-1]</span><br><span class="hljs-attribute">C</span> =<span class="hljs-meta"> [-1, 2]</span><br><span class="hljs-attribute">D</span> =<span class="hljs-meta"> [ 0, 2]</span><br><br><span class="hljs-attribute">Output</span>:<br><span class="hljs-attribute">2</span><br><br><span class="hljs-attribute">Explanation</span>:<br><span class="hljs-attribute">The</span> two tuples are:<br><span class="hljs-attribute">1</span>. (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>) -&gt; A[<span class="hljs-number">0</span>] + B[<span class="hljs-number">0</span>] + C[<span class="hljs-number">0</span>] + D[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span> + (-<span class="hljs-number">2</span>) + (-<span class="hljs-number">1</span>) + <span class="hljs-number">2</span> = <span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>. (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) -&gt; A[<span class="hljs-number">1</span>] + B[<span class="hljs-number">1</span>] + C[<span class="hljs-number">0</span>] + D[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span> + (-<span class="hljs-number">1</span>) + (-<span class="hljs-number">1</span>) + <span class="hljs-number">0</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>利用map。<br>第一个和第二个的和去生成map。<br>然后利用第三个第四个的和去对应的单元找。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fourSumCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span>[] B, <span class="hljs-keyword">int</span>[] C, <span class="hljs-keyword">int</span>[] D)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Integer&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; B.length; j++)&#123;<br>                <span class="hljs-keyword">int</span> sum = A[i] + B[j];<br>                map.put(sum, map.getOrDefault(sum, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; C.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; D.length; j++)&#123;<br>                <span class="hljs-keyword">int</span> sum = -(C[i] + D[j]);<br>                <span class="hljs-keyword">if</span>(map.containsKey(sum))<br>                    res = res + map.get(sum);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>30 Substring with Concatenation of All Words</title>
    <link href="/2020/05/20/30SubstringwithConcatenationofAllWords/"/>
    <url>/2020/05/20/30SubstringwithConcatenationofAllWords/</url>
    
    <content type="html"><![CDATA[<h2 id="30-Substring-with-Concatenation-of-All-Words-Hard"><a href="#30-Substring-with-Concatenation-of-All-Words-Hard" class="headerlink" title="30 Substring with Concatenation of All Words - Hard"></a>30 Substring with Concatenation of All Words - Hard</h2><p><strong>Tags:</strong> HashMap, String</p><p>You are given a string, <strong>s</strong>, and a list of words, <strong>words</strong>, that are all of the same length. Find all starting indices of substring(s) in <strong>s</strong> that is a concatenation of each word in <strong>words</strong> exactly once and without any intervening characters.</p><p><strong>Example 1:</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Input:<br>  s = <span class="hljs-string">&quot;barfoothefoobarman&quot;</span>,<br>  <span class="hljs-built_in">words</span> = [<span class="hljs-string">&quot;foo&quot;</span>,<span class="hljs-string">&quot;bar&quot;</span>]<br>Output: [<span class="hljs-number">0</span>,<span class="hljs-number">9</span>]<br>Explanation: Substrings starting <span class="hljs-keyword">at</span> index <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">9</span> are <span class="hljs-string">&quot;barfoo&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;foobar&quot;</span> respectively.<br>The output order <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> matter, <span class="hljs-keyword">returning</span> [<span class="hljs-number">9</span>,<span class="hljs-number">0</span>] <span class="hljs-keyword">is</span> fine too.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span><br>  s = <span class="hljs-string">&quot;wordgoodgoodgoodbestword&quot;</span>,<br>  words = [<span class="hljs-string">&quot;word&quot;</span>,<span class="hljs-string">&quot;good&quot;</span>,<span class="hljs-string">&quot;best&quot;</span>,<span class="hljs-string">&quot;word&quot;</span>]<br><span class="hljs-symbol">Output:</span> []<br></code></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p><a href="https://leetcode.wang/leetCode-30-Substring-with-Concatenation-of-All-Words.html">参考链接</a></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">findSubstring</span><span class="hljs-params">(String s, String[] words)</span> </span>&#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        <span class="hljs-keyword">if</span>(words.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>        <br>        Map&lt;String, Integer&gt; map1 = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br>        <span class="hljs-keyword">int</span> wordNum = words.length;<br>        <span class="hljs-keyword">int</span> wordLen = words[<span class="hljs-number">0</span>].length();<br>        <br>        <span class="hljs-keyword">for</span>(String str: words)<br>            map1.put(str,map1.getOrDefault(str, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        <br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length() - wordNum * wordLen + <span class="hljs-number">1</span>; i++)&#123;<br>            Map&lt;String, Integer&gt; map2 = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br>            <span class="hljs-keyword">int</span> curNum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(curNum &lt; wordNum)&#123;<br>              String subWord = s.substring(i + curNum * wordLen, i + (curNum + <span class="hljs-number">1</span>) * wordLen);<br>                <span class="hljs-keyword">if</span>(map1.containsKey(subWord))&#123;<br>                    map2.put(subWord, map2.getOrDefault(subWord, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">if</span>(map2.get(subWord) &gt; map1.get(subWord))<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>                curNum ++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(curNum == wordNum)<br>                res.add(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>23 Merge k Sorted Lists</title>
    <link href="/2020/05/17/23MergekSortedLists/"/>
    <url>/2020/05/17/23MergekSortedLists/</url>
    
    <content type="html"><![CDATA[<h2 id="23-Merge-k-Sorted-Lists-Hard"><a href="#23-Merge-k-Sorted-Lists-Hard" class="headerlink" title="23 Merge k Sorted Lists - Hard"></a>23 Merge k Sorted Lists - Hard</h2><p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p><p><strong>Example:</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">Input:<br>[<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>,<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>,<br>  <span class="hljs-number">2</span>-&gt;<span class="hljs-number">6</span><br>]<br>Output: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p><strong>MinHeap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(lists.length == <span class="hljs-number">0</span> || lists == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <br>        Queue&lt;ListNode&gt; q = <span class="hljs-keyword">new</span> PriorityQueue&lt;ListNode&gt;(lists.length,<br>        <span class="hljs-keyword">new</span> Comparator&lt;ListNode&gt;()&#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(ListNode l1, ListNode l2)</span></span>&#123;<br>                <span class="hljs-keyword">return</span> l1.val - l2.val;<br>            &#125;<br>        &#125;);<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; lists.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(lists[i] != <span class="hljs-keyword">null</span>)<br>                q.offer(lists[i]);<br>        &#125;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ListNode cur = dummy;<br>        <br>        <span class="hljs-keyword">while</span>(!q.isEmpty())&#123;<br>            ListNode node = q.poll();<br>            cur.next = node;<br>            cur = node;<br>            <span class="hljs-keyword">if</span>(node.next != <span class="hljs-keyword">null</span>)&#123;<br>                q.offer(node.next);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> dummy.next;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>24 Swap Nodes in Pairs</title>
    <link href="/2020/05/08/24SwapNodesinPairs/"/>
    <url>/2020/05/08/24SwapNodesinPairs/</url>
    
    <content type="html"><![CDATA[<h2 id="24-Swap-Nodes-in-Pairs-Medium"><a href="#24-Swap-Nodes-in-Pairs-Medium" class="headerlink" title="24. Swap Nodes in Pairs - Medium"></a>24. Swap Nodes in Pairs - Medium</h2><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>You may <strong>not</strong> modify the values in the list’s nodes, only nodes itself may be changed.</p><p><strong>Example:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Given</span> <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>, you should return the list as <span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span>.<br></code></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> head;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        dummy.next = head;<br>        head = dummy;<br>        <span class="hljs-keyword">while</span>(head.next != <span class="hljs-keyword">null</span> &amp;&amp; head.next.next != <span class="hljs-keyword">null</span>)&#123;<br>            ListNode n1 = head.next;<br>            ListNode n2 = head.next.next;<br>            n1.next = n2.next;<br>            n2.next = n1;<br>            head.next = n2;<br>            <br>            head = n1;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>25 Reverse Nodes in k-Group</title>
    <link href="/2020/05/07/25ReverseNodesink-Group/"/>
    <url>/2020/05/07/25ReverseNodesink-Group/</url>
    
    <content type="html"><![CDATA[<h2 id="25-Reverse-Nodes-in-k-Group"><a href="#25-Reverse-Nodes-in-k-Group" class="headerlink" title="25 Reverse Nodes in k-Group"></a>25 Reverse Nodes in k-Group</h2><p><strong>Tag:</strong> Linked List</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p><p>如果链表的长度不是<strong>k</strong>的长度，那么最后多余的部分不用翻转。</p><p><strong>Example:</strong></p><p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p><strong>Note:</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        dummy.next = head;<br>        head = dummy;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            head = reverse(head, k);<br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>) <br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>    <br>    <span class="hljs-comment">// head -&gt; n1 -&gt; n2 ... nk -&gt; nk+1</span><br>    <span class="hljs-comment">// =&gt;</span><br>    <span class="hljs-comment">// head -&gt; nk -&gt; nk-1 .. n1 -&gt; nk+1</span><br>    <span class="hljs-comment">// return n1</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        <span class="hljs-comment">// 找到nk</span><br>        <span class="hljs-comment">// 找到nkplus</span><br>        <span class="hljs-comment">// 找到n1</span><br>        ListNode nk = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nk == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 判断是否到了链表尾部不足k个元素的部分</span><br>            nk = nk.next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(nk == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;   <span class="hljs-comment">// 解决最后一个sub-linked-list长度不够的情况</span><br>        ListNode nkplus = nk.next;<br>        ListNode n1 = head.next;<br>        <br>        <span class="hljs-comment">// 设置n1前面的node -&gt; pre</span><br>        <span class="hljs-comment">// 设置当前node -&gt; cur</span><br>        <span class="hljs-comment">// reverse the sub - linked list</span><br>        <br>        ListNode pre = <span class="hljs-keyword">null</span>;<br>        ListNode cur = n1;<br> <br>        <span class="hljs-keyword">while</span>(cur != nkplus)&#123;<br>            ListNode temp = cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = temp;<br>        &#125;<br>        <br>        <span class="hljs-comment">// connect</span><br>        head.next = nk;<br>        n1.next = nkplus;<br>        <span class="hljs-keyword">return</span> n1; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h3><p><strong>Space: O(1)</strong></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4 String to Integer</title>
    <link href="/2020/04/06/4StringtoInteger/"/>
    <url>/2020/04/06/4StringtoInteger/</url>
    
    <content type="html"><![CDATA[<h2 id="3-String-to-Integer"><a href="#3-String-to-Integer" class="headerlink" title="3 String to Integer"></a>3 String to Integer</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Implement <code>atoi</code> which converts a string to an integer.</p><p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p><p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p><p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p><p>If no valid conversion could be performed, a zero value is returned.</p><p><strong>Note:</strong></p><ul><li>Only the space character <code>&#39; &#39;</code> is considered as whitespace character.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> <span class="hljs-string">&quot;42&quot;</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">42</span><br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Input:</span> <span class="hljs-string">&quot;   -42&quot;</span><br><span class="hljs-symbol">Output:</span> -<span class="hljs-number">42</span><br><span class="hljs-symbol">Explanation:</span> The first non-whitespace character <span class="hljs-built_in">is</span> <span class="hljs-comment">&#x27;-&#x27;, which is the minus sign.</span><br>             <span class="hljs-keyword">Then</span> <span class="hljs-keyword">take</span> <span class="hljs-keyword">as</span> many numerical digits <span class="hljs-keyword">as</span> possible, which gets <span class="hljs-number">42</span>.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Input</span>: &quot;4193 with words&quot;<br>Output: <span class="hljs-number">4193</span><br>Explanation: <span class="hljs-keyword">Conversion</span> stops at digit <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">as</span> the next <span class="hljs-type">character</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> a numerical digit.<br></code></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Input</span>: &quot;words and 987&quot;<br>Output: <span class="hljs-number">0</span><br>Explanation: The first non-whitespace <span class="hljs-type">character</span> <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;w&#x27;</span>, which <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> a numerical <br>             digit <span class="hljs-keyword">or</span> a +/- sign. Therefore <span class="hljs-keyword">no</span> <span class="hljs-keyword">valid</span> <span class="hljs-keyword">conversion</span> could be performed.<br></code></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Input</span>: &quot;-91283472332&quot;<br>Output: <span class="hljs-number">-2147483648</span><br>Explanation: The number &quot;-91283472332&quot; <span class="hljs-keyword">is</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> the range <span class="hljs-keyword">of</span> a <span class="hljs-number">32</span>-<span class="hljs-type">bit</span> signed <span class="hljs-type">integer</span>.<br>             Thefore INT_MIN (−<span class="hljs-number">231</span>) <span class="hljs-keyword">is</span> returned.<br></code></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">myAtoi</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        <span class="hljs-comment">// IT IS JUST A &#x27;IF-ELSE&#x27; PRACTICE</span><br>        <span class="hljs-comment">// NOT A REAL PROBLEM</span><br>        <span class="hljs-keyword">if</span>(str == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        str = str.trim(); <span class="hljs-comment">// trim() to delete all whitespaces at the front or rear</span><br>        <span class="hljs-keyword">if</span>(str.length() == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">int</span> sign = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(str.charAt(index) == <span class="hljs-string">&#x27;+&#x27;</span>)<br>            index++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str.charAt(index) == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>            sign = -<span class="hljs-number">1</span>;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">long</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;index &lt; str.length();index++)&#123;<br>            <span class="hljs-keyword">if</span>(str.charAt(index) &lt; <span class="hljs-string">&#x27;0&#x27;</span> || str.charAt(index) &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>                <span class="hljs-keyword">break</span>;<br>            num = num * <span class="hljs-number">10</span> + (str.charAt(index) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(num &gt; Integer.MAX_VALUE)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(num * sign &gt; Integer.MAX_VALUE)<br>            <span class="hljs-keyword">return</span> Integer.MAX_VALUE;<br>        <span class="hljs-keyword">if</span>(num * sign &lt; Integer.MIN_VALUE)<br>            <span class="hljs-keyword">return</span> Integer.MIN_VALUE;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)num* sign;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
