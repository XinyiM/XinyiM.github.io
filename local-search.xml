<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Dependency Injection - XML Configuration</title>
    <link href="/2021/01/06/Dependency-Injection-XML-Configuration/"/>
    <url>/2021/01/06/Dependency-Injection-XML-Configuration/</url>
    
    <content type="html"><![CDATA[<h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><p>Dependency = Helper</p><h3 id="How-Spring-Processes-the-Config-File"><a href="#How-Spring-Processes-the-Config-File" class="headerlink" title="How Spring Processes the Config  File"></a>How Spring Processes the Config  File</h3><p><img src="/img/howProcessConfigFile.png" alt="How Spring processes Config File"></p><h3 id="Injection-Types"><a href="#Injection-Types" class="headerlink" title="Injection Types"></a>Injection Types</h3><h4 id="Constructor-Injection"><a href="#Constructor-Injection" class="headerlink" title="Constructor Injection"></a>Constructor Injection</h4><h5 id="1-Define-the-dependency-interface-and-class"><a href="#1-Define-the-dependency-interface-and-class" class="headerlink" title="1. Define the dependency interface and class"></a>1. Define the dependency interface and class</h5><p><img src="/img/DI-interface.png" alt="Dependency Injection Interface"></p><p><img src="/img/DI-class.png" alt="Dependency Injection Class"></p><h5 id="2-Create-a-constructor-in-your-class-for-injections"><a href="#2-Create-a-constructor-in-your-class-for-injections" class="headerlink" title="2. Create a constructor in your class for injections"></a>2. Create a constructor in your class for injections</h5><p><img src="/img/createConstructor.png" alt="Create Constructor"></p><h5 id="3-Configure-the-dependency-injection-in-Spring-Config-File"><a href="#3-Configure-the-dependency-injection-in-Spring-Config-File" class="headerlink" title="3. Configure the dependency injection in Spring Config File"></a>3. Configure the dependency injection in Spring Config File</h5><p><img src="/img/setupConfigforDI.png" alt="Set up Config File for DI"></p><h4 id="Setter-Injection"><a href="#Setter-Injection" class="headerlink" title="Setter Injection"></a>Setter Injection</h4><p>Inject Dependencies by calling setter methods.</p><h5 id="1-Create-setter-methods-in-your-class-for-injections"><a href="#1-Create-setter-methods-in-your-class-for-injections" class="headerlink" title="1.Create setter methods in your class for injections"></a>1.Create setter methods in your class for injections</h5><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmkd5lq6rgj30lp03waag.jpg" alt="Create Setter Method"></p><h5 id="2-Configure-the-dependency-injection-in-Spring-config-file"><a href="#2-Configure-the-dependency-injection-in-Spring-config-file" class="headerlink" title="2. Configure the dependency injection in Spring config file"></a>2. Configure the dependency injection in Spring config file</h5><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmkd5png8cj30mf0dgdhl.jpg" alt="Config File"></p><h5 id="SetterDemo"><a href="#SetterDemo" class="headerlink" title="SetterDemo"></a>SetterDemo</h5><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmkdvlwe3zj30nj07a754.jpg" alt="Setter Demo"></p><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p>For the CricketCoach example with Setter Injection, why do we use the CricketCoach class instead of the Coach interface?</p><h4 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h4><p>When you retrieve a bean from the Spring container using the Coach interface:</p><p>  <code>Coach theCricketCoach = context.getBean(&quot;myCricketCoach&quot;, Coach.class);</code> </p><p>You only have access to the methods defined in the Coach interface: getDailyWorkout and getDailyFortune. Even though the actual implementation has additional methods, you only have visibility to methods that are defined at the Coach interface level.</p><p>When you retrieve a bean from the Spring container using the CricketCoach class:</p><p>  <code>CricketCoach theCricketCoach = context.getBean(&quot;myCricketCoach&quot;, CricketCoach.class);</code> </p><p>You have access to the methods defined in the Coach interface: getDailyWorkout and getDailyFortune.</p><p>ALSO, you have access to the additional methods defined in the CricketCoach class: getTeam, setTeam.</p><h2 id="Injecting-Values-from-Properties-File"><a href="#Injecting-Values-from-Properties-File" class="headerlink" title="Injecting Values from Properties File"></a>Injecting Values from Properties File</h2><h4 id="1-Create-Properties-File"><a href="#1-Create-Properties-File" class="headerlink" title="1. Create Properties File"></a>1. Create Properties File</h4><p>Create file <code>sport.properties</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">foo.email</span>=test@gmail.com<br><span class="hljs-attr">foo.team</span>=Royal Challenger Bangalore<br></code></pre></td></tr></table></figure><h4 id="2-Load-Properties-File-in-Spring-Config-File"><a href="#2-Load-Properties-File-in-Spring-Config-File" class="headerlink" title="2. Load Properties File in Spring Config File"></a>2. Load Properties File in Spring Config File</h4><p>Load properties in <code>applicationContext.xml</code> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&#x27;classpath:sport.properties&#x27;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-Reference-values-from-Properties-File"><a href="#3-Reference-values-from-Properties-File" class="headerlink" title="3. Reference values from Properties File"></a>3. Reference values from Properties File</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;emailAddress&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;foo.email&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;team&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;foo.team&#125;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Inversion of Control - XML Configuration</title>
    <link href="/2021/01/06/Inversion-of-Control-XML-Configuration/"/>
    <url>/2021/01/06/Inversion-of-Control-XML-Configuration/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring-Container-Functions"><a href="#Spring-Container-Functions" class="headerlink" title="Spring Container Functions"></a>Spring Container Functions</h2><ul><li>Inversion of Control - <strong>Create and Manage Objects</strong></li><li>Dependency Injection - <strong>Inject object’s dependencies</strong></li></ul><h2 id="Inversion-of-Control-XML-Configuration"><a href="#Inversion-of-Control-XML-Configuration" class="headerlink" title="Inversion of Control - XML Configuration"></a>Inversion of Control - XML Configuration</h2><h3 id="Configuring-Spring-Container"><a href="#Configuring-Spring-Container" class="headerlink" title="Configuring Spring Container"></a>Configuring Spring Container</h3><ul><li>XML Configuratiion file</li><li>Java annotations</li><li>Java Source Code</li></ul><h3 id="Spring-Development-Process"><a href="#Spring-Development-Process" class="headerlink" title="Spring Development Process"></a>Spring Development Process</h3><div class="note note-warning">            <p><strong>What is a Spring Bean?</strong></p><p>A “Spring Bean” is simply a Java object.</p><p>When Java objects are created by the Spring Container, then Spring refers to them as “Spring Beans”.</p><p>Spring Beans are created from normal Java classes …. just like Java objects.</p>          </div><h4 id="1-Configure-your-Spring-Beans"><a href="#1-Configure-your-Spring-Beans" class="headerlink" title="1. Configure your Spring Beans"></a>1. Configure your Spring Beans</h4><p>Create a bean and give an <code>id</code> to it as an alias. </p><p>Then specify the classname of the implementation class.</p><p><img src="/img/configBeans.png" alt="Config Beans"></p><h4 id="2-Create-a-Spring-Container"><a href="#2-Create-a-Spring-Container" class="headerlink" title="2. Create a Spring Container"></a>2. Create a Spring Container</h4><ol><li>Load the spring configuration file</li><li>Retrieve the bean from the container.</li><li>Call methods in the bean.</li><li>Close the context.</li></ol><p><img src="/img/createContextContainer.png" alt="Create a Spring Container"></p><h4 id="3-Retrieve-Beans-from-Spring-Container"><a href="#3-Retrieve-Beans-from-Spring-Container" class="headerlink" title="3. Retrieve Beans from Spring Container"></a>3. Retrieve Beans from Spring Container</h4><p>Mentioned above.</p><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Setup Spring Environment</title>
    <link href="/2021/01/05/envSetup/"/>
    <url>/2021/01/05/envSetup/</url>
    
    <content type="html"><![CDATA[<h2 id="Setup-Spring-Environment"><a href="#Setup-Spring-Environment" class="headerlink" title="Setup Spring Environment"></a>Setup Spring Environment</h2><h3 id="1-Install-Tomcat9-0"><a href="#1-Install-Tomcat9-0" class="headerlink" title="1. Install Tomcat9.0"></a>1. Install Tomcat9.0</h3><p>Download Tomcat9.0 from <a href="https://tomcat.apache.org/download-90.cgi">here</a>.</p><p><img src="/img/tomcatInstall.png" alt="Install Tomcat"></p><h4 id="Start-Server"><a href="#Start-Server" class="headerlink" title="Start Server"></a>Start Server</h4><p><code>cd /tomcat &amp;&amp; bin/startup.sh</code></p><h4 id="Shutdown-Server"><a href="#Shutdown-Server" class="headerlink" title="Shutdown Server"></a>Shutdown Server</h4><p><code>cd /tomcat &amp;&amp; bin/shutdown.sh</code></p><h3 id="2-Install-IntelliJ-IDEA"><a href="#2-Install-IntelliJ-IDEA" class="headerlink" title="2. Install IntelliJ IDEA"></a>2. Install IntelliJ IDEA</h3><h3 id="3-Connect-Tomcat-to-IntelliJ-IDEA"><a href="#3-Connect-Tomcat-to-IntelliJ-IDEA" class="headerlink" title="3. Connect Tomcat to IntelliJ IDEA"></a>3. Connect Tomcat to IntelliJ IDEA</h3><ol><li><p>Open Preference.</p></li><li><p>Click on <code>Build, Execution, Deployment</code></p><p><img src="/img/connectTomcatAndIdea.png" alt="Connect Tomcat to Idea"></p></li><li><p>Choose <code>Tomcat Server</code></p></li><li><p>Select the path of downloaded Tomcat Server.</p></li><li><p>Done.</p></li></ol><h3 id="4-Download-Spring-5-JAR-Files"><a href="#4-Download-Spring-5-JAR-Files" class="headerlink" title="4. Download Spring 5 JAR Files"></a>4. Download Spring 5 JAR Files</h3><ol><li>Create a project. </li><li>Choose <strong>Spring</strong> and click on <code>Next</code>.</li></ol><p><img src="/img/downloadJARFiles.png" alt="Create a Spring Project"></p><ol start="3"><li>Select the project path and click on <code>Finish</code>.</li></ol><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Environment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>J2EE and Spring Overview</title>
    <link href="/2021/01/05/J2EE&amp;Spring/"/>
    <url>/2021/01/05/J2EE&amp;Spring/</url>
    
    <content type="html"><![CDATA[<h2 id="What-is-Java-EE"><a href="#What-is-Java-EE" class="headerlink" title="What is Java EE?"></a>What is Java EE?</h2><p><strong>J2EE - Java 2 Platform Enterprise Edition</strong></p><pre><code class=" mermaid">graph TB    A[Client-Side Presentation] --&gt; B[Server-Side Presentation];    B --&gt; C[Server-Side Business Logic];    C --&gt; D[Database]; </code></pre><h2 id="Overview-of-Spring"><a href="#Overview-of-Spring" class="headerlink" title="Overview of Spring"></a>Overview of Spring</h2><h3 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h3><ul><li>Lightweight development with Java POJO(Plain-Old-Java-Objects)</li><li>Dependency injection to promote loose coupling </li><li>Declarative programming with Aspect-Oriented-Programming</li><li>Minimize boilerplate Java Code</li></ul><h3 id="Spring-Core-Framework"><a href="#Spring-Core-Framework" class="headerlink" title="Spring Core Framework"></a>Spring Core Framework</h3><h3 id="Core-Container"><a href="#Core-Container" class="headerlink" title="Core Container"></a>Core Container</h3><p>Creating beans and making these beans available.</p><ul><li>Bean Factory - Create Beans and manage beans</li><li>Context - Spring Container that holds the beans in memory.</li><li>SpEL - Spring Expression Language</li></ul><h3 id="AOP-Section"><a href="#AOP-Section" class="headerlink" title="AOP Section"></a>AOP Section</h3><p><strong>AOP:</strong> Aspect Oriented Programming</p><p>Allows you to create application-wide services. </p><p>Add functionality to object without modifying your code using <code>config</code> file or by adding annotations.</p><blockquote><p>Logging, security, transactions, etc..</p></blockquote><h3 id="Data-Access-Layer"><a href="#Data-Access-Layer" class="headerlink" title="Data Access Layer"></a>Data Access Layer</h3><ul><li>JDBC - helper classes</li><li>ORM - Objection Relational Mapping - hook in to Hibernate</li><li>Transactions - Add transaction support   </li><li>JMS - Java Message Service - Send msgs to a msg queue in a asych way.</li></ul><h3 id="Web-Layer"><a href="#Web-Layer" class="headerlink" title="Web Layer"></a>Web Layer</h3><p>Home of the Spring MVC framework</p><h3 id="Test-Layer"><a href="#Test-Layer" class="headerlink" title="Test Layer"></a>Test Layer</h3><p>Supports <strong>Test-Driven-Development</strong></p><p>Mock objects and out-of-container testing.</p><p>Integration test as well.</p><h2 id="Spring-Projects"><a href="#Spring-Projects" class="headerlink" title="Spring Projects"></a>Spring Projects</h2><p>Additional modules built on top of the core Spring Framework.</p><ul><li>Spring Cloud, Spring Data</li><li>Spring Web Service - RESTful </li></ul><p class="note note-warning">Reference:  Udemy, Spring & Hibernate for Beginners (including SpringBoot)</p>]]></content>
    
    
    <categories>
      
      <category>Spring &amp; Hibernate</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/04/hello-world/"/>
    <url>/2021/01/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start-about-Hello-world"><a href="#Quick-Start-about-Hello-world" class="headerlink" title="Quick Start about Hello world"></a>Quick Start about Hello world</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>HelloWorld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 集合类</title>
    <link href="/2020/10/20/java%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    <url>/2020/10/20/java%E9%9B%86%E5%90%88%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA-集合类"><a href="#JAVA-集合类" class="headerlink" title="JAVA 集合类"></a>JAVA 集合类</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JAVA中集合类主要负责保存数据。所有的集合类都位于 <code>java.util</code> 包下。Java容器类类库主要用于保存<strong>对象</strong>。主要有两大分支。</p><ul><li><p>Collection —— 容器的每个位置只能保存一个元素。</p><p>一组对立的元素。通常Collection中的元素都符合某种规则。</p><ul><li>List必须保持一定的顺序。</li><li>Set的元素不能重复。</li><li>Queue保持队列FIFO原则。</li></ul></li><li><p>Map —— 容器的每个位置保存一个<strong>键值对</strong>，通过键找到对应的值。</p><ul><li>一组成对的<strong>键值对</strong>对象。</li></ul></li></ul><p><img src="/img/java.jpg"></p><h2 id="MAP-集合类"><a href="#MAP-集合类" class="headerlink" title="MAP 集合类"></a>MAP 集合类</h2><p><img src="/img/map.jpg" alt="Map"></p><h3 id="Entry类"><a href="#Entry类" class="headerlink" title="Entry类"></a>Entry类</h3><p>Map中包含一个内部类<code>Entry</code>。该类中包含了一个<strong>key - value</strong> 的键值对。其中包含了三个方法。</p><table><thead><tr><th>方法名称</th><th>方法解释</th></tr></thead><tbody><tr><td>getKey()</td><td>获取该entry的Key。</td></tr><tr><td>getValue()</td><td>获取该entry的Value。</td></tr><tr><td>setValue()</td><td>设置该Entry的Value并且返回新的Value。</td></tr></tbody></table><p>Map是一个顶级接口。主要包括几个方法。</p><h3 id="覆盖方法-amp-更新方法"><a href="#覆盖方法-amp-更新方法" class="headerlink" title="覆盖方法 &amp; 更新方法"></a>覆盖方法 &amp; 更新方法</h3><table><thead><tr><th>方法名称</th><th align="left">方法解释</th></tr></thead><tbody><tr><td>equals(Object o)</td><td align="left">比较对象和该map是否等价</td></tr><tr><td>hashCode()</td><td align="left">返回当前map的哈希码</td></tr><tr><td>clear()</td><td align="left">删除所有映射</td></tr><tr><td>remove(Object key)</td><td align="left">从Map中删除一堆键值</td></tr><tr><td>put(Object key, Object value)</td><td align="left">从Map中删除所有映射</td></tr><tr><td>putAll(Map t)</td><td align="left">将指定Map中所有映射复制到此</td></tr></tbody></table><h3 id="返回视图的方法-amp-遍历Map"><a href="#返回视图的方法-amp-遍历Map" class="headerlink" title="返回视图的方法 &amp; 遍历Map"></a>返回视图的方法 &amp; 遍历Map</h3><table><thead><tr><th>方法名</th><th>方法解释</th></tr></thead><tbody><tr><td>entrySet()</td><td>返回Map中所包含的所有映射的Set视图。每一个元素都是Map.Entry对象：可以使用getKey() 和 getValue()的方法访问键和值。</td></tr><tr><td>keySet()</td><td>返回Map中所有键的Set视图。删除Set中的元素时将会删除Map中相应的映射。</td></tr><tr><td>values()</td><td>返回Map中所有值的Collection视图。删除Collection中的元素时将会删除Map中相应的映射。</td></tr></tbody></table><p>如果要对键值对进行迭代，必须获得一个Iterator对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator keyValuePairs = aMap.entrySet().iterator();<br>Iterator keys = aMap.keySet().iterator();<br>Iterator values = aMap.values().iterator();<br></code></pre></td></tr></table></figure><h3 id="访问和测试方法"><a href="#访问和测试方法" class="headerlink" title="访问和测试方法"></a>访问和测试方法</h3><p>只检索Map的内容信息但是不更改Map的内容。</p><table><thead><tr><th>方法名</th><th>方法解释</th></tr></thead><tbody><tr><td>get(Object key)</td><td>返回与key关联的value</td></tr><tr><td>containsKey(Object key)</td><td>如果包含指定的key则返回True</td></tr><tr><td>containsValue(Obejct value)</td><td>如果存在指定的value则返回True</td></tr><tr><td>isEmpty()</td><td>是否为空</td></tr><tr><td>size()</td><td>key-value的数目</td></tr></tbody></table><h3 id="HashMap-和-Hashtable"><a href="#HashMap-和-Hashtable" class="headerlink" title="HashMap 和 Hashtable"></a>HashMap 和 Hashtable</h3><p><strong>HASHMAP用的多！！！</strong></p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ol><li>HashMap不是<strong>线程安全</strong>的，<strong>Hashtable线程安全</strong> —— 通过synchronize实现。</li><li>效率：HashMap &gt; Hashtable</li><li>HashMap的key可以为<code>NULL</code>，Hashtable不可以。</li></ol><p>判断两个Key相同的标准为：两个Key通过equals方法比较后返回True，两个key的HashCode值相等。</p><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>它是HashMap的子类，通过双向链表维护键值对的顺序。该双向链表负责维护Map的迭代顺序，与key-value的插入顺序保持一致。</p><h4 id="HashMap功能实现"><a href="#HashMap功能实现" class="headerlink" title="HashMap功能实现"></a>HashMap功能实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String [] args)</span></span>&#123;<br>        Map&lt;Integer, String&gt; hMap = <span class="hljs-keyword">new</span> HashMap&lt;Integer, String&gt;();<br>        <span class="hljs-comment">// 将一个接口的引用指向一个实现接口的类。</span><br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        hMap.put(<span class="hljs-number">101</span>, <span class="hljs-string">&quot;序号 &quot;</span>+<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">50</span>)&#123;<br>            hMap.put(i, <span class="hljs-string">&quot;序号 &quot;</span> + i);<br>            i++;<br>        &#125;<br>        hMap.put(-<span class="hljs-number">1</span>, <span class="hljs-string">&quot;序号 &quot;</span> + <span class="hljs-number">199</span>);<br>        hMap.put(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;序号 &quot;</span> + <span class="hljs-number">199</span>);<br><br>        <span class="hljs-comment">// No.1 遍历方式： for each遍历entrySet</span><br>        <span class="hljs-comment">// 这种方式遍历时定义hMap必须写成Map&lt;Integer, String&gt; 不能只写Map</span><br><br>        System.out.println(<span class="hljs-string">&quot;Traverse 1 :&quot;</span>);<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : hMap.entrySet())&#123;<br>            System.out.println(<span class="hljs-string">&quot;key : &quot;</span> + entry.getKey() + <span class="hljs-string">&quot; , and value : &quot;</span> + entry.getValue());<br>        &#125;<br><br>        <span class="hljs-comment">// No.2 遍历方式： 使用entrySet的Iterator</span><br>        System.out.println(<span class="hljs-string">&quot;Traverse 2 : &quot;</span>);<br>        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = hMap.entrySet().iterator();<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            Map.Entry&lt;Integer, String&gt; entry = iterator.next();<br>            System.out.println(<span class="hljs-string">&quot;Key: &quot;</span>+ entry.getKey() + <span class="hljs-string">&quot;, and value: &quot;</span>+entry.getValue());<br>        &#125;<br><br>        <span class="hljs-comment">// No.3 遍历方式： for each 直接用HashMap的keyset</span><br>        System.out.println(<span class="hljs-string">&quot;Traverse 3 : &quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> key : hMap.keySet())&#123;<br>            System.out.println(<span class="hljs-string">&quot;Key: &quot;</span> + key + <span class="hljs-string">&quot;, and value: &quot;</span> + hMap.get(key));<br>        &#125;<br><br>        <span class="hljs-comment">// No.4 用keyset的iterator</span><br>        System.out.println(<span class="hljs-string">&quot;Traverse 4 : &quot;</span>);<br>        Iterator iter = hMap.keySet().iterator();<br>        <span class="hljs-keyword">while</span>(iter.hasNext())&#123;<br>            <span class="hljs-keyword">int</span> key = (<span class="hljs-keyword">int</span>)iter.next();<br>            System.out.println(<span class="hljs-string">&quot;Key: &quot;</span> + key + <span class="hljs-string">&quot;, and value: &quot;</span> + hMap.get(key));<br>        &#125;<br><br>        sortHashMapByTreeMap(hMap);<br>    &#125;<br><br>    <span class="hljs-comment">// 对HashMap按值排序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortHashMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; hMap)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;按值排序之后：&quot;</span>);<br><br>        <span class="hljs-comment">// Step 1 ： copy HashMap to a LinkedList</span><br>        Set&lt;Map.Entry&lt;Integer , String&gt;&gt; sets = hMap.entrySet();<br>        LinkedList&lt;Map.Entry&lt;Integer, String&gt;&gt; linkedList = <span class="hljs-keyword">new</span> LinkedList&lt;Map.Entry&lt;Integer, String&gt;&gt;(sets);<br><br>        <span class="hljs-comment">// Step 2 : use Collection.sort to sort the HashMap according to values</span><br>        Collections.sort(linkedList, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;Integer, String&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;Integer, String&gt; o1, Map.Entry&lt;Integer, String&gt; o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> o1.getValue().compareTo(o2.getValue());<br>            &#125;<br>        &#125;);<br>        Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> LinkedHashMap();<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : linkedList)&#123;<br>            map.put(entry.getKey(), entry.getValue());<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : map.entrySet())&#123;<br>            System.out.println(<span class="hljs-string">&quot;Key is : &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, and value is : &quot;</span> + entry.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortHashMapByKEy</span><span class="hljs-params">(Map&lt;Integer, String&gt; hashmap)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;按Key排序之后：&quot;</span>);<br><br>        <span class="hljs-comment">// Step 1 ： copy HashMap to a LinkedList</span><br>        Set&lt;Map.Entry&lt;Integer , String&gt;&gt; sets = hashmap.entrySet();<br>        LinkedList&lt;Map.Entry&lt;Integer, String&gt;&gt; linkedList = <span class="hljs-keyword">new</span> LinkedList&lt;Map.Entry&lt;Integer, String&gt;&gt;(sets);<br><br>        <span class="hljs-comment">// Step 2 : use Collection.sort to sort the HashMap according to values</span><br>        Collections.sort(linkedList, <span class="hljs-keyword">new</span> Comparator&lt;Map.Entry&lt;Integer, String&gt;&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Map.Entry&lt;Integer, String&gt; o1, Map.Entry&lt;Integer, String&gt; o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> o1.getKey().compareTo(o2.getKey());<br>            &#125;<br>        &#125;);<br>        Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> LinkedHashMap();<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : linkedList)&#123;<br>            map.put(entry.getKey(), entry.getValue());<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : map.entrySet())&#123;<br>            System.out.println(<span class="hljs-string">&quot;Key is : &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, and value is : &quot;</span> + entry.getValue());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortHashMapByTreeMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; hMap)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;按键排序之后：&quot;</span>);<br><br>        TreeMap&lt;Integer, String&gt; treeMap = <span class="hljs-keyword">new</span> TreeMap&lt;Integer, String&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> Integer.compare(o1, o2);<br>            &#125;<br>        &#125;);<br><br>        treeMap.putAll(hMap);<br>        <span class="hljs-keyword">for</span>(Map.Entry&lt;Integer, String&gt; entry : treeMap.entrySet())&#123;<br>            System.out.println(<span class="hljs-string">&quot;Key is : &quot;</span> + entry.getKey() + <span class="hljs-string">&quot;, and value is : &quot;</span> + entry.getValue());<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SortedMap接口和TreeMap实现类"><a href="#SortedMap接口和TreeMap实现类" class="headerlink" title="SortedMap接口和TreeMap实现类"></a>SortedMap接口和TreeMap实现类</h3><p>Map接口派生出一个SortedMap子接口，而SortedMap子接口也有一个实现类TreeMap。</p><p>TreeMap是一个红黑树结构，对所有的Key进行排序，从而保证TreeMap中所有Key-Value对处于有序状态。</p><p>TreeMap有两种排序方法：</p><ol><li>自然排序 —— 所有的Key必须实现Comparable接口，而且所有Key应该是同一个类的对象。</li><li>定制排序 —— 创建TreeMap时传入一个Comparator对象，负责对TreeMap中所有的Key进行排序。</li></ol><table><thead><tr><th>方法名称</th><th>方法解释</th></tr></thead><tbody><tr><td>Map.Entry firstEntry()</td><td>最小key的键值对。</td></tr><tr><td>Object firstKey()</td><td>最小的Key值。</td></tr><tr><td>Map.Entry lastEntry()</td><td>最大Key的键值对。</td></tr></tbody></table><h2 id="Collection接口及其子类"><a href="#Collection接口及其子类" class="headerlink" title="Collection接口及其子类"></a>Collection接口及其子类</h2><p>Collection作为一个集合的根接口，定义了一组对象和它的子类需要实现的方法。</p><ul><li>int size() 获取元素个数</li><li>boolean isEmpty() 是否个数为 0</li><li>boolean contains(Object element) 是否包含指定元素</li><li>boolean add(E element)  添加元素，成功时返回 true</li><li>boolean remove(Object element) 删除元素，成功时返回 true</li><li>Iterator&lt; E &gt; iterator() 获取迭代器</li></ul><p><img src="/img/coll.jpg" alt="Collection"></p><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>Collection继承了Iteratable&lt; E &gt;接口，里面只有iterator一个方法，返回一个Iterator迭代器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Returns an &#123;<span class="hljs-doctag">@link</span> Iterator&#125; for the elements in this object.</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> An &#123;<span class="hljs-doctag">@code</span> Iterator&#125; instance.</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function">Iterator&lt;T&gt; <span class="hljs-title">iterator</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Iterator-的使用方法"><a href="#Iterator-的使用方法" class="headerlink" title="Iterator 的使用方法"></a>Iterator 的使用方法</h4><p>遍历集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator iterator = list.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>    System.out.println(iterator.next());<br>&#125;<br></code></pre></td></tr></table></figure><p>用Iterator的标准操作方法可以让我们不关心具体集合的类型。使得客户端代码和具体集合类型耦合性弱，复合性更强。但是却点在于无法获得特定元素，只能挨个遍历。</p><p>当创建完成指向某个集合或者容器的Iterator对象时，指针其实指向第一个元素的上方。(NULL)</p><h4 id="Iterator的主要API"><a href="#Iterator的主要API" class="headerlink" title="Iterator的主要API"></a>Iterator的主要API</h4><ul><li>hasNext(): 没有指针下移操作，只判断是否存在下一个元素。</li><li>next(): 指针下移，返回该指针所指向的元素。</li><li>remove(): 删除当前指针所指向的元素。—— 一般和next方法一起用，这时候作用是删除Next方法返回的元素。</li></ul><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>List是Collection的一个子接口。</li><li>List是一个元素有序的，可以重复并且可以为null的集合。</li><li>在Collection集合类中最常使用的几种List实现类为<strong>ArrayList, LinkedList, Vector</strong>。</li><li>有序&amp;可以重复： List的数据结构是一个序列，存储元素时直接在内存中开辟一块连续的空间，然后将空间与索引对应。</li></ul><p>官方文档：</p><blockquote><p>The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.</p></blockquote><h4 id="List局部范围操作"><a href="#List局部范围操作" class="headerlink" title="List局部范围操作"></a>List局部范围操作</h4><p><code>List.subList(int fromIndex, int toIndex)</code> 返回的是fromIndex到toIndex之间的子集。注意：<strong>左闭右开 —— [fromIndex, toIndex)</strong></p><p><code>subList( )</code> 返回的是原来List的引用，只是把开始位置offset和size修改了。</p><p>由于subList和原来的List保持同一个引用，所以对subList进行操作也会对原来的List产生影响。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        List test = <span class="hljs-keyword">new</span> ArrayList();<br>        test.add(<span class="hljs-number">7</span>);<br>        test.add(<span class="hljs-number">8</span>);<br>        test.add(<span class="hljs-number">9</span>);<br>        test.add(<span class="hljs-number">10</span>);<br>        test.add(<span class="hljs-number">11</span>);<br><br>        List test2 = test.subList(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>        System.out.println(test);<br>        test2.clear();<br>        System.out.println(test);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">com.company.ListTest<br>[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]<br>[<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]<br><br>Process finished with exit code <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h4 id="List和Array的区别"><a href="#List和Array的区别" class="headerlink" title="List和Array的区别"></a>List和Array的区别</h4><ul><li>相似之处<ol><li>都可以表示同一类型的对象</li><li>使用Index进行索引</li></ol></li><li>不同之处<ol><li>数组可以存任何类型元素 —— List不能存基本数据类型</li><li>数组容量不能改变 —— List容量动态增长</li><li>数组效率高 —— List效率相对低一些</li></ol></li></ul><p>总结：当容量固定的时候优先使用数组，容纳的类型更多而且更加高效。</p><p>当容量不固定的情况下，用List更有优势（ArrayList &amp; LinkedList）。</p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><ul><li><p><strong>非线程安全类</strong></p></li><li><p>ArrayList是一个容量可以动态增长的数组。它继承了AbstractList抽象类。</p></li><li><p>有序</p></li><li><p>元素可以为null</p></li><li><p>效率高</p><ul><li>size(), isEmpty(), get(), set(), iterator(), ==&gt; O(1)</li><li>add()平均复杂度为O(n)</li><li>其他操作复杂度基本上都是O(n)</li></ul></li><li><p>占用空间小：和LinkedList相比，不用维护额外的链表</p></li></ul><h5 id="ArrayList构造器"><a href="#ArrayList构造器" class="headerlink" title="ArrayList构造器"></a>ArrayList构造器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">this</span>.elementData = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                               initialCapacity);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;<br>        elementData = c.toArray();<br>        <span class="hljs-keyword">if</span> ((size = elementData.length) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span><br>            <span class="hljs-keyword">if</span> (elementData.getClass() != Object[].class)<br>                elementData = Arrays.copyOf(elementData, size, Object[].class);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// replace with empty array.</span><br>            <span class="hljs-keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="ArrayList遍历方式"><a href="#ArrayList遍历方式" class="headerlink" title="ArrayList遍历方式"></a>ArrayList遍历方式</h5><ul><li>迭代器遍历</li><li>索引遍历</li><li>for循环遍历</li></ul><p>说明： 遍历效率 —— <strong>索引值 &gt; for循环 &gt; 迭代器</strong></p><h5 id="toArray-的使用"><a href="#toArray-的使用" class="headerlink" title="toArray()的使用"></a>toArray()的使用</h5><p>通常情况下，调用<code>ArrayList</code> 中的<code>toArray()</code>可能会遇到<code>java.lang.ClassCastException</code>异常。 —— 这是由于 <code>toArray()</code>返回的是<code>Object[]</code>数组，而将<code>Object[]</code>转化为其他类型时会抛出异常，因为其他类型(例如<code>Integer</code>)是<code>Object</code>的子类，而Java不支持向下转型。所以提供了另外一种方法。</p><p><code>&lt;T&gt; T[] toArray(T[] a)</code></p><p>用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方法一</span><br>Integer[] arr = test.toArray(<span class="hljs-keyword">new</span> Integer[<span class="hljs-number">0</span>]); <br><span class="hljs-comment">// Content传入Array的首地址</span><br><br><br><span class="hljs-comment">// 方法二(容易理解)</span><br>Integer[] arr = <span class="hljs-keyword">new</span> Integer[test.size()];<br>        test.toArray(arr);<br></code></pre></td></tr></table></figure><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ul><li>非线程安全类</li><li>双向链表实现</li><li>元素时有序的，并且允许元素为null</li><li>继承自AbstractSequentialList接口</li><li>只有三个成员变量：头结点 First 尾结点 Last 容量 Size</li><li>Node是一个双向节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>        E item;<br>        Node&lt;E&gt; next;<br>        Node&lt;E&gt; prev;<br><br>        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>            <span class="hljs-keyword">this</span>.item = element;<br>            <span class="hljs-keyword">this</span>.next = next;<br>            <span class="hljs-keyword">this</span>.prev = prev;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="ArrayList-amp-LinkedList-比较"><a href="#ArrayList-amp-LinkedList-比较" class="headerlink" title="ArrayList &amp; LinkedList 比较"></a>ArrayList &amp; LinkedList 比较</h4><h5 id="ArrayList-1"><a href="#ArrayList-1" class="headerlink" title="ArrayList"></a>ArrayList</h5><ul><li>基于数组，搜索和读取数据很快。</li><li>添加和删除元素时效率不高。</li><li>每次达到阈值之后需要扩容，有点影响效率。</li></ul><h5 id="LinkedList-1"><a href="#LinkedList-1" class="headerlink" title="LinkedList"></a>LinkedList</h5><ul><li>基于双向链表，添加删除元素效率很高。</li><li>只能顺序遍历，所以搜索读取数据效率不高。</li><li>没有固定容量不需要扩容。</li><li>需要维护链表因此占用空间更多。</li></ul><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ul><li>底层由一个可以增长的数组组成</li><li>Vector 通过 capacity (容量) 和 capacityIncrement (增长数量) 来尽量少的占用空间</li><li>扩容时默认扩大两倍</li><li>最好在插入大量元素前增加 vector 容量，那样可以减少重新申请内存的次数</li><li>通过 iterator 和 lastIterator 获得的迭代器是 fail-fast 的</li><li>通过 elements 获得的老版迭代器 Enumeration 不是 fail-fast 的</li><li>同步类，每个方法前都有同步锁 synchronized</li><li>在 JDK 2.0 以后，经过优化，Vector 也加入了 Java 集合框架大家族</li><li>线程安全！</li></ul><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set 注重元素的独一无二，不能存储重复的元素。并且存储元素时<strong>无序</strong>。</p><p>Set Implementations</p><ul><li>java.util.EnumSet</li><li>java.util.HashSet</li><li>java.util.LinkedHashSet</li><li>java.util.TreeSet</li></ul><h4 id="HashSet-SubClass"><a href="#HashSet-SubClass" class="headerlink" title="HashSet(SubClass)"></a>HashSet(SubClass)</h4><p>HashSet中存放的是HashCode，但存储的顺序并不是存入的顺序。</p><ul><li><p>HashSet如何实现不存入重复元素？</p></li><li><p>通过元素的hashCode() 和 Equals() 方法判断元素是否重复。</p></li><li><p>如果元素的HashCode是不相同的，那么HashSet会认为对象是不相等的。</p></li><li><p>然后用Equals()方法比较，如果结果为True，则无法加入。反之可以加入。</p><ul><li>那么哈希值HashCode相同的元素如何存储呢？</li><li>可以认为相同哈希值的元素放在同一个哈希桶（Bucket）中。</li></ul><p><img src="/img/hashSet.png" alt="HashSet"></p></li></ul><h4 id="TreeSet-Subclass"><a href="#TreeSet-Subclass" class="headerlink" title="TreeSet(Subclass)"></a>TreeSet(Subclass)</h4>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>29 Divide Two Integers</title>
    <link href="/2020/05/31/29DivideTwoIntegers/"/>
    <url>/2020/05/31/29DivideTwoIntegers/</url>
    
    <content type="html"><![CDATA[<h2 id="29-Divide-Two-Integers-Medium"><a href="#29-Divide-Two-Integers-Medium" class="headerlink" title="29 Divide Two Integers - Medium"></a>29 Divide Two Integers - Medium</h2><p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division and mod operator.</p><p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p><p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>truncate(8.345) = 8</code> and <code>truncate(-2.7335) = -2</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: dividend = <span class="hljs-number">10</span>, divisor = <span class="hljs-number">3</span><br><span class="hljs-attribute">Output</span>: <span class="hljs-number">3</span><br><span class="hljs-attribute">Explanation</span>: <span class="hljs-number">10</span>/<span class="hljs-number">3</span> = truncate(<span class="hljs-number">3</span>.<span class="hljs-number">33333</span>..) = <span class="hljs-number">3</span>.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>: dividend = <span class="hljs-number">7</span>, divisor = -<span class="hljs-number">3</span><br><span class="hljs-attribute">Output</span>: -<span class="hljs-number">2</span><br><span class="hljs-attribute">Explanation</span>: <span class="hljs-number">7</span>/-<span class="hljs-number">3</span> = truncate(-<span class="hljs-number">2</span>.<span class="hljs-number">33333</span>..) = -<span class="hljs-number">2</span>.<br></code></pre></td></tr></table></figure><p><strong>Note:</strong></p><ul><li>Both dividend and divisor will be <strong>32-bit signed integers.</strong></li><li>The divisor will never be 0.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function <strong>returns 231 − 1 when the division result overflows</strong>.</li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> dividend, <span class="hljs-keyword">int</span> divisor)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(dividend == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(dividend == Integer.MIN_VALUE &amp;&amp; divisor == -<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> Integer.MAX_VALUE;<br>        <br>        <span class="hljs-keyword">if</span>(divisor == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> dividend;<br>        <span class="hljs-keyword">int</span> sign = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>((dividend &gt; <span class="hljs-number">0</span> &amp;&amp; divisor &lt; <span class="hljs-number">0</span>) || (dividend &lt; <span class="hljs-number">0</span> &amp;&amp; divisor &gt; <span class="hljs-number">0</span>))<br>            sign = -<span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">long</span> a = Math.abs((<span class="hljs-keyword">long</span>)dividend);<br>        <span class="hljs-keyword">long</span> b = Math.abs((<span class="hljs-keyword">long</span>)divisor);<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(a &gt;= b)&#123;<br>            <span class="hljs-keyword">int</span> shift = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(a &gt;= (b&lt;&lt;shift))&#123;<br>                shift++;<br>            &#125;<br>            a -= b&lt;&lt;(shift - <span class="hljs-number">1</span>);<br>            res += <span class="hljs-number">1</span> &lt;&lt; (shift - <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sign * res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>18 4 Sum + 454 4SumII</title>
    <link href="/2020/05/29/184Sum-454-4SumII-Medium/"/>
    <url>/2020/05/29/184Sum-454-4SumII-Medium/</url>
    
    <content type="html"><![CDATA[<h2 id="18-4Sum-Medium"><a href="#18-4Sum-Medium" class="headerlink" title="18 4Sum - Medium"></a>18 4Sum - Medium</h2><p><strong>Tags:</strong> Array / HashTable / Two Pointers</p><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate quadruplets.</p><p><strong>Example:</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">Given<span class="hljs-built_in"> array </span>nums = [1, 0, -1, 0, -2, 2],<span class="hljs-built_in"> and </span>target = 0.<br><br>A solution set is:<br>[<br>  [-1,  0, 0, 1],<br>  [-2, -1, 1, 2],<br>  [-2,  0, 0, 2]<br>]<br></code></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>在<strong>3Sum</strong>的基础上加了一层<code>for循环</code>.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();<br>        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">return</span> res;<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">int</span> len = nums.length;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">3</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>])<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len - <span class="hljs-number">2</span>; j++)&#123;<br>                <span class="hljs-keyword">if</span>(j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>])<br>                    <span class="hljs-keyword">continue</span>;<br>                <br>                <span class="hljs-keyword">int</span> left = j + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">int</span> right = len - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br>                    <span class="hljs-keyword">int</span> sum = nums[i] + nums[j] + nums[left] + nums[right];<br>                    <span class="hljs-keyword">if</span>(sum &gt; target)<br>                        right--;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &lt; target)<br>                        left++;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        ArrayList&lt;Integer&gt; temp = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>                        temp.add(nums[i]); <br>                        temp.add(nums[j]); <br>                        temp.add(nums[left]); <br>                        temp.add(nums[right]);<br>                        res.add(temp);<br>                        left++; right--;<br>                        <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left - <span class="hljs-number">1</span>]) left++;<br>                        <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right + <span class="hljs-number">1</span>]) right--;<br>                    &#125;<br>                &#125;<br>                <br>            &#125;<br>        &#125;<br>        <br>        <br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="454-4Sum-II-Medium"><a href="#454-4Sum-II-Medium" class="headerlink" title="454  4Sum II - Medium"></a>454  4Sum II - Medium</h2><p><strong>Tags:</strong> Hash Map / Binary Search</p><p>Given four lists A, B, C, D of integer values, compute how many tuples <code>(i, j, k, l)</code> there are such that <code>A[i] + B[j] + C[k] + D[l]</code> is zero.</p><p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.</p><p><strong>Example:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Input</span>:<br><span class="hljs-attribute">A</span> =<span class="hljs-meta"> [ 1, 2]</span><br><span class="hljs-attribute">B</span> =<span class="hljs-meta"> [-2,-1]</span><br><span class="hljs-attribute">C</span> =<span class="hljs-meta"> [-1, 2]</span><br><span class="hljs-attribute">D</span> =<span class="hljs-meta"> [ 0, 2]</span><br><br><span class="hljs-attribute">Output</span>:<br><span class="hljs-attribute">2</span><br><br><span class="hljs-attribute">Explanation</span>:<br><span class="hljs-attribute">The</span> two tuples are:<br><span class="hljs-attribute">1</span>. (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>) -&gt; A[<span class="hljs-number">0</span>] + B[<span class="hljs-number">0</span>] + C[<span class="hljs-number">0</span>] + D[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span> + (-<span class="hljs-number">2</span>) + (-<span class="hljs-number">1</span>) + <span class="hljs-number">2</span> = <span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>. (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) -&gt; A[<span class="hljs-number">1</span>] + B[<span class="hljs-number">1</span>] + C[<span class="hljs-number">0</span>] + D[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span> + (-<span class="hljs-number">1</span>) + (-<span class="hljs-number">1</span>) + <span class="hljs-number">0</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>利用map。<br>第一个和第二个的和去生成map。<br>然后利用第三个第四个的和去对应的单元找。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fourSumCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] A, <span class="hljs-keyword">int</span>[] B, <span class="hljs-keyword">int</span>[] C, <span class="hljs-keyword">int</span>[] D)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Integer&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; B.length; j++)&#123;<br>                <span class="hljs-keyword">int</span> sum = A[i] + B[j];<br>                map.put(sum, map.getOrDefault(sum, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; C.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; D.length; j++)&#123;<br>                <span class="hljs-keyword">int</span> sum = -(C[i] + D[j]);<br>                <span class="hljs-keyword">if</span>(map.containsKey(sum))<br>                    res = res + map.get(sum);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>30 Substring with Concatenation of All Words</title>
    <link href="/2020/05/20/30SubstringwithConcatenationofAllWords/"/>
    <url>/2020/05/20/30SubstringwithConcatenationofAllWords/</url>
    
    <content type="html"><![CDATA[<h2 id="30-Substring-with-Concatenation-of-All-Words-Hard"><a href="#30-Substring-with-Concatenation-of-All-Words-Hard" class="headerlink" title="30 Substring with Concatenation of All Words - Hard"></a>30 Substring with Concatenation of All Words - Hard</h2><p><strong>Tags:</strong> HashMap, String</p><p>You are given a string, <strong>s</strong>, and a list of words, <strong>words</strong>, that are all of the same length. Find all starting indices of substring(s) in <strong>s</strong> that is a concatenation of each word in <strong>words</strong> exactly once and without any intervening characters.</p><p><strong>Example 1:</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Input:<br>  s = <span class="hljs-string">&quot;barfoothefoobarman&quot;</span>,<br>  <span class="hljs-built_in">words</span> = [<span class="hljs-string">&quot;foo&quot;</span>,<span class="hljs-string">&quot;bar&quot;</span>]<br>Output: [<span class="hljs-number">0</span>,<span class="hljs-number">9</span>]<br>Explanation: Substrings starting <span class="hljs-keyword">at</span> index <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">9</span> are <span class="hljs-string">&quot;barfoo&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;foobar&quot;</span> respectively.<br>The output order <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> matter, <span class="hljs-keyword">returning</span> [<span class="hljs-number">9</span>,<span class="hljs-number">0</span>] <span class="hljs-keyword">is</span> fine too.<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span><br>  s = <span class="hljs-string">&quot;wordgoodgoodgoodbestword&quot;</span>,<br>  words = [<span class="hljs-string">&quot;word&quot;</span>,<span class="hljs-string">&quot;good&quot;</span>,<span class="hljs-string">&quot;best&quot;</span>,<span class="hljs-string">&quot;word&quot;</span>]<br><span class="hljs-symbol">Output:</span> []<br></code></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p><a href="https://leetcode.wang/leetCode-30-Substring-with-Concatenation-of-All-Words.html">参考链接</a></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">findSubstring</span><span class="hljs-params">(String s, String[] words)</span> </span>&#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        <span class="hljs-keyword">if</span>(words.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>        <br>        Map&lt;String, Integer&gt; map1 = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br>        <span class="hljs-keyword">int</span> wordNum = words.length;<br>        <span class="hljs-keyword">int</span> wordLen = words[<span class="hljs-number">0</span>].length();<br>        <br>        <span class="hljs-keyword">for</span>(String str: words)<br>            map1.put(str,map1.getOrDefault(str, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        <br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length() - wordNum * wordLen + <span class="hljs-number">1</span>; i++)&#123;<br>            Map&lt;String, Integer&gt; map2 = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br>            <span class="hljs-keyword">int</span> curNum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(curNum &lt; wordNum)&#123;<br>              String subWord = s.substring(i + curNum * wordLen, i + (curNum + <span class="hljs-number">1</span>) * wordLen);<br>                <span class="hljs-keyword">if</span>(map1.containsKey(subWord))&#123;<br>                    map2.put(subWord, map2.getOrDefault(subWord, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">if</span>(map2.get(subWord) &gt; map1.get(subWord))<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>                curNum ++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(curNum == wordNum)<br>                res.add(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>23 Merge k Sorted Lists</title>
    <link href="/2020/05/17/23MergekSortedLists/"/>
    <url>/2020/05/17/23MergekSortedLists/</url>
    
    <content type="html"><![CDATA[<h2 id="23-Merge-k-Sorted-Lists-Hard"><a href="#23-Merge-k-Sorted-Lists-Hard" class="headerlink" title="23 Merge k Sorted Lists - Hard"></a>23 Merge k Sorted Lists - Hard</h2><p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p><p><strong>Example:</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">Input:<br>[<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>,<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>,<br>  <span class="hljs-number">2</span>-&gt;<span class="hljs-number">6</span><br>]<br>Output: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>-&gt;<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p><strong>MinHeap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(lists.length == <span class="hljs-number">0</span> || lists == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        <br>        Queue&lt;ListNode&gt; q = <span class="hljs-keyword">new</span> PriorityQueue&lt;ListNode&gt;(lists.length,<br>        <span class="hljs-keyword">new</span> Comparator&lt;ListNode&gt;()&#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(ListNode l1, ListNode l2)</span></span>&#123;<br>                <span class="hljs-keyword">return</span> l1.val - l2.val;<br>            &#125;<br>        &#125;);<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; lists.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(lists[i] != <span class="hljs-keyword">null</span>)<br>                q.offer(lists[i]);<br>        &#125;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ListNode cur = dummy;<br>        <br>        <span class="hljs-keyword">while</span>(!q.isEmpty())&#123;<br>            ListNode node = q.poll();<br>            cur.next = node;<br>            cur = node;<br>            <span class="hljs-keyword">if</span>(node.next != <span class="hljs-keyword">null</span>)&#123;<br>                q.offer(node.next);<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> dummy.next;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>24 Swap Nodes in Pairs</title>
    <link href="/2020/05/08/24SwapNodesinPairs/"/>
    <url>/2020/05/08/24SwapNodesinPairs/</url>
    
    <content type="html"><![CDATA[<h2 id="24-Swap-Nodes-in-Pairs-Medium"><a href="#24-Swap-Nodes-in-Pairs-Medium" class="headerlink" title="24. Swap Nodes in Pairs - Medium"></a>24. Swap Nodes in Pairs - Medium</h2><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>You may <strong>not</strong> modify the values in the list’s nodes, only nodes itself may be changed.</p><p><strong>Example:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Given</span> <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>, you should return the list as <span class="hljs-number">2</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">3</span>.<br></code></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> head;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        dummy.next = head;<br>        head = dummy;<br>        <span class="hljs-keyword">while</span>(head.next != <span class="hljs-keyword">null</span> &amp;&amp; head.next.next != <span class="hljs-keyword">null</span>)&#123;<br>            ListNode n1 = head.next;<br>            ListNode n2 = head.next.next;<br>            n1.next = n2.next;<br>            n2.next = n1;<br>            head.next = n2;<br>            <br>            head = n1;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>25 Reverse Nodes in k-Group</title>
    <link href="/2020/05/07/25ReverseNodesink-Group/"/>
    <url>/2020/05/07/25ReverseNodesink-Group/</url>
    
    <content type="html"><![CDATA[<h2 id="25-Reverse-Nodes-in-k-Group"><a href="#25-Reverse-Nodes-in-k-Group" class="headerlink" title="25 Reverse Nodes in k-Group"></a>25 Reverse Nodes in k-Group</h2><p><strong>Tag:</strong> Linked List</p><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p><p>如果链表的长度不是<strong>k</strong>的长度，那么最后多余的部分不用翻转。</p><p><strong>Example:</strong></p><p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p><strong>Note:</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        dummy.next = head;<br>        head = dummy;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            head = reverse(head, k);<br>            <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>) <br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>    <br>    <span class="hljs-comment">// head -&gt; n1 -&gt; n2 ... nk -&gt; nk+1</span><br>    <span class="hljs-comment">// =&gt;</span><br>    <span class="hljs-comment">// head -&gt; nk -&gt; nk-1 .. n1 -&gt; nk+1</span><br>    <span class="hljs-comment">// return n1</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span></span>&#123;<br>        <span class="hljs-comment">// 找到nk</span><br>        <span class="hljs-comment">// 找到nkplus</span><br>        <span class="hljs-comment">// 找到n1</span><br>        ListNode nk = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nk == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>; <span class="hljs-comment">// 判断是否到了链表尾部不足k个元素的部分</span><br>            nk = nk.next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(nk == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;   <span class="hljs-comment">// 解决最后一个sub-linked-list长度不够的情况</span><br>        ListNode nkplus = nk.next;<br>        ListNode n1 = head.next;<br>        <br>        <span class="hljs-comment">// 设置n1前面的node -&gt; pre</span><br>        <span class="hljs-comment">// 设置当前node -&gt; cur</span><br>        <span class="hljs-comment">// reverse the sub - linked list</span><br>        <br>        ListNode pre = <span class="hljs-keyword">null</span>;<br>        ListNode cur = n1;<br> <br>        <span class="hljs-keyword">while</span>(cur != nkplus)&#123;<br>            ListNode temp = cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = temp;<br>        &#125;<br>        <br>        <span class="hljs-comment">// connect</span><br>        head.next = nk;<br>        n1.next = nkplus;<br>        <span class="hljs-keyword">return</span> n1; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Space-Complexity"><a href="#Space-Complexity" class="headerlink" title="Space Complexity"></a>Space Complexity</h3><p><strong>Space: O(1)</strong></p>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4 String to Integer</title>
    <link href="/2020/04/06/4StringtoInteger/"/>
    <url>/2020/04/06/4StringtoInteger/</url>
    
    <content type="html"><![CDATA[<h2 id="3-String-to-Integer"><a href="#3-String-to-Integer" class="headerlink" title="3 String to Integer"></a>3 String to Integer</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Implement <code>atoi</code> which converts a string to an integer.</p><p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p><p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p><p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p><p>If no valid conversion could be performed, a zero value is returned.</p><p><strong>Note:</strong></p><ul><li>Only the space character <code>&#39; &#39;</code> is considered as whitespace character.</li><li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.</li></ul><p><strong>Example 1:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> <span class="hljs-string">&quot;42&quot;</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">42</span><br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Input:</span> <span class="hljs-string">&quot;   -42&quot;</span><br><span class="hljs-symbol">Output:</span> -<span class="hljs-number">42</span><br><span class="hljs-symbol">Explanation:</span> The first non-whitespace character <span class="hljs-built_in">is</span> <span class="hljs-comment">&#x27;-&#x27;, which is the minus sign.</span><br>             <span class="hljs-keyword">Then</span> <span class="hljs-keyword">take</span> <span class="hljs-keyword">as</span> many numerical digits <span class="hljs-keyword">as</span> possible, which gets <span class="hljs-number">42</span>.<br></code></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Input</span>: &quot;4193 with words&quot;<br>Output: <span class="hljs-number">4193</span><br>Explanation: <span class="hljs-keyword">Conversion</span> stops at digit <span class="hljs-string">&#x27;3&#x27;</span> <span class="hljs-keyword">as</span> the next <span class="hljs-type">character</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> a numerical digit.<br></code></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Input</span>: &quot;words and 987&quot;<br>Output: <span class="hljs-number">0</span><br>Explanation: The first non-whitespace <span class="hljs-type">character</span> <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;w&#x27;</span>, which <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> a numerical <br>             digit <span class="hljs-keyword">or</span> a +/- sign. Therefore <span class="hljs-keyword">no</span> <span class="hljs-keyword">valid</span> <span class="hljs-keyword">conversion</span> could be performed.<br></code></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Input</span>: &quot;-91283472332&quot;<br>Output: <span class="hljs-number">-2147483648</span><br>Explanation: The number &quot;-91283472332&quot; <span class="hljs-keyword">is</span> <span class="hljs-keyword">out</span> <span class="hljs-keyword">of</span> the range <span class="hljs-keyword">of</span> a <span class="hljs-number">32</span>-<span class="hljs-type">bit</span> signed <span class="hljs-type">integer</span>.<br>             Thefore INT_MIN (−<span class="hljs-number">231</span>) <span class="hljs-keyword">is</span> returned.<br></code></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">myAtoi</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        <span class="hljs-comment">// IT IS JUST A &#x27;IF-ELSE&#x27; PRACTICE</span><br>        <span class="hljs-comment">// NOT A REAL PROBLEM</span><br>        <span class="hljs-keyword">if</span>(str == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        str = str.trim(); <span class="hljs-comment">// trim() to delete all whitespaces at the front or rear</span><br>        <span class="hljs-keyword">if</span>(str.length() == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">int</span> sign = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(str.charAt(index) == <span class="hljs-string">&#x27;+&#x27;</span>)<br>            index++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str.charAt(index) == <span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>            sign = -<span class="hljs-number">1</span>;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">long</span> num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;index &lt; str.length();index++)&#123;<br>            <span class="hljs-keyword">if</span>(str.charAt(index) &lt; <span class="hljs-string">&#x27;0&#x27;</span> || str.charAt(index) &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>                <span class="hljs-keyword">break</span>;<br>            num = num * <span class="hljs-number">10</span> + (str.charAt(index) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(num &gt; Integer.MAX_VALUE)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(num * sign &gt; Integer.MAX_VALUE)<br>            <span class="hljs-keyword">return</span> Integer.MAX_VALUE;<br>        <span class="hljs-keyword">if</span>(num * sign &lt; Integer.MIN_VALUE)<br>            <span class="hljs-keyword">return</span> Integer.MIN_VALUE;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)num* sign;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
